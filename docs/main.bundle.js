!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=9)}([function(e,t,n){"use strict";e.exports=n(4)},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,l=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var s in n=Object(arguments[u]))o.call(n,s)&&(l[s]=n[s]);if(r){a=r(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(l[a[c]]=n[a[c]])}}return l}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(5)},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,o){"use strict";var i=[],a=n.document,l=Object.getPrototypeOf,u=i.slice,s=i.concat,c=i.push,f=i.indexOf,d={},p=d.toString,h=d.hasOwnProperty,m=h.toString,y=m.call(Object),v={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},b=function(e){return null!=e&&e===e.window},x={type:!0,src:!0,noModule:!0};function w(e,t,n){var r,o=(t=t||a).createElement("script");if(o.text=e,n)for(r in x)n[r]&&(o[r]=n[r]);t.head.appendChild(o).parentNode.removeChild(o)}function k(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[p.call(e)]||"object":typeof e}var T=function(e,t){return new T.fn.init(e,t)},E=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(e){var t=!!e&&"length"in e&&e.length,n=k(e);return!g(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}T.fn=T.prototype={jquery:"3.3.1",constructor:T,length:0,toArray:function(){return u.call(this)},get:function(e){return null==e?u.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=T.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return T.each(this,e)},map:function(e){return this.pushStack(T.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:i.sort,splice:i.splice},T.extend=T.fn.extend=function(){var e,t,n,r,o,i,a=arguments[0]||{},l=1,u=arguments.length,s=!1;for("boolean"==typeof a&&(s=a,a=arguments[l]||{},l++),"object"==typeof a||g(a)||(a={}),l===u&&(a=this,l--);l<u;l++)if(null!=(e=arguments[l]))for(t in e)n=a[t],a!==(r=e[t])&&(s&&r&&(T.isPlainObject(r)||(o=Array.isArray(r)))?(o?(o=!1,i=n&&Array.isArray(n)?n:[]):i=n&&T.isPlainObject(n)?n:{},a[t]=T.extend(s,i,r)):void 0!==r&&(a[t]=r));return a},T.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e))&&(!(t=l(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&m.call(n)===y)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){w(e)},each:function(e,t){var n,r=0;if(C(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(E,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?T.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,a=!n;o<i;o++)!t(e[o],o)!==a&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,a=[];if(C(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&a.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&a.push(o);return s.apply([],a)},guid:1,support:v}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=i[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){d["[object "+t+"]"]=t.toLowerCase()});var S=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,r,o,i,a,l,u,s,c,f,d,p,h,m,y,v,g,b,x="sizzle"+1*new Date,w=e.document,k=0,T=0,E=ae(),C=ae(),S=ae(),_=function(e,t){return e===t&&(f=!0),0},N={}.hasOwnProperty,P=[],D=P.pop,O=P.push,j=P.push,A=P.slice,M=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",I="[\\x20\\t\\r\\n\\f]",R="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",F="\\["+I+"*("+R+")(?:"+I+"*([*^$|!~]?=)"+I+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+I+"*\\]",U=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",q=new RegExp(I+"+","g"),z=new RegExp("^"+I+"+|((?:^|[^\\\\])(?:\\\\.)*)"+I+"+$","g"),H=new RegExp("^"+I+"*,"+I+"*"),W=new RegExp("^"+I+"*([>+~]|"+I+")"+I+"*"),B=new RegExp("="+I+"*([^\\]'\"]*?)"+I+"*\\]","g"),$=new RegExp(U),V=new RegExp("^"+R+"$"),Q={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+U),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+I+"*(even|odd|(([+-]|)(\\d*)n|)"+I+"*(?:([+-]|)"+I+"*(\\d+)|))"+I+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+I+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+I+"*((?:-\\d)?\\d*)"+I+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,G=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+I+"?|("+I+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){d()},oe=ge(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{j.apply(P=A.call(w.childNodes),w.childNodes),P[w.childNodes.length].nodeType}catch(e){j={apply:P.length?function(e,t){O.apply(e,A.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function ie(e,t,r,o){var i,l,s,c,f,h,v,g=t&&t.ownerDocument,k=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==k&&9!==k&&11!==k)return r;if(!o&&((t?t.ownerDocument||t:w)!==p&&d(t),t=t||p,m)){if(11!==k&&(f=G.exec(e)))if(i=f[1]){if(9===k){if(!(s=t.getElementById(i)))return r;if(s.id===i)return r.push(s),r}else if(g&&(s=g.getElementById(i))&&b(t,s)&&s.id===i)return r.push(s),r}else{if(f[2])return j.apply(r,t.getElementsByTagName(e)),r;if((i=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return j.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!S[e+" "]&&(!y||!y.test(e))){if(1!==k)g=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((c=t.getAttribute("id"))?c=c.replace(te,ne):t.setAttribute("id",c=x),l=(h=a(e)).length;l--;)h[l]="#"+c+" "+ve(h[l]);v=h.join(","),g=J.test(e)&&me(t.parentNode)||t}if(v)try{return j.apply(r,g.querySelectorAll(v)),r}catch(e){}finally{c===x&&t.removeAttribute("id")}}}return u(e.replace(z,"$1"),t,r,o)}function ae(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function le(e){return e[x]=!0,e}function ue(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function se(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function ce(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function pe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return le(function(t){return t=+t,le(function(n,r){for(var o,i=e([],n.length,t),a=i.length;a--;)n[o=i[a]]&&(n[o]=!(r[o]=n[o]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ie.support={},i=ie.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},d=ie.setDocument=function(e){var t,o,a=e?e.ownerDocument||e:w;return a!==p&&9===a.nodeType&&a.documentElement?(h=(p=a).documentElement,m=!i(p),w!==p&&(o=p.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",re,!1):o.attachEvent&&o.attachEvent("onunload",re)),n.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ue(function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Y.test(p.getElementsByClassName),n.getById=ue(function(e){return h.appendChild(e).id=x,!p.getElementsByName||!p.getElementsByName(x).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],y=[],(n.qsa=Y.test(p.querySelectorAll))&&(ue(function(e){h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&y.push("[*^$]="+I+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||y.push("\\["+I+"*(?:value|"+L+")"),e.querySelectorAll("[id~="+x+"-]").length||y.push("~="),e.querySelectorAll(":checked").length||y.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||y.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&y.push("name"+I+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&y.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&y.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),y.push(",.*:")})),(n.matchesSelector=Y.test(g=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue(function(e){n.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),v.push("!=",U)}),y=y.length&&new RegExp(y.join("|")),v=v.length&&new RegExp(v.join("|")),t=Y.test(h.compareDocumentPosition),b=t||Y.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},_=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===p||e.ownerDocument===w&&b(w,e)?-1:t===p||t.ownerDocument===w&&b(w,t)?1:c?M(c,e)-M(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,a=[e],l=[t];if(!o||!i)return e===p?-1:t===p?1:o?-1:i?1:c?M(c,e)-M(c,t):0;if(o===i)return ce(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;a[r]===l[r];)r++;return r?ce(a[r],l[r]):a[r]===w?-1:l[r]===w?1:0},p):p},ie.matches=function(e,t){return ie(e,null,null,t)},ie.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&d(e),t=t.replace(B,"='$1']"),n.matchesSelector&&m&&!S[t+" "]&&(!v||!v.test(t))&&(!y||!y.test(t)))try{var r=g.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return ie(t,p,null,[e]).length>0},ie.contains=function(e,t){return(e.ownerDocument||e)!==p&&d(e),b(e,t)},ie.attr=function(e,t){(e.ownerDocument||e)!==p&&d(e);var o=r.attrHandle[t.toLowerCase()],i=o&&N.call(r.attrHandle,t.toLowerCase())?o(e,t,!m):void 0;return void 0!==i?i:n.attributes||!m?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},ie.escape=function(e){return(e+"").replace(te,ne)},ie.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ie.uniqueSort=function(e){var t,r=[],o=0,i=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(_),f){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return c=null,e},o=ie.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(r=ie.selectors={cacheLength:50,createPseudo:le,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ie.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ie.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&$.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+I+")"+e+"("+I+"|$)"))&&E(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var o=ie.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(q," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),a="last"!==e.slice(-4),l="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,u){var s,c,f,d,p,h,m=i!==a?"nextSibling":"previousSibling",y=t.parentNode,v=l&&t.nodeName.toLowerCase(),g=!u&&!l,b=!1;if(y){if(i){for(;m;){for(d=t;d=d[m];)if(l?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?y.firstChild:y.lastChild],a&&g){for(b=(p=(s=(c=(f=(d=y)[x]||(d[x]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===k&&s[1])&&s[2],d=p&&y.childNodes[p];d=++p&&d&&d[m]||(b=p=0)||h.pop();)if(1===d.nodeType&&++b&&d===t){c[e]=[k,p,b];break}}else if(g&&(b=p=(s=(c=(f=(d=t)[x]||(d[x]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===k&&s[1]),!1===b)for(;(d=++p&&d&&d[m]||(b=p=0)||h.pop())&&((l?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++b||(g&&((c=(f=d[x]||(d[x]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]=[k,b]),d!==t)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||ie.error("unsupported pseudo: "+e);return o[x]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,n){for(var r,i=o(e,t),a=i.length;a--;)e[r=M(e,i[a])]=!(n[r]=i[a])}):function(e){return o(e,0,n)}):o}},pseudos:{not:le(function(e){var t=[],n=[],r=l(e.replace(z,"$1"));return r[x]?le(function(e,t,n,o){for(var i,a=r(e,null,o,[]),l=e.length;l--;)(i=a[l])&&(e[l]=!(t[l]=i))}):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}}),has:le(function(e){return function(t){return ie(e,t).length>0}}),contains:le(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:le(function(e){return V.test(e||"")||ie.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=de(t);function ye(){}function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ge(e,t,n){var r=t.dir,o=t.next,i=o||r,a=n&&"parentNode"===i,l=T++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,o);return!1}:function(t,n,u){var s,c,f,d=[k,l];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(c=(f=t[x]||(t[x]={}))[t.uniqueID]||(f[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((s=c[i])&&s[0]===k&&s[1]===l)return d[2]=s[2];if(c[i]=d,d[2]=e(t,n,u))return!0}return!1}}function be(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function xe(e,t,n,r,o){for(var i,a=[],l=0,u=e.length,s=null!=t;l<u;l++)(i=e[l])&&(n&&!n(i,r,o)||(a.push(i),s&&t.push(l)));return a}function we(e,t,n,r,o,i){return r&&!r[x]&&(r=we(r)),o&&!o[x]&&(o=we(o,i)),le(function(i,a,l,u){var s,c,f,d=[],p=[],h=a.length,m=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)ie(e,t[r],n);return n}(t||"*",l.nodeType?[l]:l,[]),y=!e||!i&&t?m:xe(m,d,e,l,u),v=n?o||(i?e:h||r)?[]:a:y;if(n&&n(y,v,l,u),r)for(s=xe(v,p),r(s,[],l,u),c=s.length;c--;)(f=s[c])&&(v[p[c]]=!(y[p[c]]=f));if(i){if(o||e){if(o){for(s=[],c=v.length;c--;)(f=v[c])&&s.push(y[c]=f);o(null,v=[],s,u)}for(c=v.length;c--;)(f=v[c])&&(s=o?M(i,f):d[c])>-1&&(i[s]=!(a[s]=f))}}else v=xe(v===a?v.splice(h,v.length):v),o?o(null,a,v,u):j.apply(a,v)})}function ke(e){for(var t,n,o,i=e.length,a=r.relative[e[0].type],l=a||r.relative[" "],u=a?1:0,c=ge(function(e){return e===t},l,!0),f=ge(function(e){return M(t,e)>-1},l,!0),d=[function(e,n,r){var o=!a&&(r||n!==s)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,o}];u<i;u++)if(n=r.relative[e[u].type])d=[ge(be(d),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[x]){for(o=++u;o<i&&!r.relative[e[o].type];o++);return we(u>1&&be(d),u>1&&ve(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(z,"$1"),n,u<o&&ke(e.slice(u,o)),o<i&&ke(e=e.slice(o)),o<i&&ve(e))}d.push(n)}return be(d)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,a=ie.tokenize=function(e,t){var n,o,i,a,l,u,s,c=C[e+" "];if(c)return t?0:c.slice(0);for(l=e,u=[],s=r.preFilter;l;){for(a in n&&!(o=H.exec(l))||(o&&(l=l.slice(o[0].length)||l),u.push(i=[])),n=!1,(o=W.exec(l))&&(n=o.shift(),i.push({value:n,type:o[0].replace(z," ")}),l=l.slice(n.length)),r.filter)!(o=Q[a].exec(l))||s[a]&&!(o=s[a](o))||(n=o.shift(),i.push({value:n,type:a,matches:o}),l=l.slice(n.length));if(!n)break}return t?l.length:l?ie.error(e):C(e,u).slice(0)},l=ie.compile=function(e,t){var n,o=[],i=[],l=S[e+" "];if(!l){for(t||(t=a(e)),n=t.length;n--;)(l=ke(t[n]))[x]?o.push(l):i.push(l);(l=S(e,function(e,t){var n=t.length>0,o=e.length>0,i=function(i,a,l,u,c){var f,h,y,v=0,g="0",b=i&&[],x=[],w=s,T=i||o&&r.find.TAG("*",c),E=k+=null==w?1:Math.random()||.1,C=T.length;for(c&&(s=a===p||a||c);g!==C&&null!=(f=T[g]);g++){if(o&&f){for(h=0,a||f.ownerDocument===p||(d(f),l=!m);y=e[h++];)if(y(f,a||p,l)){u.push(f);break}c&&(k=E)}n&&((f=!y&&f)&&v--,i&&b.push(f))}if(v+=g,n&&g!==v){for(h=0;y=t[h++];)y(b,x,a,l);if(i){if(v>0)for(;g--;)b[g]||x[g]||(x[g]=D.call(u));x=xe(x)}j.apply(u,x),c&&!i&&x.length>0&&v+t.length>1&&ie.uniqueSort(u)}return c&&(k=E,s=w),b};return n?le(i):i}(i,o))).selector=e}return l},u=ie.select=function(e,t,n,o){var i,u,s,c,f,d="function"==typeof e&&e,p=!o&&a(e=d.selector||e);if(n=n||[],1===p.length){if((u=p[0]=p[0].slice(0)).length>2&&"ID"===(s=u[0]).type&&9===t.nodeType&&m&&r.relative[u[1].type]){if(!(t=(r.find.ID(s.matches[0].replace(Z,ee),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(i=Q.needsContext.test(e)?0:u.length;i--&&(s=u[i],!r.relative[c=s.type]);)if((f=r.find[c])&&(o=f(s.matches[0].replace(Z,ee),J.test(u[0].type)&&me(t.parentNode)||t))){if(u.splice(i,1),!(e=o.length&&ve(u)))return j.apply(n,o),n;break}}return(d||l(e,p))(o,t,!m,n,!t||J.test(e)&&me(t.parentNode)||t),n},n.sortStable=x.split("").sort(_).join("")===x,n.detectDuplicates=!!f,d(),n.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||se("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||se("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||se(L,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),ie}(n);T.find=S,T.expr=S.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=S.uniqueSort,T.text=S.getText,T.isXMLDoc=S.isXML,T.contains=S.contains,T.escapeSelector=S.escape;var _=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&T(e).is(n))break;r.push(e)}return r},N=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},P=T.expr.match.needsContext;function D(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var O=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,t,n){return g(t)?T.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?T.grep(e,function(e){return e===t!==n}):"string"!=typeof t?T.grep(e,function(e){return f.call(t,e)>-1!==n}):T.filter(t,e,n)}T.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?T.find.matchesSelector(r,e)?[r]:[]:T.find.matches(e,T.grep(t,function(e){return 1===e.nodeType}))},T.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(T(e).filter(function(){for(t=0;t<r;t++)if(T.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)T.find(e,o[t],n);return r>1?T.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&P.test(e)?T(e):e||[],!1).length}});var A,M=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||A,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:M.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:a,!0)),O.test(r[1])&&T.isPlainObject(t))for(r in t)g(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=a.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(T):T.makeArray(e,this)}).prototype=T.fn,A=T(a);var L=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};function R(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t=T(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(T.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,o=this.length,i=[],a="string"!=typeof e&&T(e);if(!P.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?T.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?f.call(T(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return _(e,"parentNode")},parentsUntil:function(e,t,n){return _(e,"parentNode",n)},next:function(e){return R(e,"nextSibling")},prev:function(e){return R(e,"previousSibling")},nextAll:function(e){return _(e,"nextSibling")},prevAll:function(e){return _(e,"previousSibling")},nextUntil:function(e,t,n){return _(e,"nextSibling",n)},prevUntil:function(e,t,n){return _(e,"previousSibling",n)},siblings:function(e){return N((e.parentNode||{}).firstChild,e)},children:function(e){return N(e.firstChild)},contents:function(e){return D(e,"iframe")?e.contentDocument:(D(e,"template")&&(e=e.content||e),T.merge([],e.childNodes))}},function(e,t){T.fn[e]=function(n,r){var o=T.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=T.filter(r,o)),this.length>1&&(I[e]||T.uniqueSort(o),L.test(e)&&o.reverse()),this.pushStack(o)}});var F=/[^\x20\t\r\n\f]+/g;function U(e){return e}function q(e){throw e}function z(e,t,n,r){var o;try{e&&g(o=e.promise)?o.call(e).done(t).fail(n):e&&g(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}T.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return T.each(e.match(F)||[],function(e,n){t[n]=!0}),t}(e):T.extend({},e);var t,n,r,o,i=[],a=[],l=-1,u=function(){for(o=o||e.once,r=t=!0;a.length;l=-1)for(n=a.shift();++l<i.length;)!1===i[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},s={add:function(){return i&&(n&&!t&&(l=i.length-1,a.push(n)),function t(n){T.each(n,function(n,r){g(r)?e.unique&&s.has(r)||i.push(r):r&&r.length&&"string"!==k(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return T.each(arguments,function(e,t){for(var n;(n=T.inArray(t,i,n))>-1;)i.splice(n,1),n<=l&&l--}),this},has:function(e){return e?T.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=a=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=a=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return s.fireWith(this,arguments),this},fired:function(){return!!r}};return s},T.extend({Deferred:function(e){var t=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return T.Deferred(function(n){T.each(t,function(t,r){var o=g(e[r[4]])&&e[r[4]];i[r[1]](function(){var e=o&&o.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(e,r,o){var i=0;function a(e,t,r,o){return function(){var l=this,u=arguments,s=function(){var n,s;if(!(e<i)){if((n=r.apply(l,u))===t.promise())throw new TypeError("Thenable self-resolution");s=n&&("object"==typeof n||"function"==typeof n)&&n.then,g(s)?o?s.call(n,a(i,t,U,o),a(i,t,q,o)):(i++,s.call(n,a(i,t,U,o),a(i,t,q,o),a(i,t,U,t.notifyWith))):(r!==U&&(l=void 0,u=[n]),(o||t.resolveWith)(l,u))}},c=o?s:function(){try{s()}catch(n){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(n,c.stackTrace),e+1>=i&&(r!==q&&(l=void 0,u=[n]),t.rejectWith(l,u))}};e?c():(T.Deferred.getStackHook&&(c.stackTrace=T.Deferred.getStackHook()),n.setTimeout(c))}}return T.Deferred(function(n){t[0][3].add(a(0,n,g(o)?o:U,n.notifyWith)),t[1][3].add(a(0,n,g(e)?e:U)),t[2][3].add(a(0,n,g(r)?r:q))}).promise()},promise:function(e){return null!=e?T.extend(e,o):o}},i={};return T.each(t,function(e,n){var a=n[2],l=n[5];o[n[1]]=a.add,l&&a.add(function(){r=l},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=a.fireWith}),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=u.call(arguments),i=T.Deferred(),a=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?u.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(z(e,i.done(a(n)).resolve,i.reject,!t),"pending"===i.state()||g(o[n]&&o[n].then)))return i.then();for(;n--;)z(o[n],a(n),i.reject);return i.promise()}});var H=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&H.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},T.readyException=function(e){n.setTimeout(function(){throw e})};var W=T.Deferred();function B(){a.removeEventListener("DOMContentLoaded",B),n.removeEventListener("load",B),T.ready()}T.fn.ready=function(e){return W.then(e).catch(function(e){T.readyException(e)}),this},T.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==e&&--T.readyWait>0||W.resolveWith(a,[T]))}}),T.ready.then=W.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(T.ready):(a.addEventListener("DOMContentLoaded",B),n.addEventListener("load",B));var $=function(e,t,n,r,o,i,a){var l=0,u=e.length,s=null==n;if("object"===k(n))for(l in o=!0,n)$(e,t,l,n[l],!0,i,a);else if(void 0!==r&&(o=!0,g(r)||(a=!0),s&&(a?(t.call(e,r),t=null):(s=t,t=function(e,t,n){return s.call(T(e),n)})),t))for(;l<u;l++)t(e[l],n,a?r:r.call(e[l],l,t(e[l],n)));return o?e:s?t.call(e):u?t(e[0],n):i},V=/^-ms-/,Q=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function K(e){return e.replace(V,"ms-").replace(Q,X)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function G(){this.expando=T.expando+G.uid++}G.uid=1,G.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[K(t)]=n;else for(r in t)o[K(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][K(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(K):(t=K(t))in r?[t]:t.match(F)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||T.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var J=new G,Z=new G,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}T.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),T.fn.extend({data:function(e,t){var n,r,o,i=this[0],a=i&&i.attributes;if(void 0===e){if(this.length&&(o=Z.get(i),1===i.nodeType&&!J.get(i,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=K(r.slice(5)),ne(i,r,o[r]));J.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){Z.set(this,e)}):$(this,function(t){var n;if(i&&void 0===t)return void 0!==(n=Z.get(i,e))?n:void 0!==(n=ne(i,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),T.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,T.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=T.queue(e,t),r=n.length,o=n.shift(),i=T._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,function(){T.dequeue(e,t)},i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:T.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),T.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?T.queue(this[0],e):void 0===t?this:this.each(function(){var n=T.queue(this,e,t);T._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&T.dequeue(this,e)})},dequeue:function(e){return this.each(function(){T.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=T.Deferred(),i=this,a=this.length,l=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=J.get(i[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(l));return l(),o.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oe=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&T.contains(e.ownerDocument,e)&&"none"===T.css(e,"display")},le=function(e,t,n,r){var o,i,a={};for(i in t)a[i]=e.style[i],e.style[i]=t[i];for(i in o=n.apply(e,r||[]),t)e.style[i]=a[i];return o};function ue(e,t,n,r){var o,i,a=20,l=r?function(){return r.cur()}:function(){return T.css(e,t,"")},u=l(),s=n&&n[3]||(T.cssNumber[t]?"":"px"),c=(T.cssNumber[t]||"px"!==s&&+u)&&oe.exec(T.css(e,t));if(c&&c[3]!==s){for(u/=2,s=s||c[3],c=+u||1;a--;)T.style(e,t,c+s),(1-i)*(1-(i=l()/u||.5))<=0&&(a=0),c/=i;c*=2,T.style(e,t,c+s),n=n||[]}return n&&(c=+c||+u||0,o=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=s,r.start=c,r.end=o)),o}var se={};function ce(e){var t,n=e.ownerDocument,r=e.nodeName,o=se[r];return o||(t=n.body.appendChild(n.createElement(r)),o=T.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),se[r]=o,o)}function fe(e,t){for(var n,r,o=[],i=0,a=e.length;i<a;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=J.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&ae(r)&&(o[i]=ce(r))):"none"!==n&&(o[i]="none",J.set(r,"display",n)));for(i=0;i<a;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}T.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?T(this).show():T(this).hide()})}});var de=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,he=/^$|^module$|\/(?:java|ecma)script/i,me={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ye(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&D(e,t)?T.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}me.optgroup=me.option,me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td;var ge,be,xe=/<|&#?\w+;/;function we(e,t,n,r,o){for(var i,a,l,u,s,c,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((i=e[p])||0===i)if("object"===k(i))T.merge(d,i.nodeType?[i]:i);else if(xe.test(i)){for(a=a||f.appendChild(t.createElement("div")),l=(pe.exec(i)||["",""])[1].toLowerCase(),u=me[l]||me._default,a.innerHTML=u[1]+T.htmlPrefilter(i)+u[2],c=u[0];c--;)a=a.lastChild;T.merge(d,a.childNodes),(a=f.firstChild).textContent=""}else d.push(t.createTextNode(i));for(f.textContent="",p=0;i=d[p++];)if(r&&T.inArray(i,r)>-1)o&&o.push(i);else if(s=T.contains(i.ownerDocument,i),a=ye(f.appendChild(i),"script"),s&&ve(a),n)for(c=0;i=a[c++];)he.test(i.type||"")&&n.push(i);return f}ge=a.createDocumentFragment().appendChild(a.createElement("div")),(be=a.createElement("input")).setAttribute("type","radio"),be.setAttribute("checked","checked"),be.setAttribute("name","t"),ge.appendChild(be),v.checkClone=ge.cloneNode(!0).cloneNode(!0).lastChild.checked,ge.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!ge.cloneNode(!0).lastChild.defaultValue;var ke=a.documentElement,Te=/^key/,Ee=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function _e(){return!1}function Ne(){try{return a.activeElement}catch(e){}}function Pe(e,t,n,r,o,i){var a,l;if("object"==typeof t){for(l in"string"!=typeof n&&(r=r||n,n=void 0),t)Pe(e,l,n,r,t[l],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=_e;else if(!o)return e;return 1===i&&(a=o,(o=function(e){return T().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=T.guid++)),e.each(function(){T.event.add(this,t,o,r,n)})}T.event={global:{},add:function(e,t,n,r,o){var i,a,l,u,s,c,f,d,p,h,m,y=J.get(e);if(y)for(n.handler&&(n=(i=n).handler,o=i.selector),o&&T.find.matchesSelector(ke,o),n.guid||(n.guid=T.guid++),(u=y.events)||(u=y.events={}),(a=y.handle)||(a=y.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),s=(t=(t||"").match(F)||[""]).length;s--;)p=m=(l=Ce.exec(t[s])||[])[1],h=(l[2]||"").split(".").sort(),p&&(f=T.event.special[p]||{},p=(o?f.delegateType:f.bindType)||p,f=T.event.special[p]||{},c=T.extend({type:p,origType:m,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&T.expr.match.needsContext.test(o),namespace:h.join(".")},i),(d=u[p])||((d=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(p,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),o?d.splice(d.delegateCount++,0,c):d.push(c),T.event.global[p]=!0)},remove:function(e,t,n,r,o){var i,a,l,u,s,c,f,d,p,h,m,y=J.hasData(e)&&J.get(e);if(y&&(u=y.events)){for(s=(t=(t||"").match(F)||[""]).length;s--;)if(p=m=(l=Ce.exec(t[s])||[])[1],h=(l[2]||"").split(".").sort(),p){for(f=T.event.special[p]||{},d=u[p=(r?f.delegateType:f.bindType)||p]||[],l=l[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=d.length;i--;)c=d[i],!o&&m!==c.origType||n&&n.guid!==c.guid||l&&!l.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(i,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,y.handle)||T.removeEvent(e,p,y.handle),delete u[p])}else for(p in u)T.event.remove(e,p+t[s],n,r,!0);T.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,a,l=T.event.fix(e),u=new Array(arguments.length),s=(J.get(this,"events")||{})[l.type]||[],c=T.event.special[l.type]||{};for(u[0]=l,t=1;t<arguments.length;t++)u[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=T.event.handlers.call(this,l,s),t=0;(o=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!l.rnamespace.test(i.namespace)||(l.handleObj=i,l.data=i.data,void 0!==(r=((T.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,u))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,o,i,a,l=[],u=t.delegateCount,s=e.target;if(u&&s.nodeType&&!("click"===e.type&&e.button>=1))for(;s!==this;s=s.parentNode||this)if(1===s.nodeType&&("click"!==e.type||!0!==s.disabled)){for(i=[],a={},n=0;n<u;n++)void 0===a[o=(r=t[n]).selector+" "]&&(a[o]=r.needsContext?T(o,this).index(s)>-1:T.find(o,this,null,[s]).length),a[o]&&i.push(r);i.length&&l.push({elem:s,handlers:i})}return s=this,u<t.length&&l.push({elem:s,handlers:t.slice(u)}),l},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[T.expando]?e:new T.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Ne()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Ne()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&D(this,"input"))return this.click(),!1},_default:function(e){return D(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},T.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:_e,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:_e,isPropagationStopped:_e,isImmediatePropagationStopped:_e,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ee.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},T.event.addProp),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){T.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,o=e.handleObj;return r&&(r===this||T.contains(this,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),T.fn.extend({on:function(e,t,n,r){return Pe(this,e,t,n,r)},one:function(e,t,n,r){return Pe(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,T(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=_e),this.each(function(){T.event.remove(this,e,n,t)})}});var De=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Oe=/<script|<style|<link/i,je=/checked\s*(?:[^=]|=\s*.checked.)/i,Ae=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Me(e,t){return D(e,"table")&&D(11!==t.nodeType?t:t.firstChild,"tr")&&T(e).children("tbody")[0]||e}function Le(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ie(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Re(e,t){var n,r,o,i,a,l,u,s;if(1===t.nodeType){if(J.hasData(e)&&(i=J.access(e),a=J.set(t,i),s=i.events))for(o in delete a.handle,a.events={},s)for(n=0,r=s[o].length;n<r;n++)T.event.add(t,o,s[o][n]);Z.hasData(e)&&(l=Z.access(e),u=T.extend({},l),Z.set(t,u))}}function Fe(e,t,n,r){t=s.apply([],t);var o,i,a,l,u,c,f=0,d=e.length,p=d-1,h=t[0],m=g(h);if(m||d>1&&"string"==typeof h&&!v.checkClone&&je.test(h))return e.each(function(o){var i=e.eq(o);m&&(t[0]=h.call(this,o,i.html())),Fe(i,t,n,r)});if(d&&(i=(o=we(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(l=(a=T.map(ye(o,"script"),Le)).length;f<d;f++)u=o,f!==p&&(u=T.clone(u,!0,!0),l&&T.merge(a,ye(u,"script"))),n.call(e[f],u,f);if(l)for(c=a[a.length-1].ownerDocument,T.map(a,Ie),f=0;f<l;f++)u=a[f],he.test(u.type||"")&&!J.access(u,"globalEval")&&T.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?T._evalUrl&&T._evalUrl(u.src):w(u.textContent.replace(Ae,""),c,u))}return e}function Ue(e,t,n){for(var r,o=t?T.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||T.cleanData(ye(r)),r.parentNode&&(n&&T.contains(r.ownerDocument,r)&&ve(ye(r,"script")),r.parentNode.removeChild(r));return e}T.extend({htmlPrefilter:function(e){return e.replace(De,"<$1></$2>")},clone:function(e,t,n){var r,o,i,a,l,u,s,c=e.cloneNode(!0),f=T.contains(e.ownerDocument,e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(a=ye(c),r=0,o=(i=ye(e)).length;r<o;r++)l=i[r],u=a[r],s=void 0,"input"===(s=u.nodeName.toLowerCase())&&de.test(l.type)?u.checked=l.checked:"input"!==s&&"textarea"!==s||(u.defaultValue=l.defaultValue);if(t)if(n)for(i=i||ye(e),a=a||ye(c),r=0,o=i.length;r<o;r++)Re(i[r],a[r]);else Re(e,c);return(a=ye(c,"script")).length>0&&ve(a,!f&&ye(e,"script")),c},cleanData:function(e){for(var t,n,r,o=T.event.special,i=0;void 0!==(n=e[i]);i++)if(Y(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)o[r]?T.event.remove(n,r):T.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),T.fn.extend({detach:function(e){return Ue(this,e,!0)},remove:function(e){return Ue(this,e)},text:function(e){return $(this,function(e){return void 0===e?T.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Fe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Me(this,e).appendChild(e)})},prepend:function(){return Fe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Me(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Fe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Fe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(T.cleanData(ye(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return T.clone(this,e,t)})},html:function(e){return $(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Oe.test(e)&&!me[(pe.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(T.cleanData(ye(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Fe(this,arguments,function(t){var n=this.parentNode;T.inArray(this,e)<0&&(T.cleanData(ye(this)),n&&n.replaceChild(t,this))},e)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){T.fn[e]=function(e){for(var n,r=[],o=T(e),i=o.length-1,a=0;a<=i;a++)n=a===i?this:this.clone(!0),T(o[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}});var qe=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),ze=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},He=new RegExp(ie.join("|"),"i");function We(e,t,n){var r,o,i,a,l=e.style;return(n=n||ze(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||T.contains(e.ownerDocument,e)||(a=T.style(e,t)),!v.pixelBoxStyles()&&qe.test(a)&&He.test(t)&&(r=l.width,o=l.minWidth,i=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=n.width,l.width=r,l.minWidth=o,l.maxWidth=i)),void 0!==a?a+"":a}function Be(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){s.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ke.appendChild(s).appendChild(c);var e=n.getComputedStyle(c);r="1%"!==e.top,u=12===t(e.marginLeft),c.style.right="60%",l=36===t(e.right),o=36===t(e.width),c.style.position="absolute",i=36===c.offsetWidth||"absolute",ke.removeChild(s),c=null}}function t(e){return Math.round(parseFloat(e))}var r,o,i,l,u,s=a.createElement("div"),c=a.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===c.style.backgroundClip,T.extend(v,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),l},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),i}}))}();var $e=/^(none|table(?!-c[ea]).+)/,Ve=/^--/,Qe={position:"absolute",visibility:"hidden",display:"block"},Xe={letterSpacing:"0",fontWeight:"400"},Ke=["Webkit","Moz","ms"],Ye=a.createElement("div").style;function Ge(e){var t=T.cssProps[e];return t||(t=T.cssProps[e]=function(e){if(e in Ye)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Ke.length;n--;)if((e=Ke[n]+t)in Ye)return e}(e)||e),t}function Je(e,t,n){var r=oe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ze(e,t,n,r,o,i){var a="width"===t?1:0,l=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=T.css(e,n+ie[a],!0,o)),r?("content"===n&&(u-=T.css(e,"padding"+ie[a],!0,o)),"margin"!==n&&(u-=T.css(e,"border"+ie[a]+"Width",!0,o))):(u+=T.css(e,"padding"+ie[a],!0,o),"padding"!==n?u+=T.css(e,"border"+ie[a]+"Width",!0,o):l+=T.css(e,"border"+ie[a]+"Width",!0,o));return!r&&i>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-u-l-.5))),u}function et(e,t,n){var r=ze(e),o=We(e,t,r),i="border-box"===T.css(e,"boxSizing",!1,r),a=i;if(qe.test(o)){if(!n)return o;o="auto"}return a=a&&(v.boxSizingReliable()||o===e.style[t]),("auto"===o||!parseFloat(o)&&"inline"===T.css(e,"display",!1,r))&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)],a=!0),(o=parseFloat(o)||0)+Ze(e,t,n||(i?"border":"content"),a,r,o)+"px"}function tt(e,t,n,r,o){return new tt.prototype.init(e,t,n,r,o)}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=We(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,a,l=K(t),u=Ve.test(t),s=e.style;if(u||(t=Ge(l)),a=T.cssHooks[t]||T.cssHooks[l],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:s[t];"string"===(i=typeof n)&&(o=oe.exec(n))&&o[1]&&(n=ue(e,t,o),i="number"),null!=n&&n==n&&("number"===i&&(n+=o&&o[3]||(T.cssNumber[l]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(s[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?s.setProperty(t,n):s[t]=n))}},css:function(e,t,n,r){var o,i,a,l=K(t);return Ve.test(t)||(t=Ge(l)),(a=T.cssHooks[t]||T.cssHooks[l])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=We(e,t,r)),"normal"===o&&t in Xe&&(o=Xe[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),T.each(["height","width"],function(e,t){T.cssHooks[t]={get:function(e,n,r){if(n)return!$e.test(T.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,r):le(e,Qe,function(){return et(e,t,r)})},set:function(e,n,r){var o,i=ze(e),a="border-box"===T.css(e,"boxSizing",!1,i),l=r&&Ze(e,t,r,a,i);return a&&v.scrollboxSize()===i.position&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-Ze(e,t,"border",!1,i)-.5)),l&&(o=oe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=T.css(e,t)),Je(0,n,l)}}}),T.cssHooks.marginLeft=Be(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(We(e,"marginLeft"))||e.getBoundingClientRect().left-le(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),T.each({margin:"",padding:"",border:"Width"},function(e,t){T.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+ie[r]+t]=i[r]||i[r-2]||i[0];return o}},"margin"!==e&&(T.cssHooks[e+t].set=Je)}),T.fn.extend({css:function(e,t){return $(this,function(e,t,n){var r,o,i={},a=0;if(Array.isArray(t)){for(r=ze(e),o=t.length;a<o;a++)i[t[a]]=T.css(e,t[a],!1,r);return i}return void 0!==n?T.style(e,t,n):T.css(e,t)},e,t,arguments.length>1)}}),T.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||T.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(T.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=T.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=T.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){T.fx.step[e.prop]?T.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[T.cssProps[e.prop]]&&!T.cssHooks[e.prop]?e.elem[e.prop]=e.now:T.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},T.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},T.fx=tt.prototype.init,T.fx.step={};var nt,rt,ot=/^(?:toggle|show|hide)$/,it=/queueHooks$/;function at(){rt&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(at):n.setTimeout(at,T.fx.interval),T.fx.tick())}function lt(){return n.setTimeout(function(){nt=void 0}),nt=Date.now()}function ut(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=ie[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function st(e,t,n){for(var r,o=(ct.tweeners[t]||[]).concat(ct.tweeners["*"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(n,t,e))return r}function ct(e,t,n){var r,o,i=0,a=ct.prefilters.length,l=T.Deferred().always(function(){delete u.elem}),u=function(){if(o)return!1;for(var t=nt||lt(),n=Math.max(0,s.startTime+s.duration-t),r=1-(n/s.duration||0),i=0,a=s.tweens.length;i<a;i++)s.tweens[i].run(r);return l.notifyWith(e,[s,r,n]),r<1&&a?n:(a||l.notifyWith(e,[s,1,0]),l.resolveWith(e,[s]),!1)},s=l.promise({elem:e,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||lt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=T.Tween(e,s.opts,t,n,s.opts.specialEasing[t]||s.opts.easing);return s.tweens.push(r),r},stop:function(t){var n=0,r=t?s.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)s.tweens[n].run(1);return t?(l.notifyWith(e,[s,1,0]),l.resolveWith(e,[s,t])):l.rejectWith(e,[s,t]),this}}),c=s.props;for(!function(e,t){var n,r,o,i,a;for(n in e)if(o=t[r=K(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(a=T.cssHooks[r])&&"expand"in a)for(n in i=a.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(c,s.opts.specialEasing);i<a;i++)if(r=ct.prefilters[i].call(s,e,c,s.opts))return g(r.stop)&&(T._queueHooks(s.elem,s.opts.queue).stop=r.stop.bind(r)),r;return T.map(c,st,s),g(s.opts.start)&&s.opts.start.call(e,s),s.progress(s.opts.progress).done(s.opts.done,s.opts.complete).fail(s.opts.fail).always(s.opts.always),T.fx.timer(T.extend(u,{elem:e,anim:s,queue:s.opts.queue})),s}T.Animation=T.extend(ct,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,oe.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(F);for(var n,r=0,o=e.length;r<o;r++)n=e[r],ct.tweeners[n]=ct.tweeners[n]||[],ct.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,a,l,u,s,c,f="width"in t||"height"in t,d=this,p={},h=e.style,m=e.nodeType&&ae(e),y=J.get(e,"fxshow");for(r in n.queue||(null==(a=T._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,T.queue(e,"fx").length||a.empty.fire()})})),t)if(o=t[r],ot.test(o)){if(delete t[r],i=i||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!y||void 0===y[r])continue;m=!0}p[r]=y&&y[r]||T.style(e,r)}if((u=!T.isEmptyObject(t))||!T.isEmptyObject(p))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(s=y&&y.display)&&(s=J.get(e,"display")),"none"===(c=T.css(e,"display"))&&(s?c=s:(fe([e],!0),s=e.style.display||s,c=T.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=s)&&"none"===T.css(e,"float")&&(u||(d.done(function(){h.display=s}),null==s&&(c=h.display,s="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,p)u||(y?"hidden"in y&&(m=y.hidden):y=J.access(e,"fxshow",{display:s}),i&&(y.hidden=!m),m&&fe([e],!0),d.done(function(){for(r in m||fe([e]),J.remove(e,"fxshow"),p)T.style(e,r,p[r])})),u=st(m?y[r]:0,r,d),r in y||(y[r]=u.start,m&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?ct.prefilters.unshift(e):ct.prefilters.push(e)}}),T.speed=function(e,t,n){var r=e&&"object"==typeof e?T.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return T.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in T.fx.speeds?r.duration=T.fx.speeds[r.duration]:r.duration=T.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){g(r.old)&&r.old.call(this),r.queue&&T.dequeue(this,r.queue)},r},T.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=T.isEmptyObject(e),i=T.speed(t,n,r),a=function(){var t=ct(this,T.extend({},e),i);(o||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",i=T.timers,a=J.get(this);if(o)a[o]&&a[o].stop&&r(a[o]);else for(o in a)a[o]&&a[o].stop&&it.test(o)&&r(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||T.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=J.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=T.timers,a=r?r.length:0;for(n.finish=!0,T.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),T.each(["toggle","show","hide"],function(e,t){var n=T.fn[t];T.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,o)}}),T.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){T.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),T.timers=[],T.fx.tick=function(){var e,t=0,n=T.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||T.fx.stop(),nt=void 0},T.fx.timer=function(e){T.timers.push(e),T.fx.start()},T.fx.interval=13,T.fx.start=function(){rt||(rt=!0,at())},T.fx.stop=function(){rt=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(e,t){return e=T.fx&&T.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var o=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(o)}})},function(){var e=a.createElement("input"),t=a.createElement("select").appendChild(a.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=a.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var ft,dt=T.expr.attrHandle;T.fn.extend({attr:function(e,t){return $(this,T.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){T.removeAttr(this,e)})}}),T.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?T.prop(e,t,n):(1===i&&T.isXMLDoc(e)||(o=T.attrHooks[t.toLowerCase()]||(T.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void T.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=T.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&D(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(F);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),ft={set:function(e,t,n){return!1===t?T.removeAttr(e,n):e.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),function(e,t){var n=dt[t]||T.find.attr;dt[t]=function(e,t,r){var o,i,a=t.toLowerCase();return r||(i=dt[a],dt[a]=o,o=null!=n(e,t,r)?a:null,dt[a]=i),o}});var pt=/^(?:input|select|textarea|button)$/i,ht=/^(?:a|area)$/i;function mt(e){return(e.match(F)||[]).join(" ")}function yt(e){return e.getAttribute&&e.getAttribute("class")||""}function vt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(F)||[]}T.fn.extend({prop:function(e,t){return $(this,T.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[T.propFix[e]||e]})}}),T.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&T.isXMLDoc(e)||(t=T.propFix[t]||t,o=T.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):pt.test(e.nodeName)||ht.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(T.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){T.propFix[this.toLowerCase()]=this}),T.fn.extend({addClass:function(e){var t,n,r,o,i,a,l,u=0;if(g(e))return this.each(function(t){T(this).addClass(e.call(this,t,yt(this)))});if((t=vt(e)).length)for(;n=this[u++];)if(o=yt(n),r=1===n.nodeType&&" "+mt(o)+" "){for(a=0;i=t[a++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(l=mt(r))&&n.setAttribute("class",l)}return this},removeClass:function(e){var t,n,r,o,i,a,l,u=0;if(g(e))return this.each(function(t){T(this).removeClass(e.call(this,t,yt(this)))});if(!arguments.length)return this.attr("class","");if((t=vt(e)).length)for(;n=this[u++];)if(o=yt(n),r=1===n.nodeType&&" "+mt(o)+" "){for(a=0;i=t[a++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(l=mt(r))&&n.setAttribute("class",l)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):g(e)?this.each(function(n){T(this).toggleClass(e.call(this,n,yt(this),t),t)}):this.each(function(){var t,o,i,a;if(r)for(o=0,i=T(this),a=vt(e);t=a[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=yt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+mt(yt(n))+" ").indexOf(t)>-1)return!0;return!1}});var gt=/\r/g;T.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=g(e),this.each(function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,T(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=T.map(o,function(e){return null==e?"":e+""})),(t=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))})):o?(t=T.valHooks[o.type]||T.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(gt,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:mt(T.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,a="select-one"===e.type,l=a?null:[],u=a?i+1:o.length;for(r=i<0?u:a?i:0;r<u;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!D(n.parentNode,"optgroup"))){if(t=T(n).val(),a)return t;l.push(t)}return l},set:function(e,t){for(var n,r,o=e.options,i=T.makeArray(t),a=o.length;a--;)((r=o[a]).selected=T.inArray(T.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),T.each(["radio","checkbox"],function(){T.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=T.inArray(T(e).val(),t)>-1}},v.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in n;var bt=/^(?:focusinfocus|focusoutblur)$/,xt=function(e){e.stopPropagation()};T.extend(T.event,{trigger:function(e,t,r,o){var i,l,u,s,c,f,d,p,m=[r||a],y=h.call(e,"type")?e.type:e,v=h.call(e,"namespace")?e.namespace.split("."):[];if(l=p=u=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!bt.test(y+T.event.triggered)&&(y.indexOf(".")>-1&&(v=y.split("."),y=v.shift(),v.sort()),c=y.indexOf(":")<0&&"on"+y,(e=e[T.expando]?e:new T.Event(y,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:T.makeArray(t,[e]),d=T.event.special[y]||{},o||!d.trigger||!1!==d.trigger.apply(r,t))){if(!o&&!d.noBubble&&!b(r)){for(s=d.delegateType||y,bt.test(s+y)||(l=l.parentNode);l;l=l.parentNode)m.push(l),u=l;u===(r.ownerDocument||a)&&m.push(u.defaultView||u.parentWindow||n)}for(i=0;(l=m[i++])&&!e.isPropagationStopped();)p=l,e.type=i>1?s:d.bindType||y,(f=(J.get(l,"events")||{})[e.type]&&J.get(l,"handle"))&&f.apply(l,t),(f=c&&l[c])&&f.apply&&Y(l)&&(e.result=f.apply(l,t),!1===e.result&&e.preventDefault());return e.type=y,o||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(m.pop(),t)||!Y(r)||c&&g(r[y])&&!b(r)&&((u=r[c])&&(r[c]=null),T.event.triggered=y,e.isPropagationStopped()&&p.addEventListener(y,xt),r[y](),e.isPropagationStopped()&&p.removeEventListener(y,xt),T.event.triggered=void 0,u&&(r[c]=u)),e.result}},simulate:function(e,t,n){var r=T.extend(new T.Event,n,{type:e,isSimulated:!0});T.event.trigger(r,null,t)}}),T.fn.extend({trigger:function(e,t){return this.each(function(){T.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return T.event.trigger(e,t,n,!0)}}),v.focusin||T.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){T.event.simulate(t,e.target,T.event.fix(e))};T.event.special[t]={setup:function(){var r=this.ownerDocument||this,o=J.access(r,t);o||r.addEventListener(e,n,!0),J.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this,o=J.access(r,t)-1;o?J.access(r,t,o):(r.removeEventListener(e,n,!0),J.remove(r,t))}}});var wt=n.location,kt=Date.now(),Tt=/\?/;T.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+e),t};var Et=/\[\]$/,Ct=/\r?\n/g,St=/^(?:submit|button|image|reset|file)$/i,_t=/^(?:input|select|textarea|keygen)/i;function Nt(e,t,n,r){var o;if(Array.isArray(t))T.each(t,function(t,o){n||Et.test(e)?r(e,o):Nt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)});else if(n||"object"!==k(t))r(e,t);else for(o in t)Nt(e+"["+o+"]",t[o],n,r)}T.param=function(e,t){var n,r=[],o=function(e,t){var n=g(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,function(){o(this.name,this.value)});else for(n in e)Nt(n,e[n],t,o);return r.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&_t.test(this.nodeName)&&!St.test(e)&&(this.checked||!de.test(e))}).map(function(e,t){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,function(e){return{name:t.name,value:e.replace(Ct,"\r\n")}}):{name:t.name,value:n.replace(Ct,"\r\n")}}).get()}});var Pt=/%20/g,Dt=/#.*$/,Ot=/([?&])_=[^&]*/,jt=/^(.*?):[ \t]*([^\r\n]*)$/gm,At=/^(?:GET|HEAD)$/,Mt=/^\/\//,Lt={},It={},Rt="*/".concat("*"),Ft=a.createElement("a");function Ut(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(F)||[];if(g(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qt(e,t,n,r){var o={},i=e===It;function a(l){var u;return o[l]=!0,T.each(e[l]||[],function(e,l){var s=l(t,n,r);return"string"!=typeof s||i||o[s]?i?!(u=s):void 0:(t.dataTypes.unshift(s),a(s),!1)}),u}return a(t.dataTypes[0])||!o["*"]&&a("*")}function zt(e,t){var n,r,o=T.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&T.extend(!0,e,r),e}Ft.href=wt.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,T.ajaxSettings),t):zt(T.ajaxSettings,e)},ajaxPrefilter:Ut(Lt),ajaxTransport:Ut(It),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,o,i,l,u,s,c,f,d,p,h=T.ajaxSetup({},t),m=h.context||h,y=h.context&&(m.nodeType||m.jquery)?T(m):T.event,v=T.Deferred(),g=T.Callbacks("once memory"),b=h.statusCode||{},x={},w={},k="canceled",E={readyState:0,getResponseHeader:function(e){var t;if(c){if(!l)for(l={};t=jt.exec(i);)l[t[1].toLowerCase()]=t[2];t=l[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?i:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)E.always(e[E.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||k;return r&&r.abort(t),C(0,t),this}};if(v.promise(E),h.url=((e||h.url||wt.href)+"").replace(Mt,wt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(F)||[""],null==h.crossDomain){s=a.createElement("a");try{s.href=h.url,s.href=s.href,h.crossDomain=Ft.protocol+"//"+Ft.host!=s.protocol+"//"+s.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=T.param(h.data,h.traditional)),qt(Lt,h,t,E),c)return E;for(d in(f=T.event&&h.global)&&0==T.active++&&T.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!At.test(h.type),o=h.url.replace(Dt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Pt,"+")):(p=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(Tt.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Ot,"$1"),p=(Tt.test(o)?"&":"?")+"_="+kt+++p),h.url=o+p),h.ifModified&&(T.lastModified[o]&&E.setRequestHeader("If-Modified-Since",T.lastModified[o]),T.etag[o]&&E.setRequestHeader("If-None-Match",T.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&E.setRequestHeader("Content-Type",h.contentType),E.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Rt+"; q=0.01":""):h.accepts["*"]),h.headers)E.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(m,E,h)||c))return E.abort();if(k="abort",g.add(h.complete),E.done(h.success),E.fail(h.error),r=qt(It,h,t,E)){if(E.readyState=1,f&&y.trigger("ajaxSend",[E,h]),c)return E;h.async&&h.timeout>0&&(u=n.setTimeout(function(){E.abort("timeout")},h.timeout));try{c=!1,r.send(x,C)}catch(e){if(c)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,a,l){var s,d,p,x,w,k=t;c||(c=!0,u&&n.clearTimeout(u),r=void 0,i=l||"",E.readyState=e>0?4:0,s=e>=200&&e<300||304===e,a&&(x=function(e,t,n){for(var r,o,i,a,l=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in l)if(l[o]&&l[o].test(r)){u.unshift(o);break}if(u[0]in n)i=u[0];else{for(o in n){if(!u[0]||e.converters[o+" "+u[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==u[0]&&u.unshift(i),n[i]}(h,E,a)),x=function(e,t,n,r){var o,i,a,l,u,s={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)s[a.toLowerCase()]=e.converters[a];for(i=c.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=i,i=c.shift())if("*"===i)i=u;else if("*"!==u&&u!==i){if(!(a=s[u+" "+i]||s["* "+i]))for(o in s)if((l=o.split(" "))[1]===i&&(a=s[u+" "+l[0]]||s["* "+l[0]])){!0===a?a=s[o]:!0!==s[o]&&(i=l[0],c.unshift(l[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+i}}}return{state:"success",data:t}}(h,x,E,s),s?(h.ifModified&&((w=E.getResponseHeader("Last-Modified"))&&(T.lastModified[o]=w),(w=E.getResponseHeader("etag"))&&(T.etag[o]=w)),204===e||"HEAD"===h.type?k="nocontent":304===e?k="notmodified":(k=x.state,d=x.data,s=!(p=x.error))):(p=k,!e&&k||(k="error",e<0&&(e=0))),E.status=e,E.statusText=(t||k)+"",s?v.resolveWith(m,[d,k,E]):v.rejectWith(m,[E,k,p]),E.statusCode(b),b=void 0,f&&y.trigger(s?"ajaxSuccess":"ajaxError",[E,h,s?d:p]),g.fireWith(m,[E,k]),f&&(y.trigger("ajaxComplete",[E,h]),--T.active||T.event.trigger("ajaxStop")))}return E},getJSON:function(e,t,n){return T.get(e,t,n,"json")},getScript:function(e,t){return T.get(e,void 0,t,"script")}}),T.each(["get","post"],function(e,t){T[t]=function(e,n,r,o){return g(n)&&(o=o||r,r=n,n=void 0),T.ajax(T.extend({url:e,type:t,dataType:o,data:n,success:r},T.isPlainObject(e)&&e))}}),T._evalUrl=function(e){return T.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},T.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=T(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return g(e)?this.each(function(t){T(this).wrapInner(e.call(this,t))}):this.each(function(){var t=T(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=g(e);return this.each(function(n){T(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){T(this).replaceWith(this.childNodes)}),this}}),T.expr.pseudos.hidden=function(e){return!T.expr.pseudos.visible(e)},T.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ht={0:200,1223:204},Wt=T.ajaxSettings.xhr();v.cors=!!Wt&&"withCredentials"in Wt,v.ajax=Wt=!!Wt,T.ajaxTransport(function(e){var t,r;if(v.cors||Wt&&!e.crossDomain)return{send:function(o,i){var a,l=e.xhr();if(l.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)l[a]=e.xhrFields[a];for(a in e.mimeType&&l.overrideMimeType&&l.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)l.setRequestHeader(a,o[a]);t=function(e){return function(){t&&(t=r=l.onload=l.onerror=l.onabort=l.ontimeout=l.onreadystatechange=null,"abort"===e?l.abort():"error"===e?"number"!=typeof l.status?i(0,"error"):i(l.status,l.statusText):i(Ht[l.status]||l.status,l.statusText,"text"!==(l.responseType||"text")||"string"!=typeof l.responseText?{binary:l.response}:{text:l.responseText},l.getAllResponseHeaders()))}},l.onload=t(),r=l.onerror=l.ontimeout=t("error"),void 0!==l.onabort?l.onabort=r:l.onreadystatechange=function(){4===l.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{l.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),T.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return T.globalEval(e),e}}}),T.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),T.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,o){t=T("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),a.head.appendChild(t[0])},abort:function(){n&&n()}}});var Bt,$t=[],Vt=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=$t.pop()||T.expando+"_"+kt++;return this[e]=!0,e}}),T.ajaxPrefilter("json jsonp",function(e,t,r){var o,i,a,l=!1!==e.jsonp&&(Vt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vt.test(e.data)&&"data");if(l||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,l?e[l]=e[l].replace(Vt,"$1"+o):!1!==e.jsonp&&(e.url+=(Tt.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||T.error(o+" was not called"),a[0]},e.dataTypes[0]="json",i=n[o],n[o]=function(){a=arguments},r.always(function(){void 0===i?T(n).removeProp(o):n[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,$t.push(o)),a&&g(i)&&i(a[0]),a=i=void 0}),"script"}),v.createHTMLDocument=((Bt=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Bt.childNodes.length),T.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,t.head.appendChild(r)):t=a),i=!n&&[],(o=O.exec(e))?[t.createElement(o[1])]:(o=we([e],t,i),i&&i.length&&T(i).remove(),T.merge([],o.childNodes)));var r,o,i},T.fn.load=function(e,t,n){var r,o,i,a=this,l=e.indexOf(" ");return l>-1&&(r=mt(e.slice(l)),e=e.slice(0,l)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&T.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){i=arguments,a.html(r?T("<div>").append(T.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){T.fn[t]=function(e){return this.on(t,e)}}),T.expr.pseudos.animated=function(e){return T.grep(T.timers,function(t){return e===t.elem}).length},T.offset={setOffset:function(e,t,n){var r,o,i,a,l,u,s=T.css(e,"position"),c=T(e),f={};"static"===s&&(e.style.position="relative"),l=c.offset(),i=T.css(e,"top"),u=T.css(e,"left"),("absolute"===s||"fixed"===s)&&(i+u).indexOf("auto")>-1?(a=(r=c.position()).top,o=r.left):(a=parseFloat(i)||0,o=parseFloat(u)||0),g(t)&&(t=t.call(e,n,T.extend({},l))),null!=t.top&&(f.top=t.top-l.top+a),null!=t.left&&(f.left=t.left-l.left+o),"using"in t?t.using.call(e,f):c.css(f)}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){T.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===T.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===T.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=T(e).offset()).top+=T.css(e,"borderTopWidth",!0),o.left+=T.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-T.css(r,"marginTop",!0),left:t.left-o.left-T.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===T.css(e,"position");)e=e.offsetParent;return e||ke})}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;T.fn[e]=function(r){return $(this,function(e,r,o){var i;if(b(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o},e,r,arguments.length)}}),T.each(["top","left"],function(e,t){T.cssHooks[t]=Be(v.pixelPosition,function(e,n){if(n)return n=We(e,t),qe.test(n)?T(e).position()[t]+"px":n})}),T.each({Height:"height",Width:"width"},function(e,t){T.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){T.fn[r]=function(o,i){var a=arguments.length&&(n||"boolean"!=typeof o),l=n||(!0===o||!0===i?"margin":"border");return $(this,function(t,n,o){var i;return b(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?T.css(t,n,l):T.style(t,n,o,l)},t,a?o:void 0,a)}})}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){T.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),T.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),T.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),T.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=u.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(u.call(arguments)))}).guid=e.guid=e.guid||T.guid++,o},T.holdReady=function(e){e?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=D,T.isFunction=g,T.isWindow=b,T.camelCase=K,T.type=k,T.now=Date.now,T.isNumeric=function(e){var t=T.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return T}.apply(t,[]))||(e.exports=r);var Qt=n.jQuery,Xt=n.$;return T.noConflict=function(e){return n.$===T&&(n.$=Xt),e&&n.jQuery===T&&(n.jQuery=Qt),T},o||(n.jQuery=n.$=T),T})},function(e,t,n){"use strict";
/** @license React v16.7.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.concurrent_mode"):60111,p=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,y=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,i,a,l],s=0;(e=Error(t.replace(/%s/g,function(){return u[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},x={};function w(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||b}function k(){}function T(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},k.prototype=w.prototype;var E=T.prototype=new k;E.constructor=T,r(E,w.prototype),E.isPureReactComponent=!0;var C={current:null,currentDispatcher:null},S=Object.prototype.hasOwnProperty,_={key:!0,ref:!0,__self:!0,__source:!0};function N(e,t,n){var r=void 0,o={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!_.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:i,type:e,key:a,ref:l,props:o,_owner:C.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var D=/\/+/g,O=[];function j(e,t,n,r){if(O.length){var o=O.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function A(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>O.length&&O.push(e)}function M(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case i:case a:u=!0}}if(u)return r(o,t,""===n?"."+L(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+L(l=t[s],s);u+=e(l,c,r,o)}else if(c=null===t||"object"!=typeof t?null:"function"==typeof(c=v&&t[v]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(l=t.next()).done;)u+=e(l=l.value,c=n+L(l,s++),r,o);else"object"===l&&g("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return u}(e,"",t,n)}function L(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function I(e,t){e.func.call(e.context,t,e.count++)}function R(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,function(e){return e}):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(D,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(D,"$&/")+"/"),M(e,R,t=j(t,i,r,o)),A(t)}var U={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;M(e,I,t=j(null,null,t,n)),A(t)},count:function(e){return M(e,function(){return null},null)},toArray:function(e){var t=[];return F(e,t,null,function(e){return e}),t},only:function(e){return P(e)||g("143"),e}},createRef:function(){return{current:null}},Component:w,PureComponent:T,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},Fragment:l,StrictMode:u,Suspense:h,createElement:N,cloneElement:function(e,t,n){null==e&&g("267",e);var o=void 0,a=r({},e.props),l=e.key,u=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,s=C.current),void 0!==t.key&&(l=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)S.call(t,o)&&!_.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:i,type:e.type,key:l,ref:u,props:a,_owner:s}},createFactory:function(e){var t=N.bind(null,e);return t.type=e,t},isValidElement:P,version:"16.7.0",unstable_ConcurrentMode:d,unstable_Profiler:s,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:C,assign:r}},q={default:U},z=q&&U||q;e.exports=z.default||z},function(e,t,n){"use strict";
/** @license React v16.7.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(1),i=n(6);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,i,a,l],s=0;(e=Error(t.replace(/%s/g,function(){return u[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var l=!1,u=null,s=!1,c=null,f={onError:function(e){l=!0,u=e}};function d(e,t,n,r,o,i,a,s,c){l=!1,u=null,function(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}.apply(f,arguments)}var p=null,h={};function m(){if(p)for(var e in h){var t=h[e],n=p.indexOf(e);if(-1<n||a("96",e),!v[n])for(var r in t.extractEvents||a("97",e),v[n]=t,n=t.eventTypes){var o=void 0,i=n[r],l=t,u=r;g.hasOwnProperty(u)&&a("99",u),g[u]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&y(s[o],l,u);o=!0}else i.registrationName?(y(i.registrationName,l,u),o=!0):o=!1;o||a("98",r,e)}}}function y(e,t,n){b[e]&&a("100",e),b[e]=t,x[e]=t.eventTypes[n].dependencies}var v=[],g={},b={},x={},w=null,k=null,T=null;function E(e,t,n){var r=e.type||"unknown-event";e.currentTarget=T(n),function(e,t,n,r,o,i,f,p,h){if(d.apply(this,arguments),l){if(l){var m=u;l=!1,u=null}else a("198"),m=void 0;s||(s=!0,c=m)}}(r,t,void 0,e),e.currentTarget=null}function C(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function S(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var _=null;function N(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)E(e,t[r],n[r]);else t&&E(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var P={injectEventPluginOrder:function(e){p&&a("101"),p=Array.prototype.slice.call(e),m()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&m()}};function D(e,t){var n=e.stateNode;if(!n)return null;var r=w(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function O(e){if(null!==e&&(_=C(_,e)),e=_,_=null,e&&(S(e,N),_&&a("95"),s))throw e=c,s=!1,c=null,e}var j=Math.random().toString(36).slice(2),A="__reactInternalInstance$"+j,M="__reactEventHandlers$"+j;function L(e){if(e[A])return e[A];for(;!e[A];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[A]).tag||6===e.tag?e:null}function I(e){return!(e=e[A])||5!==e.tag&&6!==e.tag?null:e}function R(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function F(e){return e[M]||null}function U(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function q(e,t,n){(t=D(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function z(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=U(t);for(t=n.length;0<t--;)q(n[t],"captured",e);for(t=0;t<n.length;t++)q(n[t],"bubbled",e)}}function H(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=D(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function W(e){e&&e.dispatchConfig.registrationName&&H(e._targetInst,null,e)}function B(e){S(e,z)}var $=!("undefined"==typeof window||!window.document||!window.document.createElement);function V(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Q={animationend:V("Animation","AnimationEnd"),animationiteration:V("Animation","AnimationIteration"),animationstart:V("Animation","AnimationStart"),transitionend:V("Transition","TransitionEnd")},X={},K={};function Y(e){if(X[e])return X[e];if(!Q[e])return e;var t,n=Q[e];for(t in n)if(n.hasOwnProperty(t)&&t in K)return X[e]=n[t];return e}$&&(K=document.createElement("div").style,"AnimationEvent"in window||(delete Q.animationend.animation,delete Q.animationiteration.animation,delete Q.animationstart.animation),"TransitionEvent"in window||delete Q.transitionend.transition);var G=Y("animationend"),J=Y("animationiteration"),Z=Y("animationstart"),ee=Y("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ie(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ae(){return!0}function le(){return!1}function ue(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:le,this.isPropagationStopped=le,this}function se(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function ce(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=se,e.release=ce}o(ue.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:le,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=le,this._dispatchInstances=this._dispatchListeners=null}}),ue.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},ue.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(ue);var de=ue.extend({data:null}),pe=ue.extend({data:null}),he=[9,13,27,32],me=$&&"CompositionEvent"in window,ye=null;$&&"documentMode"in document&&(ye=document.documentMode);var ve=$&&"TextEvent"in window&&!ye,ge=$&&(!me||ye&&8<ye&&11>=ye),be=String.fromCharCode(32),xe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},we=!1;function ke(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Te(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ee=!1;var Ce={eventTypes:xe,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(me)e:{switch(e){case"compositionstart":o=xe.compositionStart;break e;case"compositionend":o=xe.compositionEnd;break e;case"compositionupdate":o=xe.compositionUpdate;break e}o=void 0}else Ee?ke(e,n)&&(o=xe.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=xe.compositionStart);return o?(ge&&"ko"!==n.locale&&(Ee||o!==xe.compositionStart?o===xe.compositionEnd&&Ee&&(i=ie()):(re="value"in(ne=r)?ne.value:ne.textContent,Ee=!0)),o=de.getPooled(o,t,n,r),i?o.data=i:null!==(i=Te(n))&&(o.data=i),B(o),i=o):i=null,(e=ve?function(e,t){switch(e){case"compositionend":return Te(t);case"keypress":return 32!==t.which?null:(we=!0,be);case"textInput":return(e=t.data)===be&&we?null:e;default:return null}}(e,n):function(e,t){if(Ee)return"compositionend"===e||!me&&ke(e,t)?(e=ie(),oe=re=ne=null,Ee=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ge&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=pe.getPooled(xe.beforeInput,t,n,r)).data=e,B(t)):t=null,null===i?t:null===t?i:[i,t]}},Se=null,_e=null,Ne=null;function Pe(e){if(e=k(e)){"function"!=typeof Se&&a("280");var t=w(e.stateNode);Se(e.stateNode,e.type,t)}}function De(e){_e?Ne?Ne.push(e):Ne=[e]:_e=e}function Oe(){if(_e){var e=_e,t=Ne;if(Ne=_e=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function je(e,t){return e(t)}function Ae(e,t,n){return e(t,n)}function Me(){}var Le=!1;function Ie(e,t){if(Le)return e(t);Le=!0;try{return je(e,t)}finally{Le=!1,(null!==_e||null!==Ne)&&(Me(),Oe())}}var Re={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Fe(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Re[e.type]:"textarea"===t}function Ue(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function qe(e){if(!$)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function ze(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function He(e){e._valueTracker||(e._valueTracker=function(e){var t=ze(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function We(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ze(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Be=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,$e=/^(.*)[\\\/]/,Ve="function"==typeof Symbol&&Symbol.for,Qe=Ve?Symbol.for("react.element"):60103,Xe=Ve?Symbol.for("react.portal"):60106,Ke=Ve?Symbol.for("react.fragment"):60107,Ye=Ve?Symbol.for("react.strict_mode"):60108,Ge=Ve?Symbol.for("react.profiler"):60114,Je=Ve?Symbol.for("react.provider"):60109,Ze=Ve?Symbol.for("react.context"):60110,et=Ve?Symbol.for("react.concurrent_mode"):60111,tt=Ve?Symbol.for("react.forward_ref"):60112,nt=Ve?Symbol.for("react.suspense"):60113,rt=Ve?Symbol.for("react.memo"):60115,ot=Ve?Symbol.for("react.lazy"):60116,it="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function lt(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Ke:return"Fragment";case Xe:return"Portal";case Ge:return"Profiler";case Ye:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return lt(e.type);case ot:if(e=1===e._status?e._result:null)return lt(e)}return null}function ut(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=lt(e.type);n=null,r&&(n=lt(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace($e,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var st=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ct=Object.prototype.hasOwnProperty,ft={},dt={};function pt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new pt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new pt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new pt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new pt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new pt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new pt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new pt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new pt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new pt(e,5,!1,e.toLowerCase(),null)});var mt=/[\-:]([a-z])/g;function yt(e){return e[1].toUpperCase()}function vt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!ct.call(dt,e)||!ct.call(ft,e)&&(st.test(e)?dt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function gt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=gt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function wt(e,t){null!=(t=t.checked)&&vt(e,"checked",t,!1)}function kt(e,t){wt(e,t);var n=gt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Et(e,t.type,n):t.hasOwnProperty("defaultValue")&&Et(e,t.type,gt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Tt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Et(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,yt);ht[t]=new pt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,yt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,yt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),ht.tabIndex=new pt("tabIndex",1,!1,"tabindex",null);var Ct={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function St(e,t,n){return(e=ue.getPooled(Ct.change,e,t,n)).type="change",De(n),B(e),e}var _t=null,Nt=null;function Pt(e){O(e)}function Dt(e){if(We(R(e)))return e}function Ot(e,t){if("change"===e)return t}var jt=!1;function At(){_t&&(_t.detachEvent("onpropertychange",Mt),Nt=_t=null)}function Mt(e){"value"===e.propertyName&&Dt(Nt)&&Ie(Pt,e=St(Nt,e,Ue(e)))}function Lt(e,t,n){"focus"===e?(At(),Nt=n,(_t=t).attachEvent("onpropertychange",Mt)):"blur"===e&&At()}function It(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Dt(Nt)}function Rt(e,t){if("click"===e)return Dt(t)}function Ft(e,t){if("input"===e||"change"===e)return Dt(t)}$&&(jt=qe("input")&&(!document.documentMode||9<document.documentMode));var Ut={eventTypes:Ct,_isInputEventSupported:jt,extractEvents:function(e,t,n,r){var o=t?R(t):window,i=void 0,a=void 0,l=o.nodeName&&o.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===o.type?i=Ot:Fe(o)?jt?i=Ft:(i=It,a=Lt):(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Rt),i&&(i=i(e,t)))return St(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Et(o,"number",o.value)}},qt=ue.extend({view:null,detail:null}),zt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ht(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=zt[e])&&!!t[e]}function Wt(){return Ht}var Bt=0,$t=0,Vt=!1,Qt=!1,Xt=qt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Wt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Bt;return Bt=e.screenX,Vt?"mousemove"===e.type?e.screenX-t:0:(Vt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=$t;return $t=e.screenY,Qt?"mousemove"===e.type?e.screenY-t:0:(Qt=!0,0)}}),Kt=Xt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Yt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Gt={eventTypes:Yt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?L(t):null):i=null,i===t)return null;var a=void 0,l=void 0,u=void 0,s=void 0;"mouseout"===e||"mouseover"===e?(a=Xt,l=Yt.mouseLeave,u=Yt.mouseEnter,s="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Kt,l=Yt.pointerLeave,u=Yt.pointerEnter,s="pointer");var c=null==i?o:R(i);if(o=null==t?o:R(t),(e=a.getPooled(l,i,n,r)).type=s+"leave",e.target=c,e.relatedTarget=o,(n=a.getPooled(u,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=c,r=t,i&&r)e:{for(o=r,s=0,a=t=i;a;a=U(a))s++;for(a=0,u=o;u;u=U(u))a++;for(;0<s-a;)t=U(t),s--;for(;0<a-s;)o=U(o),a--;for(;s--;){if(t===o||t===o.alternate)break e;t=U(t),o=U(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(s=i.alternate)||s!==o);)t.push(i),i=U(i);for(i=[];r&&r!==o&&(null===(s=r.alternate)||s!==o);)i.push(r),r=U(r);for(r=0;r<t.length;r++)H(t[r],"bubbled",e);for(r=i.length;0<r--;)H(i[r],"captured",n);return[e,n]}},Jt=Object.prototype.hasOwnProperty;function Zt(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function en(e,t){if(Zt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Jt.call(t,n[r])||!Zt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var l=o.child;l;){if(l===n)return nn(o),e;if(l===r)return nn(o),t;l=l.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{l=!1;for(var u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}l||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=ue.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=ue.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ln=qt.extend({relatedTarget:null});function un(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=qt.extend({key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=un(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Wt,charCode:function(e){return"keypress"===e.type?un(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?un(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),dn=Xt.extend({dataTransfer:null}),pn=qt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Wt}),hn=ue.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),mn=Xt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),yn=[["abort","abort"],[G,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],vn={},gn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},vn[e]=t,gn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),yn.forEach(function(e){bn(e,!1)});var xn={eventTypes:vn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=gn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=gn[e];if(!o)return null;switch(e){case"keypress":if(0===un(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=ln;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Xt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=dn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=pn;break;case G:case J:case Z:e=on;break;case ee:e=hn;break;case"scroll":e=qt;break;case"wheel":e=mn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Kt;break;default:e=ue}return B(t=e.getPooled(o,t,n,r)),t}},wn=xn.isInteractiveTopLevelEventType,kn=[];function Tn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=L(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Ue(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,l=0;l<v.length;l++){var u=v[l];u&&(u=u.extractEvents(r,t,i,o))&&(a=C(a,u))}O(a)}}var En=!0;function Cn(e,t){if(!t)return null;var n=(wn(e)?_n:Nn).bind(null,e);t.addEventListener(e,n,!1)}function Sn(e,t){if(!t)return null;var n=(wn(e)?_n:Nn).bind(null,e);t.addEventListener(e,n,!0)}function _n(e,t){Ae(Nn,e,t)}function Nn(e,t){if(En){var n=Ue(t);if(null===(n=L(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),kn.length){var r=kn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ie(Tn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>kn.length&&kn.push(e)}}}var Pn={},Dn=0,On="_reactListenersID"+(""+Math.random()).slice(2);function jn(e){return Object.prototype.hasOwnProperty.call(e,On)||(e[On]=Dn++,Pn[e[On]]={}),Pn[e[On]]}function An(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Mn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Ln(e,t){var n,r=Mn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Mn(r)}}function In(){for(var e=window,t=An();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=An(e.document)}return t}function Rn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Fn=$&&"documentMode"in document&&11>=document.documentMode,Un={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},qn=null,zn=null,Hn=null,Wn=!1;function Bn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Wn||null==qn||qn!==An(n)?null:("selectionStart"in(n=qn)&&Rn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Hn&&en(Hn,n)?null:(Hn=n,(e=ue.getPooled(Un.select,zn,e,t)).type="select",e.target=qn,B(e),e))}var $n={eventTypes:Un,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=jn(i),o=x.onSelect;for(var a=0;a<o.length;a++){var l=o[a];if(!i.hasOwnProperty(l)||!i[l]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?R(t):window,e){case"focus":(Fe(i)||"true"===i.contentEditable)&&(qn=i,zn=t,Hn=null);break;case"blur":Hn=zn=qn=null;break;case"mousedown":Wn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Wn=!1,Bn(n,r);case"selectionchange":if(Fn)break;case"keydown":case"keyup":return Bn(n,r)}return null}};function Vn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Qn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+gt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Xn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Kn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:gt(n)}}function Yn(e,t){var n=gt(t.value),r=gt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Gn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}P.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=F,k=I,T=R,P.injectEventPluginsByName({SimpleEventPlugin:xn,EnterLeaveEventPlugin:Gt,ChangeEventPlugin:Ut,SelectEventPlugin:$n,BeforeInputEventPlugin:Ce});var Jn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Zn(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function er(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Zn(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var tr,nr=void 0,rr=(tr=function(e,t){if(e.namespaceURI!==Jn.svg||"innerHTML"in e)e.innerHTML=t;else{for((nr=nr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=nr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return tr(e,t)})}:tr);function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ir={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ar=["Webkit","ms","Moz","O"];function lr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ir.hasOwnProperty(e)&&ir[e]?(""+t).trim():t+"px"}function ur(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=lr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ir).forEach(function(e){ar.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ir[t]=ir[e]})});var sr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function cr(e,t){t&&(sr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function fr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function dr(e,t){var n=jn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=x[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Sn("scroll",e);break;case"focus":case"blur":Sn("focus",e),Sn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":qe(o)&&Sn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&Cn(o,e)}n[o]=!0}}}function pr(){}var hr=null,mr=null;function yr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function vr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var gr="function"==typeof setTimeout?setTimeout:void 0,br="function"==typeof clearTimeout?clearTimeout:void 0;function xr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function wr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var kr=[],Tr=-1;function Er(e){0>Tr||(e.current=kr[Tr],kr[Tr]=null,Tr--)}function Cr(e,t){kr[++Tr]=e.current,e.current=t}var Sr={},_r={current:Sr},Nr={current:!1},Pr=Sr;function Dr(e,t){var n=e.type.contextTypes;if(!n)return Sr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Or(e){return null!=(e=e.childContextTypes)}function jr(e){Er(Nr),Er(_r)}function Ar(e){Er(Nr),Er(_r)}function Mr(e,t,n){_r.current!==Sr&&a("168"),Cr(_r,t),Cr(Nr,n)}function Lr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||a("108",lt(t)||"Unknown",i);return o({},n,r)}function Ir(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Sr,Pr=_r.current,Cr(_r,t),Cr(Nr,Nr.current),!0}function Rr(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Lr(e,t,Pr),r.__reactInternalMemoizedMergedChildContext=t,Er(Nr),Er(_r),Cr(_r,t)):Er(Nr),Cr(Nr,n)}var Fr=null,Ur=null;function qr(e){return function(t){try{return e(t)}catch(e){}}}function zr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Hr(e,t,n,r){return new zr(e,t,n,r)}function Wr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Br(e,t){var n=e.alternate;return null===n?((n=Hr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.firstContextDependency=e.firstContextDependency,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function $r(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Wr(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case Ke:return Vr(n.children,o,i,t);case et:return Qr(n,3|o,i,t);case Ye:return Qr(n,2|o,i,t);case Ge:return(e=Hr(12,n,t,4|o)).elementType=Ge,e.type=Ge,e.expirationTime=i,e;case nt:return(e=Hr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:l=10;break e;case Ze:l=9;break e;case tt:l=11;break e;case rt:l=14;break e;case ot:l=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=Hr(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Vr(e,t,n,r){return(e=Hr(7,e,r,t)).expirationTime=n,e}function Qr(e,t,n,r){return e=Hr(8,e,r,t),t=0==(1&t)?Ye:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Xr(e,t,n){return(e=Hr(6,e,null,t)).expirationTime=n,e}function Kr(e,t,n){return(t=Hr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Yr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),Zr(t,e)}function Gr(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),Zr(t,e)}function Jr(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function Zr(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}var eo=!1;function to(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function no(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function ro(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function oo(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function io(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=to(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=to(e.memoizedState),o=n.updateQueue=to(n.memoizedState)):r=e.updateQueue=no(o):null===o&&(o=n.updateQueue=no(r));null===o||r===o?oo(r,t):null===r.lastUpdate||null===o.lastUpdate?(oo(r,t),oo(o,t)):(oo(r,t),o.lastUpdate=t)}function ao(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=to(e.memoizedState):lo(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function lo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=no(t)),t}function uo(e,t,n,r,i,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-2049&e.effectTag|64;case 0:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case 2:eo=!0}return r}function so(e,t,n,r,o){eo=!1;for(var i=(t=lo(e,t)).baseState,a=null,l=0,u=t.firstUpdate,s=i;null!==u;){var c=u.expirationTime;c<o?(null===a&&(a=u,i=s),l<c&&(l=c)):(s=uo(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(c=null,u=t.firstCapturedUpdate;null!==u;){var f=u.expirationTime;f<o?(null===c&&(c=u,null===a&&(i=s)),l<f&&(l=f)):(s=uo(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(i=s),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=c,e.expirationTime=l,e.memoizedState=s}function co(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),fo(t.firstEffect,n),t.firstEffect=t.lastEffect=null,fo(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function fo(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function po(e,t){return{value:e,source:t,stack:ut(t)}}var ho={current:null},mo=null,yo=null,vo=null;function go(e,t){var n=e.type._context;Cr(ho,n._currentValue),n._currentValue=t}function bo(e){var t=ho.current;Er(ho),e.type._context._currentValue=t}function xo(e){mo=e,vo=yo=null,e.firstContextDependency=null}function wo(e,t){return vo!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(vo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===yo?(null===mo&&a("293"),mo.firstContextDependency=yo=t):yo=yo.next=t),e._currentValue}var ko={},To={current:ko},Eo={current:ko},Co={current:ko};function So(e){return e===ko&&a("174"),e}function _o(e,t){Cr(Co,t),Cr(Eo,e),Cr(To,ko);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:er(null,"");break;default:t=er(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Er(To),Cr(To,t)}function No(e){Er(To),Er(Eo),Er(Co)}function Po(e){So(Co.current);var t=So(To.current),n=er(t,e.type);t!==n&&(Cr(Eo,e),Cr(To,n))}function Do(e){Eo.current===e&&(Er(To),Er(Eo))}function Oo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var jo=Be.ReactCurrentOwner,Ao=(new r.Component).refs;function Mo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Lo={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Sa(),o=ro(r=Ji(r,e));o.payload=t,null!=n&&(o.callback=n),Qi(),io(e,o),ta(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Sa(),o=ro(r=Ji(r,e));o.tag=1,o.payload=t,null!=n&&(o.callback=n),Qi(),io(e,o),ta(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Sa(),r=ro(n=Ji(n,e));r.tag=2,null!=t&&(r.callback=t),Qi(),io(e,r),ta(e,n)}};function Io(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,i))}function Ro(e,t,n){var r=!1,o=Sr,i=t.contextType;return"object"==typeof i&&null!==i?i=jo.currentDispatcher.readContext(i):(o=Or(t)?Pr:_r.current,i=(r=null!=(r=t.contextTypes))?Dr(e,o):Sr),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Lo,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Fo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Lo.enqueueReplaceState(t,t.state,null)}function Uo(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ao;var i=t.contextType;"object"==typeof i&&null!==i?o.context=jo.currentDispatcher.readContext(i):(i=Or(t)?Pr:_r.current,o.context=Dr(e,i)),null!==(i=e.updateQueue)&&(so(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(Mo(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Lo.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(so(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var qo=Array.isArray;function zo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("289"),r=n.stateNode),r||a("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===Ao&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function Ho(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Wo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Br(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Xr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=zo(e,t,n),r.return=e,r):((r=$r(n.type,n.key,n.props,null,e.mode,r)).ref=zo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Kr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Vr(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Qe:return(n=$r(t.type,t.key,t.props,null,e.mode,n)).ref=zo(e,null,t),n.return=e,n;case Xe:return(t=Kr(t,e.mode,n)).return=e,t}if(qo(t)||at(t))return(t=Vr(t,e.mode,n,null)).return=e,t;Ho(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Qe:return n.key===o?n.type===Ke?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case Xe:return n.key===o?c(e,t,n,r):null}if(qo(n)||at(n))return null!==o?null:f(e,t,n,r,null);Ho(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Qe:return e=e.get(null===r.key?n:r.key)||null,r.type===Ke?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case Xe:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(qo(r)||at(r))return f(t,e=e.get(n)||null,r,o,null);Ho(t,r)}return null}function m(o,a,l,u){for(var s=null,c=null,f=a,m=a=0,y=null;null!==f&&m<l.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=p(o,f,l[m],u);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(o,f),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v,f=y}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)(f=d(o,l[m],u))&&(a=i(f,a,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)(y=h(f,o,m,l[m],u))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),a=i(y,a,m),null===c?s=y:c.sibling=y,c=y);return e&&f.forEach(function(e){return t(o,e)}),s}function y(o,l,u,s){var c=at(u);"function"!=typeof c&&a("150"),null==(u=c.call(u))&&a("151");for(var f=c=null,m=l,y=l=0,v=null,g=u.next();null!==m&&!g.done;y++,g=u.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=p(o,m,g.value,s);if(null===b){m||(m=v);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,y),null===f?c=b:f.sibling=b,f=b,m=v}if(g.done)return n(o,m),c;if(null===m){for(;!g.done;y++,g=u.next())null!==(g=d(o,g.value,s))&&(l=i(g,l,y),null===f?c=g:f.sibling=g,f=g);return c}for(m=r(o,m);!g.done;y++,g=u.next())null!==(g=h(m,o,y,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),l=i(g,l,y),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach(function(e){return t(o,e)}),c}return function(e,r,i,u){var s="object"==typeof i&&null!==i&&i.type===Ke&&null===i.key;s&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case Qe:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){if(7===s.tag?i.type===Ke:s.elementType===i.type){n(e,s.sibling),(r=o(s,i.type===Ke?i.props.children:i.props)).ref=zo(e,s,i),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}i.type===Ke?((r=Vr(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=$r(i.type,i.key,i.props,null,e.mode,u)).ref=zo(e,r,i),u.return=e,e=u)}return l(e);case Xe:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Kr(i,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Xr(i,e.mode,u)).return=e,e=r),l(e);if(qo(i))return m(e,r,i,u);if(at(i))return y(e,r,i,u);if(c&&Ho(e,i),void 0===i&&!s)switch(e.tag){case 1:case 0:a("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var Bo=Wo(!0),$o=Wo(!1),Vo=null,Qo=null,Xo=!1;function Ko(e,t){var n=Hr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Yo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Go(e){if(Xo){var t=Qo;if(t){var n=t;if(!Yo(e,t)){if(!(t=xr(n))||!Yo(e,t))return e.effectTag|=2,Xo=!1,void(Vo=e);Ko(Vo,n)}Vo=e,Qo=wr(t)}else e.effectTag|=2,Xo=!1,Vo=e}}function Jo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;Vo=e}function Zo(e){if(e!==Vo)return!1;if(!Xo)return Jo(e),Xo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!vr(t,e.memoizedProps))for(t=Qo;t;)Ko(e,t),t=xr(t);return Jo(e),Qo=Vo?xr(e.stateNode):null,!0}function ei(){Qo=Vo=null,Xo=!1}var ti=Be.ReactCurrentOwner;function ni(e,t,n,r){t.child=null===e?$o(t,null,n,r):Bo(t,e.child,n,r)}function ri(e,t,n,r,o){n=n.render;var i=t.ref;return xo(t),r=n(r,i),t.effectTag|=1,ni(e,t,r,o),t.child}function oi(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Wr(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=$r(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ii(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?di(e,t,i):(t.effectTag|=1,(e=Br(a,r)).ref=t.ref,e.return=t,t.child=e)}function ii(e,t,n,r,o,i){return null!==e&&o<i&&en(e.memoizedProps,r)&&e.ref===t.ref?di(e,t,i):li(e,t,n,r,i)}function ai(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function li(e,t,n,r,o){var i=Or(n)?Pr:_r.current;return i=Dr(t,i),xo(t),n=n(r,i),t.effectTag|=1,ni(e,t,n,o),t.child}function ui(e,t,n,r,o){if(Or(n)){var i=!0;Ir(t)}else i=!1;if(xo(t),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Ro(t,n,r),Uo(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=jo.currentDispatcher.readContext(s):s=Dr(t,s=Or(n)?Pr:_r.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&Fo(t,a,r,s),eo=!1;var d=t.memoizedState;u=a.state=d;var p=t.updateQueue;null!==p&&(so(t,p,r,a,o),u=t.memoizedState),l!==r||d!==u||Nr.current||eo?("function"==typeof c&&(Mo(t,n,c,r),u=t.memoizedState),(l=eo||Io(t,n,l,r,d,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,l=t.memoizedProps,a.props=t.type===t.elementType?l:Oo(t.type,l),u=a.context,"object"==typeof(s=n.contextType)&&null!==s?s=jo.currentDispatcher.readContext(s):s=Dr(t,s=Or(n)?Pr:_r.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&Fo(t,a,r,s),eo=!1,u=t.memoizedState,d=a.state=u,null!==(p=t.updateQueue)&&(so(t,p,r,a,o),d=t.memoizedState),l!==r||u!==d||Nr.current||eo?("function"==typeof c&&(Mo(t,n,c,r),d=t.memoizedState),(c=eo||Io(t,n,l,r,u,d,s))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,s)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return si(e,t,n,r,i,o)}function si(e,t,n,r,o,i){ai(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Rr(t,n,!1),di(e,t,i);r=t.stateNode,ti.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Bo(t,e.child,null,i),t.child=Bo(t,null,l,i)):ni(e,t,l,i),t.memoizedState=r.state,o&&Rr(t,n,!0),t.child}function ci(e){var t=e.stateNode;t.pendingContext?Mr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Mr(0,t.context,!1),_o(e,t.containerInfo)}function fi(e,t,n){var r=t.mode,o=t.pendingProps,i=t.memoizedState;if(0==(64&t.effectTag)){i=null;var a=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},a=!0,t.effectTag&=-65;if(null===e)if(a){var l=o.fallback;e=Vr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Vr(l,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=$o(t,null,o.children,n);else null!==e.memoizedState?(l=(r=e.child).sibling,a?(n=o.fallback,o=Br(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=a)),r=o.sibling=Br(l,n,l.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=Bo(t,r.child,o.children,n)):(l=e.child,a?(a=o.fallback,(o=Vr(null,r,0,null)).child=l,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Vr(a,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=Bo(t,l,o.children,n)),t.stateNode=e.stateNode;return t.memoizedState=i,t.child=n,r}function di(e,t,n){if(null!==e&&(t.firstContextDependency=e.firstContextDependency),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=Br(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Br(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function pi(e,t,n){var r=t.expirationTime;if(null!==e&&e.memoizedProps===t.pendingProps&&!Nr.current&&r<n){switch(t.tag){case 3:ci(t),ei();break;case 5:Po(t);break;case 1:Or(t.type)&&Ir(t);break;case 4:_o(t,t.stateNode.containerInfo);break;case 10:go(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?fi(e,t,n):null!==(t=di(e,t,n))?t.sibling:null}return di(e,t,n)}switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=Dr(t,_r.current);if(xo(t),o=r(e,o),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Or(r)){var i=!0;Ir(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&Mo(t,r,l,e),o.updater=Lo,t.stateNode=o,o._reactInternalFiber=t,Uo(t,r,e,n),t=si(null,t,r,!0,i,n)}else t.tag=0,ni(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),i=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:throw e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return Wr(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),i=Oo(e,i),l=void 0,o){case 0:l=li(null,t,e,i,n);break;case 1:l=ui(null,t,e,i,n);break;case 11:l=ri(null,t,e,i,n);break;case 14:l=oi(null,t,e,Oo(e.type,i),r,n);break;default:a("306",e,"")}return l;case 0:return r=t.type,o=t.pendingProps,li(e,t,r,o=t.elementType===r?o:Oo(r,o),n);case 1:return r=t.type,o=t.pendingProps,ui(e,t,r,o=t.elementType===r?o:Oo(r,o),n);case 3:return ci(t),null===(r=t.updateQueue)&&a("282"),o=null!==(o=t.memoizedState)?o.element:null,so(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(ei(),t=di(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(Qo=wr(t.stateNode.containerInfo),Vo=t,o=Xo=!0),o?(t.effectTag|=2,t.child=$o(t,null,r,n)):(ni(e,t,r,n),ei()),t=t.child),t;case 5:return Po(t),null===e&&Go(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,vr(r,o)?l=null:null!==i&&vr(r,i)&&(t.effectTag|=16),ai(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=1,t=null):(ni(e,t,l,n),t=t.child),t;case 6:return null===e&&Go(t),null;case 13:return fi(e,t,n);case 4:return _o(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Bo(t,null,r,n):ni(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ri(e,t,r,o=t.elementType===r?o:Oo(r,o),n);case 7:return ni(e,t,t.pendingProps,n),t.child;case 8:case 12:return ni(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,l=t.memoizedProps,go(t,i=o.value),null!==l){var u=l.value;if(0===(i=u===i&&(0!==u||1/u==1/i)||u!=u&&i!=i?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(l.children===o.children&&!Nr.current){t=di(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){if(null!==(u=l.firstContextDependency))do{if(u.context===r&&0!=(u.observedBits&i)){if(1===l.tag){var s=ro(n);s.tag=2,io(l,s)}l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n);for(var c=l.return;null!==c;){if(s=c.alternate,c.childExpirationTime<n)c.childExpirationTime=n,null!==s&&s.childExpirationTime<n&&(s.childExpirationTime=n);else{if(!(null!==s&&s.childExpirationTime<n))break;s.childExpirationTime=n}c=c.return}}s=l.child,u=u.next}while(null!==u);else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}}ni(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,xo(t),r=r(o=wo(o,i.unstable_observedBits)),t.effectTag|=1,ni(e,t,r,n),t.child;case 14:return i=Oo(o=t.type,t.pendingProps),oi(e,t,o,i=Oo(o.type,i),r,n);case 15:return ii(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Oo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Or(r)?(e=!0,Ir(t)):e=!1,xo(t),Ro(t,r,o),Uo(t,r,o,n),si(null,t,r,!0,e,n);default:a("156")}}function hi(e){e.effectTag|=4}var mi=void 0,yi=void 0,vi=void 0,gi=void 0;mi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},yi=function(){},vi=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var l=t.stateNode;switch(So(To.current),e=null,n){case"input":a=bt(l,a),r=bt(l,r),e=[];break;case"option":a=Vn(l,a),r=Vn(l,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Xn(l,a),r=Xn(l,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(l.onclick=pr)}cr(n,r),l=n=void 0;var u=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var s=a[n];for(l in s)s.hasOwnProperty(l)&&(u||(u={}),u[l]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var c=r[n];if(s=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&c!==s&&(null!=c||null!=s))if("style"===n)if(s){for(l in s)!s.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(u||(u={}),u[l]="");for(l in c)c.hasOwnProperty(l)&&s[l]!==c[l]&&(u||(u={}),u[l]=c[l])}else u||(e||(e=[]),e.push(n,u)),u=c;else"dangerouslySetInnerHTML"===n?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(n,""+c)):"children"===n?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(n,""+c):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=c&&dr(i,n),e||s===c||(e=[])):(e=e||[]).push(n,c))}u&&(e=e||[]).push("style",u),i=e,(t.updateQueue=i)&&hi(t)}},gi=function(e,t,n,r){n!==r&&hi(t)};var bi="function"==typeof WeakSet?WeakSet:Set;function xi(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ut(n)),null!==n&&lt(n.type),t=t.value,null!==e&&1===e.tag&&lt(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function wi(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Gi(e,t)}else t.current=null}function ki(e){switch("function"==typeof Ur&&Ur(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(null!==r){var o=e;try{r()}catch(e){Gi(o,e)}}n=n.next}while(n!==t)}break;case 1:if(wi(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Gi(e,t)}break;case 5:wi(e);break;case 4:Ci(e)}}function Ti(e){return 5===e.tag||3===e.tag||4===e.tag}function Ei(e){e:{for(var t=e.return;null!==t;){if(Ti(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Ti(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,l=o.stateNode,u=n;8===i.nodeType?i.parentNode.insertBefore(l,u):i.insertBefore(l,u)}else t.insertBefore(o.stateNode,n);else r?(l=t,u=o.stateNode,8===l.nodeType?(i=l.parentNode).insertBefore(u,l):(i=l).appendChild(u),null!=(l=l._reactRootContainer)||null!==i.onclick||(i.onclick=pr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Ci(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,l=i;;)if(ki(l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===i)break;for(;null===l.sibling;){if(null===l.return||l.return===i)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}o?(i=r,l=t.stateNode,8===i.nodeType?i.parentNode.removeChild(l):i.removeChild(l)):r.removeChild(t.stateNode)}else if(4===t.tag?(r=t.stateNode.containerInfo,o=!0):ki(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function Si(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,n,r,o){e[M]=o,"input"===n&&"radio"===o.type&&null!=o.name&&wt(e,o),fr(n,r),r=fr(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],l=t[i+1];"style"===a?ur(e,l):"dangerouslySetInnerHTML"===a?rr(e,l):"children"===a?or(e,l):vt(e,a,l,r)}switch(n){case"input":kt(e,o);break;case"textarea":Yn(e,o);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Qn(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Qn(e,!!o.multiple,o.defaultValue,!0):Qn(e,!!o.multiple,o.multiple?[]:"",!1))}}(n,i,o,e,r)}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=Sa())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=lr("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var l=t.stateNode;null===l&&(l=t.stateNode=new bi),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Ji(t=Sa(),e),null!==(e=ea(e,t))&&(Yr(e,t),0!==(t=e.expirationTime)&&_a(e,t))}.bind(null,t,e);l.has(e)||(l.add(e),e.then(n,n))})}break;case 17:break;default:a("163")}}var _i="function"==typeof WeakMap?WeakMap:Map;function Ni(e,t,n){(n=ro(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ia(r),xi(e,t)},n}function Pi(e,t,n){(n=ro(n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===$i?$i=new Set([this]):$i.add(this));var n=t.value,o=t.stack;xi(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function Di(e){switch(e.tag){case 1:Or(e.type)&&jr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return No(),Ar(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return Do(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 4:return No(),null;case 10:return bo(e),null;default:return null}}var Oi={readContext:wo},ji=Be.ReactCurrentOwner,Ai=1073741822,Mi=0,Li=!1,Ii=null,Ri=null,Fi=0,Ui=-1,qi=!1,zi=null,Hi=!1,Wi=null,Bi=null,$i=null;function Vi(){if(null!==Ii)for(var e=Ii.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&jr();break;case 3:No(),Ar();break;case 5:Do(t);break;case 4:No();break;case 10:bo(t)}e=e.return}Ri=null,Fi=0,Ui=-1,qi=!1,Ii=null}function Qi(){null!==Bi&&(i.unstable_cancelCallback(Wi),Bi())}function Xi(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Ii=e;e:{var i=t,l=Fi,u=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Or(t.type)&&jr();break;case 3:No(),Ar(),(u=t.stateNode).pendingContext&&(u.context=u.pendingContext,u.pendingContext=null),null!==i&&null!==i.child||(Zo(t),t.effectTag&=-3),yi(t);break;case 5:Do(t);var s=So(Co.current);if(l=t.type,null!==i&&null!=t.stateNode)vi(i,t,l,u,s),i.ref!==t.ref&&(t.effectTag|=128);else if(u){var c=So(To.current);if(Zo(t)){i=(u=t).stateNode;var f=u.type,d=u.memoizedProps,p=s;switch(i[A]=u,i[M]=d,l=void 0,s=f){case"iframe":case"object":Cn("load",i);break;case"video":case"audio":for(f=0;f<te.length;f++)Cn(te[f],i);break;case"source":Cn("error",i);break;case"img":case"image":case"link":Cn("error",i),Cn("load",i);break;case"form":Cn("reset",i),Cn("submit",i);break;case"details":Cn("toggle",i);break;case"input":xt(i,d),Cn("invalid",i),dr(p,"onChange");break;case"select":i._wrapperState={wasMultiple:!!d.multiple},Cn("invalid",i),dr(p,"onChange");break;case"textarea":Kn(i,d),Cn("invalid",i),dr(p,"onChange")}for(l in cr(s,d),f=null,d)d.hasOwnProperty(l)&&(c=d[l],"children"===l?"string"==typeof c?i.textContent!==c&&(f=["children",c]):"number"==typeof c&&i.textContent!==""+c&&(f=["children",""+c]):b.hasOwnProperty(l)&&null!=c&&dr(p,l));switch(s){case"input":He(i),Tt(i,d,!0);break;case"textarea":He(i),Gn(i);break;case"select":case"option":break;default:"function"==typeof d.onClick&&(i.onclick=pr)}l=f,u.updateQueue=l,(u=null!==l)&&hi(t)}else{d=t,i=l,p=u,f=9===s.nodeType?s:s.ownerDocument,c===Jn.html&&(c=Zn(i)),c===Jn.html?"script"===i?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof p.is?f=f.createElement(i,{is:p.is}):(f=f.createElement(i),"select"===i&&p.multiple&&(f.multiple=!0)):f=f.createElementNS(c,i),(i=f)[A]=d,i[M]=u,mi(i,t,!1,!1),p=i;var h=s,m=fr(f=l,d=u);switch(f){case"iframe":case"object":Cn("load",p),s=d;break;case"video":case"audio":for(s=0;s<te.length;s++)Cn(te[s],p);s=d;break;case"source":Cn("error",p),s=d;break;case"img":case"image":case"link":Cn("error",p),Cn("load",p),s=d;break;case"form":Cn("reset",p),Cn("submit",p),s=d;break;case"details":Cn("toggle",p),s=d;break;case"input":xt(p,d),s=bt(p,d),Cn("invalid",p),dr(h,"onChange");break;case"option":s=Vn(p,d);break;case"select":p._wrapperState={wasMultiple:!!d.multiple},s=o({},d,{value:void 0}),Cn("invalid",p),dr(h,"onChange");break;case"textarea":Kn(p,d),s=Xn(p,d),Cn("invalid",p),dr(h,"onChange");break;default:s=d}cr(f,s),c=void 0;var y=f,v=p,g=s;for(c in g)if(g.hasOwnProperty(c)){var x=g[c];"style"===c?ur(v,x):"dangerouslySetInnerHTML"===c?null!=(x=x?x.__html:void 0)&&rr(v,x):"children"===c?"string"==typeof x?("textarea"!==y||""!==x)&&or(v,x):"number"==typeof x&&or(v,""+x):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(b.hasOwnProperty(c)?null!=x&&dr(h,c):null!=x&&vt(v,c,x,m))}switch(f){case"input":He(p),Tt(p,d,!1);break;case"textarea":He(p),Gn(p);break;case"option":null!=d.value&&p.setAttribute("value",""+gt(d.value));break;case"select":(s=p).multiple=!!d.multiple,null!=(p=d.value)?Qn(s,!!d.multiple,p,!1):null!=d.defaultValue&&Qn(s,!!d.multiple,d.defaultValue,!0);break;default:"function"==typeof s.onClick&&(p.onclick=pr)}(u=yr(l,u))&&hi(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:i&&null!=t.stateNode?gi(i,t,i.memoizedProps,u):("string"!=typeof u&&(null===t.stateNode&&a("166")),i=So(Co.current),So(To.current),Zo(t)?(l=(u=t).stateNode,i=u.memoizedProps,l[A]=u,(u=l.nodeValue!==i)&&hi(t)):(l=t,(u=(9===i.nodeType?i:i.ownerDocument).createTextNode(u))[A]=t,l.stateNode=u));break;case 11:break;case 13:if(u=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=l,Ii=t;break e}u=null!==u,l=null!==i&&null!==i.memoizedState,null!==i&&!u&&l&&(null!==(i=i.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=i,i.nextEffect=s):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(u!==l||0==(1&t.effectTag)&&u)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:No(),yi(t);break;case 10:bo(t);break;case 9:case 14:break;case 17:Or(t.type)&&jr();break;default:a("156")}Ii=null}if(t=e,1===Fi||1!==t.childExpirationTime){for(u=0,l=t.child;null!==l;)(i=l.expirationTime)>u&&(u=i),(s=l.childExpirationTime)>u&&(u=s),l=l.sibling;t.childExpirationTime=u}if(null!==Ii)return Ii;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=Di(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Ki(e){var t=pi(e.alternate,e,Fi);return e.memoizedProps=e.pendingProps,null===t&&(t=Xi(e)),ji.current=null,t}function Yi(e,t){Li&&a("243"),Qi(),Li=!0,ji.currentDispatcher=Oi;var n=e.nextExpirationTimeToWorkOn;n===Fi&&e===Ri&&null!==Ii||(Vi(),Fi=n,Ii=Br((Ri=e).current,null),e.pendingCommitExpirationTime=0);for(var r=!1;;){try{if(t)for(;null!==Ii&&!Da();)Ii=Ki(Ii);else for(;null!==Ii;)Ii=Ki(Ii)}catch(t){if(vo=yo=mo=null,null===Ii)r=!0,Ia(t);else{null===Ii&&a("271");var o=Ii,i=o.return;if(null!==i){e:{var l=e,u=i,s=o,c=t;if(i=Fi,s.effectTag|=1024,s.firstEffect=s.lastEffect=null,null!==c&&"object"==typeof c&&"function"==typeof c.then){var f=c;c=u;var d=-1,p=-1;do{if(13===c.tag){var h=c.alternate;if(null!==h&&null!==(h=h.memoizedState)){p=10*(1073741822-h.timedOutAt);break}"number"==typeof(h=c.pendingProps.maxDuration)&&(0>=h?d=0:(-1===d||h<d)&&(d=h))}c=c.return}while(null!==c);c=u;do{if((h=13===c.tag)&&(h=void 0!==c.memoizedProps.fallback&&null===c.memoizedState),h){if(null===(u=c.updateQueue)?c.updateQueue=new Set([f]):u.add(f),0==(1&c.mode)){c.effectTag|=64,s.effectTag&=-1957,1===s.tag&&(null===s.alternate?s.tag=17:((i=ro(1073741823)).tag=2,io(s,i))),s.expirationTime=1073741823;break e}null===(s=l.pingCache)?(s=l.pingCache=new _i,u=new Set,s.set(f,u)):void 0===(u=s.get(f))&&(u=new Set,s.set(f,u)),u.has(i)||(u.add(i),s=Zi.bind(null,l,f,i),f.then(s,s)),-1===d?l=1073741823:(-1===p&&(p=10*(1073741822-Jr(l,i))-5e3),l=p+d),0<=l&&Ui<l&&(Ui=l),c.effectTag|=2048,c.expirationTime=i;break e}c=c.return}while(null!==c);c=Error((lt(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ut(s))}qi=!0,c=po(c,s),l=u;do{switch(l.tag){case 3:l.effectTag|=2048,l.expirationTime=i,ao(l,i=Ni(l,c,i));break e;case 1:if(f=c,d=l.type,p=l.stateNode,0==(64&l.effectTag)&&("function"==typeof d.getDerivedStateFromError||null!==p&&"function"==typeof p.componentDidCatch&&(null===$i||!$i.has(p)))){l.effectTag|=2048,l.expirationTime=i,ao(l,i=Pi(l,f,i));break e}}l=l.return}while(null!==l)}Ii=Xi(o);continue}r=!0,Ia(t)}}break}if(Li=!1,vo=yo=mo=ji.currentDispatcher=null,r)Ri=null,e.finishedWork=null;else if(null!==Ii)e.finishedWork=null;else{if(null===(r=e.current.alternate)&&a("281"),Ri=null,qi){if(o=e.latestPendingTime,i=e.latestSuspendedTime,l=e.latestPingedTime,0!==o&&o<n||0!==i&&i<n||0!==l&&l<n)return Gr(e,n),void Ca(e,r,n,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,n=e.nextExpirationTimeToWorkOn=n,t=e.expirationTime=1073741823,void Ca(e,r,n,t,-1)}t&&-1!==Ui?(Gr(e,n),(t=10*(1073741822-Jr(e,n)))<Ui&&(Ui=t),t=10*(1073741822-Sa()),t=Ui-t,Ca(e,r,n,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=n,e.finishedWork=r)}}function Gi(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===$i||!$i.has(r)))return io(n,e=Pi(n,e=po(t,e),1073741823)),void ta(n,1073741823);break;case 3:return io(n,e=Ni(n,e=po(t,e),1073741823)),void ta(n,1073741823)}n=n.return}3===e.tag&&(io(e,n=Ni(e,n=po(t,e),1073741823)),ta(e,1073741823))}function Ji(e,t){return 0!==Mi?e=Mi:Li?e=Hi?1073741823:Fi:1&t.mode?(e=ma?1073741822-10*(1+((1073741822-e+15)/10|0)):1073741822-25*(1+((1073741822-e+500)/25|0)),null!==Ri&&e===Fi&&--e):e=1073741823,ma&&(0===ca||e<ca)&&(ca=e),e}function Zi(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Ri&&Fi===n?Ri=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),Zr(n,e),0!==(n=e.expirationTime)&&_a(e,n)))}function ea(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function ta(e,t){null!==(e=ea(e,t))&&(!Li&&0!==Fi&&t>Fi&&Vi(),Yr(e,t),Li&&!Hi&&Ri===e||_a(e,e.expirationTime),wa>xa&&(wa=0,a("185")))}function na(e,t,n,r,o){var i=Mi;Mi=1073741823;try{return e(t,n,r,o)}finally{Mi=i}}var ra=null,oa=null,ia=0,aa=void 0,la=!1,ua=null,sa=0,ca=0,fa=!1,da=null,pa=!1,ha=!1,ma=!1,ya=null,va=i.unstable_now(),ga=1073741822-(va/10|0),ba=ga,xa=50,wa=0,ka=null;function Ta(){ga=1073741822-((i.unstable_now()-va)/10|0)}function Ea(e,t){if(0!==ia){if(t<ia)return;null!==aa&&i.unstable_cancelCallback(aa)}ia=t,e=i.unstable_now()-va,aa=i.unstable_scheduleCallback(Oa,{timeout:10*(1073741822-t)-e})}function Ca(e,t,n,r,o){e.expirationTime=r,0!==o||Da()?0<o&&(e.timeoutHandle=gr(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,Ta(),ba=ga,Aa(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function Sa(){return la?ba:(Na(),0!==sa&&1!==sa||(Ta(),ba=ga),ba)}function _a(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===oa?(ra=oa=e,e.nextScheduledRoot=e):(oa=oa.nextScheduledRoot=e).nextScheduledRoot=ra):t>e.expirationTime&&(e.expirationTime=t),la||(pa?ha&&(ua=e,sa=1073741823,Ma(e,1073741823,!1)):1073741823===t?ja(1073741823,!1):Ea(e,t))}function Na(){var e=0,t=null;if(null!==oa)for(var n=oa,r=ra;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===oa)&&a("244"),r===r.nextScheduledRoot){ra=oa=r.nextScheduledRoot=null;break}if(r===ra)ra=o=r.nextScheduledRoot,oa.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===oa){(oa=n).nextScheduledRoot=ra,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===oa)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}ua=t,sa=e}var Pa=!1;function Da(){return!!Pa||!!i.unstable_shouldYield()&&(Pa=!0)}function Oa(){try{if(!Da()&&null!==ra){Ta();var e=ra;do{var t=e.expirationTime;0!==t&&ga<=t&&(e.nextExpirationTimeToWorkOn=ga),e=e.nextScheduledRoot}while(e!==ra)}ja(0,!0)}finally{Pa=!1}}function ja(e,t){if(Na(),t)for(Ta(),ba=ga;null!==ua&&0!==sa&&e<=sa&&!(Pa&&ga>sa);)Ma(ua,sa,ga>sa),Na(),Ta(),ba=ga;else for(;null!==ua&&0!==sa&&e<=sa;)Ma(ua,sa,!1),Na();if(t&&(ia=0,aa=null),0!==sa&&Ea(ua,sa),wa=0,ka=null,null!==ya)for(e=ya,ya=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){fa||(fa=!0,da=e)}}if(fa)throw e=da,da=null,fa=!1,e}function Aa(e,t){la&&a("253"),ua=e,sa=t,Ma(e,t,!1),ja(1073741823,!1)}function Ma(e,t,n){if(la&&a("245"),la=!0,n){var r=e.finishedWork;null!==r?La(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),Yi(e,n),null!==(r=e.finishedWork)&&(Da()?e.finishedWork=r:La(e,r,t)))}else null!==(r=e.finishedWork)?La(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),Yi(e,n),null!==(r=e.finishedWork)&&La(e,r,t));la=!1}function La(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===ya?ya=[r]:ya.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===ka?wa++:(ka=e,wa=0),Hi=Li=!0,e.current===t&&a("177"),0===(n=e.pendingCommitExpirationTime)&&a("261"),e.pendingCommitExpirationTime=0,r=t.expirationTime;var o=t.childExpirationTime;if(r=o>r?o:r,e.didError=!1,0===r?(e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0):(r<e.latestPingedTime&&(e.latestPingedTime=0),0!==(o=e.latestPendingTime)&&(o>r?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>r&&(e.earliestPendingTime=e.latestPendingTime)),0===(o=e.earliestSuspendedTime)?Yr(e,r):r<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Yr(e,r)):r>o&&Yr(e,r)),Zr(0,e),ji.current=null,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,hr=En,Rn(o=In())){if("selectionStart"in o)var i={start:o.selectionStart,end:o.selectionEnd};else e:{var l=(i=(i=o.ownerDocument)&&i.defaultView||window).getSelection&&i.getSelection();if(l&&0!==l.rangeCount){i=l.anchorNode;var u=l.anchorOffset,s=l.focusNode;l=l.focusOffset;try{i.nodeType,s.nodeType}catch(e){i=null;break e}var c=0,f=-1,d=-1,p=0,h=0,m=o,y=null;t:for(;;){for(var v;m!==i||0!==u&&3!==m.nodeType||(f=c+u),m!==s||0!==l&&3!==m.nodeType||(d=c+l),3===m.nodeType&&(c+=m.nodeValue.length),null!==(v=m.firstChild);)y=m,m=v;for(;;){if(m===o)break t;if(y===i&&++p===u&&(f=c),y===s&&++h===l&&(d=c),null!==(v=m.nextSibling))break;y=(m=y).parentNode}m=v}i=-1===f||-1===d?null:{start:f,end:d}}else i=null}i=i||{start:0,end:0}}else i=null;for(mr={focusedElem:o,selectionRange:i},En=!1,zi=r;null!==zi;){o=!1,i=void 0;try{for(;null!==zi;){if(256&zi.effectTag)e:{var g=zi.alternate;switch((u=zi).tag){case 0:case 11:case 15:break e;case 1:if(256&u.effectTag&&null!==g){var b=g.memoizedProps,x=g.memoizedState,w=u.stateNode,k=w.getSnapshotBeforeUpdate(u.elementType===u.type?b:Oo(u.type,b),x);w.__reactInternalSnapshotBeforeUpdate=k}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}zi=zi.nextEffect}}catch(e){o=!0,i=e}o&&(null===zi&&a("178"),Gi(zi,i),null!==zi&&(zi=zi.nextEffect))}for(zi=r;null!==zi;){g=!1,b=void 0;try{for(;null!==zi;){var T=zi.effectTag;if(16&T&&or(zi.stateNode,""),128&T){var E=zi.alternate;if(null!==E){var C=E.ref;null!==C&&("function"==typeof C?C(null):C.current=null)}}switch(14&T){case 2:Ei(zi),zi.effectTag&=-3;break;case 6:Ei(zi),zi.effectTag&=-3,Si(zi.alternate,zi);break;case 4:Si(zi.alternate,zi);break;case 8:Ci(x=zi),x.return=null,x.child=null,x.memoizedState=null,x.updateQueue=null;var S=x.alternate;null!==S&&(S.return=null,S.child=null,S.memoizedState=null,S.updateQueue=null)}zi=zi.nextEffect}}catch(e){g=!0,b=e}g&&(null===zi&&a("178"),Gi(zi,b),null!==zi&&(zi=zi.nextEffect))}if(C=mr,E=In(),T=C.focusedElem,g=C.selectionRange,E!==T&&T&&T.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(T.ownerDocument.documentElement,T)){null!==g&&Rn(T)&&(E=g.start,void 0===(C=g.end)&&(C=E),"selectionStart"in T?(T.selectionStart=E,T.selectionEnd=Math.min(C,T.value.length)):(C=(E=T.ownerDocument||document)&&E.defaultView||window).getSelection&&(C=C.getSelection(),b=T.textContent.length,S=Math.min(g.start,b),g=void 0===g.end?S:Math.min(g.end,b),!C.extend&&S>g&&(b=g,g=S,S=b),b=Ln(T,S),x=Ln(T,g),b&&x&&(1!==C.rangeCount||C.anchorNode!==b.node||C.anchorOffset!==b.offset||C.focusNode!==x.node||C.focusOffset!==x.offset)&&((E=E.createRange()).setStart(b.node,b.offset),C.removeAllRanges(),S>g?(C.addRange(E),C.extend(x.node,x.offset)):(E.setEnd(x.node,x.offset),C.addRange(E))))),E=[];for(C=T;C=C.parentNode;)1===C.nodeType&&E.push({element:C,left:C.scrollLeft,top:C.scrollTop});for("function"==typeof T.focus&&T.focus(),T=0;T<E.length;T++)(C=E[T]).element.scrollLeft=C.left,C.element.scrollTop=C.top}for(mr=null,En=!!hr,hr=null,e.current=t,zi=r;null!==zi;){r=!1,T=void 0;try{for(E=n;null!==zi;){var _=zi.effectTag;if(36&_){var N=zi.alternate;switch(S=E,(C=zi).tag){case 0:case 11:case 15:break;case 1:var P=C.stateNode;if(4&C.effectTag)if(null===N)P.componentDidMount();else{var D=C.elementType===C.type?N.memoizedProps:Oo(C.type,N.memoizedProps);P.componentDidUpdate(D,N.memoizedState,P.__reactInternalSnapshotBeforeUpdate)}var O=C.updateQueue;null!==O&&co(0,O,P);break;case 3:var j=C.updateQueue;if(null!==j){if(g=null,null!==C.child)switch(C.child.tag){case 5:g=C.child.stateNode;break;case 1:g=C.child.stateNode}co(0,j,g)}break;case 5:var A=C.stateNode;null===N&&4&C.effectTag&&yr(C.type,C.memoizedProps)&&A.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}if(128&_){var M=zi.ref;if(null!==M){var L=zi.stateNode;switch(zi.tag){case 5:var I=L;break;default:I=L}"function"==typeof M?M(I):M.current=I}}zi=zi.nextEffect}}catch(e){r=!0,T=e}r&&(null===zi&&a("178"),Gi(zi,T),null!==zi&&(zi=zi.nextEffect))}Li=Hi=!1,"function"==typeof Fr&&Fr(t.stateNode),_=t.expirationTime,0===(t=(t=t.childExpirationTime)>_?t:_)&&($i=null),e.expirationTime=t,e.finishedWork=null}function Ia(e){null===ua&&a("246"),ua.expirationTime=0,fa||(fa=!0,da=e)}function Ra(e,t){var n=pa;pa=!0;try{return e(t)}finally{(pa=n)||la||ja(1073741823,!1)}}function Fa(e,t){if(pa&&!ha){ha=!0;try{return e(t)}finally{ha=!1}}return e(t)}function Ua(e,t,n){if(ma)return e(t,n);pa||la||0===ca||(ja(ca,!1),ca=0);var r=ma,o=pa;pa=ma=!0;try{return e(t,n)}finally{ma=r,(pa=o)||la||ja(1073741823,!1)}}function qa(e,t,n,r,o){var i=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||a("170");var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(Or(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);a("171"),l=void 0}if(1===n.tag){var u=n.type;if(Or(u)){n=Lr(n,u,l);break e}}n=l}else n=Sr;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=ro(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Qi(),io(i,o),ta(i,r),r}function za(e,t,n,r){var o=t.current;return qa(e,t,n,o=Ji(Sa(),o),r)}function Ha(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Wa(e){var t=1073741822-25*(1+((1073741822-Sa()+500)/25|0));t>=Ai&&(t=Ai-1),this._expirationTime=Ai=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Ba(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function $a(e,t,n){e={current:t=Hr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Va(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Qa(e,t,n,r,o){Va(n)||a("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var l=o;o=function(){var e=Ha(i._internalRoot);l.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new $a(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=Ha(i._internalRoot);u.call(e)}}Fa(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return Ha(i._internalRoot)}function Xa(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Va(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Xe,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Se=function(e,t,n){switch(t){case"input":if(kt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=F(r);o||a("90"),We(r),kt(r,o)}}}break;case"textarea":Yn(e,n);break;case"select":null!=(t=n.value)&&Qn(e,!!n.multiple,t,!1)}},Wa.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Ba;return qa(e,t,null,n,r._onCommit),r},Wa.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Wa.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&a("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Aa(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Wa.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Ba.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Ba.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},$a.prototype.render=function(e,t){var n=this._internalRoot,r=new Ba;return null!==(t=void 0===t?null:t)&&r.then(t),za(e,n,null,r._onCommit),r},$a.prototype.unmount=function(e){var t=this._internalRoot,n=new Ba;return null!==(e=void 0===e?null:e)&&n.then(e),za(null,t,null,n._onCommit),n},$a.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new Ba;return null!==(n=void 0===n?null:n)&&o.then(n),za(t,r,e,o._onCommit),o},$a.prototype.createBatch=function(){var e=new Wa(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},je=Ra,Ae=Ua,Me=function(){la||0===ca||(ja(ca,!1),ca=0)};var Ka={createPortal:Xa,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Qa(null,e,t,!0,n)},render:function(e,t,n){return Qa(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&a("38"),Qa(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Va(e)||a("40"),!!e._reactRootContainer&&(Fa(function(){Qa(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Xa.apply(void 0,arguments)},unstable_batchedUpdates:Ra,unstable_interactiveUpdates:Ua,flushSync:function(e,t){la&&a("187");var n=pa;pa=!0;try{return na(e,t)}finally{pa=n,ja(1073741823,!1)}},unstable_createRoot:function(e,t){return Va(e)||a("299","unstable_createRoot"),new $a(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=pa;pa=!0;try{na(e)}finally{(pa=t)||la||ja(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[I,R,F,P.injectEventPluginsByName,g,B,function(e){S(e,W)},De,Oe,Nn,O]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Fr=qr(function(e){return t.onCommitFiberRoot(n,e)}),Ur=qr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{overrideProps:null,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:L,bundleType:0,version:"16.7.0",rendererPackageName:"react-dom"});var Ya={default:Ka},Ga=Ya&&Ka||Ya;e.exports=Ga.default||Ga},function(e,t,n){"use strict";e.exports=n(7)},function(e,t,n){"use strict";(function(e){
/** @license React v0.12.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,a=-1,l=!1,u=!1;function s(){if(!l){var e=n.expirationTime;u?T():u=!0,k(d,e)}}function c(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var i=o,l=a;o=e,a=t;try{var u=r()}finally{o=i,a=l}if("function"==typeof u)if(u={callback:u,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=u.next=u.previous=u;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=u,s()),(t=r.previous).next=r.previous=u,u.next=r,u.previous=t}}function f(){if(-1===i&&null!==n&&1===n.priorityLevel){l=!0;try{do{c()}while(null!==n&&1===n.priorityLevel)}finally{l=!1,null!==n?s():u=!1}}}function d(e){l=!0;var o=r;r=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.expirationTime<=i))break;do{c()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{c()}while(null!==n&&!E())}finally{l=!1,r=o,null!==n?s():u=!1,f()}}var p,h,m=Date,y="function"==typeof setTimeout?setTimeout:void 0,v="function"==typeof clearTimeout?clearTimeout:void 0,g="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function x(e){p=g(function(t){v(h),e(t)}),h=y(function(){b(p),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var w=performance;t.unstable_now=function(){return w.now()}}else t.unstable_now=function(){return m.now()};var k,T,E,C=null;if("undefined"!=typeof window?C=window:void 0!==e&&(C=e),C&&C._schedMock){var S=C._schedMock;k=S[0],T=S[1],E=S[2],t.unstable_now=S[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var _=null,N=function(e){if(null!==_)try{_(e)}finally{_=null}};k=function(e){null!==_?setTimeout(k,0,e):(_=e,setTimeout(N,0,!1))},T=function(){_=null},E=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof g&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var P=null,D=!1,O=-1,j=!1,A=!1,M=0,L=33,I=33;E=function(){return M<=t.unstable_now()};var R=new MessageChannel,F=R.port2;R.port1.onmessage=function(){D=!1;var e=P,n=O;P=null,O=-1;var r=t.unstable_now(),o=!1;if(0>=M-r){if(!(-1!==n&&n<=r))return j||(j=!0,x(U)),P=e,void(O=n);o=!0}if(null!==e){A=!0;try{e(o)}finally{A=!1}}};var U=function(e){if(null!==P){x(U);var t=e-M+I;t<I&&L<I?(8>t&&(t=8),I=t<L?L:t):L=t,M=e+I,D||(D=!0,F.postMessage(void 0))}else j=!1};k=function(e,t){P=e,O=t,A||0>t?F.postMessage(void 0):j||(j=!0,x(U))},T=function(){P=null,D=!1,O=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,a=i;o=e,i=t.unstable_now();try{return n()}finally{o=r,i=a,f()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==i?i:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(o){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,s();else{a=null;var l=n;do{if(l.expirationTime>r){a=l;break}l=l.next}while(l!==n);null===a?a=n:a===n&&(n=e,s()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,a=i;o=n,i=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,i=a,f()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||E())},t.unstable_continueExecution=function(){null!==n&&s()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(8))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(2),a=n.n(i),l=5e3;function u(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var f=function(){function e(t,n,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),c(this,"pitForm",null),c(this,"moneyMonthlySalary",0),c(this,"moneyMonthlyDeducted",l),c(this,"moneyMonthlySpecialDeducted",0),c(this,"moneyMonthlySixSpecialDeducted",0),c(this,"pitInfoMap",{}),this.pitForm=t,this.moneyMonthlySalary=n,this.moneyMonthlySpecialDeducted=r,this.moneyMonthlySixSpecialDeducted=o}var t,n,r;return t=e,(n=[{key:"n1ByMonth",value:function(e){var t=this.moneyMonthlySalary*e-this.moneyMonthlyDeducted*e-this.moneyMonthlySpecialDeducted*e-this.moneyMonthlySixSpecialDeducted*e;return Number.parseFloat(t.toFixed(3))}},{key:"getPitInfoByMonth",value:function(e){var t=this;if(this.pitInfoMap[e])return this.pitInfoMap[e];var n=this.n1ByMonth(e),r=this.pitForm.getLevelMeta(n),o=r.rate,i=r.quickCalculateDeducting,a=r.level,l=u(Array(e-1).keys()).map(function(e){return e+1}).reduce(function(e,n){return e+t.getPitInfoByMonth(n).pit},0),s=n*o-i-l,c={pit:s,level:a,rate:o,quickCalculateDeducting:i};return this.pitInfoMap[e]=c,console.log("[".concat(e,"] ").concat(s," = ").concat(n," * ").concat(o," - ").concat(i," - ").concat(l)),c}},{key:"calculate",value:function(){var e=this;return this.pitInfoMap={},u(Array(12).keys()).map(function(e){return e+1}).map(function(t){var n=e.getPitInfoByMonth(t);return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){c(e,t,n[t])})}return e}({month:t},n,{pit:Number.parseFloat(n.pit.toFixed(2))})})}}])&&s(t.prototype,n),r&&s(t,r),e}();function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var p=function e(t,n,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),d(this,"level",0),d(this,"rate",0),d(this,"quickCalculateDeducting",0),d(this,"validate",function(){return!1}),this.level=t,this.rate=n,this.quickCalculateDeducting=r,this.validate=o};function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var m=new(function(){function e(){var t,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=[],(n="levels")in(t=this)?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r}var t,n,r;return t=e,(n=[{key:"add",value:function(e){this.levels.push(e)}},{key:"getLevelMeta",value:function(e){var t=this.levels.find(function(t){return t.validate(e)});return console.log("got: rate => ".concat(t.rate,", level => ").concat(t.level," (as money is ").concat(e,")")),t}},{key:"toJSON",value:function(){return JSON.stringify(this.levels)}}])&&h(t.prototype,n),r&&h(t,r),e}());m.add(new p(1,.03,0,function(e){return e<=36e3})),m.add(new p(2,.1,2520,function(e){return e>36e3||e<=144e3})),m.add(new p(3,.2,16829,function(e){return e>144e3||e<=3e5})),m.add(new p(4,.25,31920,function(e){return e>3e5||e<=42e4})),m.add(new p(5,.3,52920,function(e){return e>42e4||e<=66e4})),m.add(new p(6,.35,85920,function(e){return e>66e4||e<=96e4})),m.add(new p(7,.45,181920,function(e){return e>96e4}));var y=m,v=n(3),g=n.n(v);function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function T(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var C=function(e){function t(){var e,n,r,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];return r=this,n=!(o=(e=w(t)).call.apply(e,[this].concat(a)))||"object"!==b(o)&&"function"!=typeof o?T(r):o,E(T(T(n)),"form",null),n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(t,o.a.Component),n=t,(r=[{key:"componentWillMount",value:function(){this.setForm=this.setForm.bind(this),this.handleSubmit=this.handleSubmit.bind(this)}},{key:"setForm",value:function(e){this.form=e}},{key:"handleSubmit",value:function(e){e.preventDefault();var t=this.props.onSubmit,n=g()(this.form).serializeArray().reduce(function(e,t){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){E(e,t,n[t])})}return e}({},e,E({},t.name,Number.parseFloat(t.value)))},{});return console.log("formValues => ".concat(JSON.stringify(n))),"function"==typeof t&&t(n),!1}},{key:"render",value:function(){return o.a.createElement("form",{ref:this.setForm,onSubmit:this.handleSubmit},o.a.createElement("fieldset",null,o.a.createElement("legend",null,"èªèµæåµ"),o.a.createElement("div",{className:"form-group"},o.a.createElement("label",{htmlFor:"MonthlySalary"},"æ¯æåºåå·¥èµ"),o.a.createElement("input",{className:"form-control",type:"number",name:"MonthlySalary",step:"0.01",placeholder:"æ¯æåºåå·¥èµ",defaultValue:"10000"})),o.a.createElement("div",{className:"form-group"},o.a.createElement("label",{htmlFor:"MonthlyDeducted"},"æ¯æåé¤è´¹ç¨"),o.a.createElement("input",{className:"form-control",type:"number",name:"MonthlyDeducted",step:"0.01",placeholder:"æ¯æåé¤è´¹ç¨",value:l,readOnly:!0,disabled:!0})),o.a.createElement("div",{className:"form-group"},o.a.createElement("label",{htmlFor:"MonthlySpecialDeducted"},"ä¸é©ä¸éç­ä¸é¡¹æ£é¤"),o.a.createElement("input",{className:"form-control",type:"number",name:"MonthlySpecialDeducted",step:"0.01",placeholder:"ä¸é©ä¸éç­ä¸é¡¹æ£é¤",defaultValue:"1500"})),o.a.createElement("div",{className:"form-group"},o.a.createElement("label",{htmlFor:"MonthlySixSpecialDeducted"},"6å¤§é¡¹ç­ä¸é¡¹æ£é¤"),o.a.createElement("input",{className:"form-control",type:"number",name:"MonthlySixSpecialDeducted",step:"0.01",placeholder:"6å¤§é¡¹ç­ä¸é¡¹æ£é¤",defaultValue:"1000"})),o.a.createElement("button",{type:"submit",class:"btn btn-primary"},"è®¡ç®")))}}])&&x(n.prototype,r),i&&x(n,i),t}();function S(e){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function N(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function P(e){return(P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function D(e,t){return(D=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var j=function(e){function t(){var e,n,r,o,i,a,l;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var u=arguments.length,s=new Array(u),c=0;c<u;c++)s[c]=arguments[c];return r=this,n=!(o=(e=P(t)).call.apply(e,[this].concat(s)))||"object"!==S(o)&&"function"!=typeof o?O(r):o,i=O(O(n)),l={result:null,tab:"table"},(a="state")in i?Object.defineProperty(i,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):i[a]=l,n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&D(e,t)}(t,o.a.Component),n=t,(r=[{key:"componentWillMount",value:function(){this.handleSubmit=this.handleSubmit.bind(this),this.showResult=this.showResult.bind(this),this.showCSVResult=this.showCSVResult.bind(this),this.showTableResult=this.showTableResult.bind(this)}},{key:"handleSubmit",value:function(e){var t=e.MonthlySalary,n=e.MonthlySpecialDeducted,r=e.MonthlySixSpecialDeducted,o=new f(y,t,n,r).calculate();this.setState({result:o})}},{key:"showResult",value:function(e){console.log("tag => ".concat(e)),this.setState({tab:e})}},{key:"showCSVResult",value:function(){this.showResult("csv")}},{key:"showTableResult",value:function(){this.showResult("table")}},{key:"renderPreText",value:function(){var e=this.state.result;return["æä»½,åºç¼´ç¨\n"].concat(_(e.map(function(e){var t=e.month,n=e.pit;return"".concat(t,",").concat(n,"\n")})))}},{key:"renderPreTable",value:function(){var e=this.state.result;return o.a.createElement("table",{className:"table"},o.a.createElement("thead",{className:"thead-dark"},o.a.createElement("tr",null,o.a.createElement("th",{scope:"col"},"æä»½"),o.a.createElement("th",{scope:"col"},"åºç¼´ç¨"),o.a.createElement("th",{scope:"col"},"ç­çº§"))),o.a.createElement("tbody",null,e.map(function(e){var t=e.month,n=e.pit,r=e.level;return o.a.createElement("tr",null,o.a.createElement("th",{scope:"row"},t),o.a.createElement("td",null,n),o.a.createElement("td",null,o.a.createElement("kbd",null,r)))})))}},{key:"renderResult",value:function(){var e=this.state,t=e.result,n=e.tab;return Array.isArray(t)?o.a.createElement("fieldset",null,o.a.createElement("legend",null,"ç¼´ç¨ç»æ"),o.a.createElement("ul",{className:"nav nav-tabs"},o.a.createElement("li",{className:"nav-item"},o.a.createElement("a",{className:"nav-link ".concat("table"===n?"active":""),href:"javascript:void(null);",onClick:this.showTableResult},"è¡¨æ ¼")),o.a.createElement("li",{className:"nav-item"},o.a.createElement("a",{className:"nav-link ".concat("csv"===n?"active":""),href:"javascript:void(null);",onClick:this.showCSVResult},"CSV"))),o.a.createElement("br",null),"csv"===n?o.a.createElement("pre",null,this.renderPreText()):null,"table"===n?this.renderPreTable():null):o.a.createElement("div",null,"æ²¡æç»æ")}},{key:"render",value:function(){return o.a.createElement("div",{className:"container"},o.a.createElement(C,{onSubmit:this.handleSubmit}),o.a.createElement("br",null),this.renderResult())}}])&&N(n.prototype,r),i&&N(n,i),t}();a.a.render(o.a.createElement(function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("nav",{className:"navbar navbar-expand-md navbar-dark fixed-top bg-dark"},o.a.createElement("a",{className:"navbar-brand",href:"https://wxqee.github.io/2019-CN-PIT/"},"2019 ä¸­å½ èªèµä¸ªç¨è®¡ç®å¨ï¼ç®çï¼"),o.a.createElement("button",{className:"navbar-toggler",type:"button","data-toggle":"collapse","data-target":"#navbarsExampleDefault","aria-controls":"navbarsExampleDefault","aria-expanded":"false","aria-label":"Toggle navigation"},o.a.createElement("span",{className:"navbar-toggler-icon"},"Â ")),o.a.createElement("div",{className:"collapse navbar-collapse",id:"navbarsExampleDefault"},o.a.createElement("ul",{className:"navbar-nav mr-auto"},o.a.createElement("li",{className:"nav-item active"},o.a.createElement("a",{className:"nav-link",href:"https://wxqee.github.io/2019-CN-PIT/"},"Home ",o.a.createElement("span",{className:"sr-only"},"(current)"))),o.a.createElement("li",{className:"nav-item"},o.a.createElement("a",{className:"nav-link",href:"https://github.com/wxqee/2019-CN-PIT"},"Github"))))),o.a.createElement("main",{role:"main"},o.a.createElement("h1",null,"2019å¹´ä¸ªäººæå¾ç¨è®¡ç®å¨"),o.a.createElement(j,null)))},null),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9Db25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1BJVENhbGN1bGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1BJVERlZHVjdEluQWR2YW5jZVJvdy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUGl0RGVkdWN0SW5BZHZhbmNlRm9ybTEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1BJVERlZHVjdEluQWR2YW5jZUZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVXNlclNhbGFyeUZvcm0uanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1BpdENhbGMuanN4Iiwid2VicGFjazovLy8uL3NyYy9hcHAuanN4Il0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiYXNzaWduIiwidGVzdDEiLCJTdHJpbmciLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJtYXAiLCJqb2luIiwidGVzdDMiLCJzcGxpdCIsImZvckVhY2giLCJsZXR0ZXIiLCJrZXlzIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwidGFyZ2V0Iiwic291cmNlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsInZhbCIsIlR5cGVFcnJvciIsInRvT2JqZWN0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJjb25zb2xlIiwiZXJyb3IiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImdsb2JhbCIsImZhY3RvcnkiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJzbGljZSIsImNvbmNhdCIsInB1c2giLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJvYmoiLCJub2RlVHlwZSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInR5cGUiLCJzcmMiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJjb2RlIiwiZG9jIiwibm9kZSIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidG9UeXBlIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwicnRyaW0iLCJpc0FycmF5TGlrZSIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicmV0IiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsImNhbGxiYWNrIiwiZWxlbSIsImFwcGx5IiwiZmlyc3QiLCJlcSIsImxhc3QiLCJsZW4iLCJqIiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsIm9wdGlvbnMiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsImRlZXAiLCJpc1BsYWluT2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5IiwidW5kZWZpbmVkIiwiZXhwYW5kbyIsIk1hdGgiLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsIm1zZyIsIm5vb3AiLCJwcm90byIsIkN0b3IiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsInRyaW0iLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJndWlkIiwiaXRlcmF0b3IiLCJ0b0xvd2VyQ2FzZSIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJEYXRlIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsInNvcnRPcmRlciIsImEiLCJiIiwicG9wIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJfIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiZGlzYWJsZWRBbmNlc3RvciIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJuaWQiLCJtYXRjaCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJleGVjIiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3QiLCJub2RlTmFtZSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInRvU2VsZWN0b3IiLCJ0ZXN0Q29udGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImNhY2hlIiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbm5lckhUTUwiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCI+IiwiICIsIisiLCJ+IiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJyZXN1bHQiLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwicGFyZW50IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsImFyZ3MiLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm5vdCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJoYXMiLCJpbm5lclRleHQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJyb290IiwiZm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJlbmFibGVkIiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsImVtcHR5IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInRva2VucyIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJzZXRNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwidG9rZW4iLCJjb21waWxlZCIsImRlZmF1bHRWYWx1ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwic2VsZiIsInJvb3RqUXVlcnkiLCJwYXJzZUhUTUwiLCJyZWFkeSIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsImNvbnRlbnRzIiwicHJldiIsInNpYmxpbmciLCJ0YXJnZXRzIiwiY2xvc2VzdCIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsIm1ldGhvZCIsInByb21pc2UiLCJmYWlsIiwidGhlbiIsIkNhbGxiYWNrcyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsImFsd2F5cyIsImRlZmVycmVkIiwiY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJ3YXJuIiwibWVzc2FnZSIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsInRvVXBwZXJDYXNlIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJKU09OIiwicGFyc2UiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJzdHlsZSIsImRpc3BsYXkiLCJjc3MiLCJzd2FwIiwib2xkIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImdldERlZmF1bHREaXNwbGF5IiwiYm9keSIsInNob3dIaWRlIiwic2hvdyIsInZhbHVlcyIsImhpZGUiLCJ0b2dnbGUiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJ3cmFwTWFwIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImRpdiIsInJodG1sIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5vZGVzIiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50Iiwib24iLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImV2ZW50Iiwib2ZmIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJFdmVudCIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbEJveFN0eWxlcyIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjb250YWluZXIiLCJjc3NUZXh0IiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwicm91bmRQaXhlbE1lYXN1cmVzIiwibWFyZ2luTGVmdCIsInJpZ2h0IiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInBvc2l0aW9uIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsInJvdW5kIiwicGFyc2VGbG9hdCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsImZpbmFsUHJvcE5hbWUiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRDbGllbnRSZWN0cyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJoZWlnaHQiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJwcm9wRmlsdGVyIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCIqIiwidHdlZW5lciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYXR0ck5hbWVzIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJub25jZSIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwicmVzcG9uc2VzIiwiaXNTdWNjZXNzIiwicmVzcG9uc2UiLCJtb2RpZmllZCIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJ0ZXh0IHNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJpc05hTiIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwiayIsInEiLCJ1IiwieCIsInkiLCJ6IiwiQSIsIkIiLCJDIiwiRCIsImciLCJoIiwiZiIsImZyYW1lc1RvUG9wIiwiYWEiLCJFIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkYiLCJHIiwicmVmcyIsInVwZGF0ZXIiLCJIIiwiSSIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiSiIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSyIsImN1cnJlbnREaXNwYXRjaGVyIiwiTCIsIk0iLCJyZWYiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk4iLCJkZWZhdWx0UHJvcHMiLCIkJHR5cGVvZiIsIl9vd25lciIsIk8iLCJQIiwiUSIsIlIiLCJrZXlQcmVmaXgiLCJTIiwiViIsIlQiLCJVIiwiPSIsIjoiLCJjYSIsImRhIiwiVyIsImJhIiwiWCIsIkNoaWxkcmVuIiwib25seSIsImNyZWF0ZVJlZiIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiZm9yd2FyZFJlZiIsInJlbmRlciIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwibWVtbyIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwidmVyc2lvbiIsInVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlIiwidW5zdGFibGVfUHJvZmlsZXIiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwiWSIsImRlZmF1bHQiLCJaIiwiZWEiLCJmYSIsImhhIiwiaWEiLCJqYSIsIm9uRXJyb3IiLCJrYSIsIm1hIiwibmEiLCJvYSIsInBhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJxYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwicmEiLCJyZWdpc3RyYXRpb25OYW1lIiwic2EiLCJ0YSIsImRlcGVuZGVuY2llcyIsInVhIiwidmEiLCJ3YSIsInhhIiwibGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJDYSIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJEYSIsInN0YXRlTm9kZSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJNYSIsInJldHVybiIsIk5hIiwiZGlzcGF0Y2hDb25maWciLCJPYSIsIl90YXJnZXRJbnN0IiwiUGEiLCJRYSIsIlJhIiwiU2EiLCJUYSIsIlVhIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVmEiLCJXYSIsIlhhIiwidHJhbnNpdGlvbiIsIllhIiwiWmEiLCIkYSIsImFiIiwiYmIiLCJjYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJJbnRlcmZhY2UiLCJrYiIsImV2ZW50UG9vbCIsImxiIiwiZGVzdHJ1Y3RvciIsImpiIiwiZ2V0UG9vbGVkIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzVHJ1c3RlZCIsIm1iIiwibmIiLCJvYiIsInBiIiwicWIiLCJkb2N1bWVudE1vZGUiLCJyYiIsInNiIiwidGIiLCJ1YiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJ2YiIsIndiIiwieGIiLCJ5YiIsIkJiIiwibG9jYWxlIiwiemIiLCJBYiIsIkNiIiwiRGIiLCJFYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk5iIiwiT2IiLCJQYiIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwibnVtYmVyIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ3ZWVrIiwiUWIiLCJSYiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsIlNiIiwiVGIiLCJWYiIsIl92YWx1ZVRyYWNrZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWIiLCJXYiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJrYyIsImxjIiwibWMiLCJkaXNwbGF5TmFtZSIsIm5jIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJvYyIsInBjIiwicWMiLCJyYyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJ2YyIsIndjIiwieGMiLCJ0YyIsInVjIiwic2MiLCJzZXRBdHRyaWJ1dGVOUyIsInljIiwiemMiLCJkZWZhdWx0Q2hlY2tlZCIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkFjIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIkJjIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJjaGFuZ2UiLCJHYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiZGV0YWNoRXZlbnQiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIlVjIiwiVmMiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiV2MiLCJYYyIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJZYyIsImdldE1vZGlmaWVyU3RhdGUiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwiZGQiLCJmcm9tRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsImVkIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJpc1ByaW1hcnkiLCJmZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiZ2QiLCJhbHRlcm5hdGUiLCJoZCIsImpkIiwia2QiLCJlZmZlY3RUYWciLCJsZCIsIm5kIiwiY2hpbGQiLCJtZCIsIm9kIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsInBkIiwiY2xpcGJvYXJkRGF0YSIsInFkIiwicmQiLCJzZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwidWQiLCJyZXBlYXQiLCJ2ZCIsImRhdGFUcmFuc2ZlciIsIndkIiwieGQiLCJ5ZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiemQiLCJBZCIsIkJkIiwiQ2QiLCJpc0ludGVyYWN0aXZlIiwiRGQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJFZCIsIkZkIiwiR2QiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIkhkIiwiSWQiLCJKZCIsIktkIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJQZCIsIlFkIiwiUmQiLCJUZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiVWQiLCJjb250ZW50RWRpdGFibGUiLCJWZCIsIldkIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJhZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiYmUiLCJvblNlbGVjdCIsImVlIiwiZGUiLCJmZSIsImRlZmF1bHRTZWxlY3RlZCIsImdlIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJoZSIsImllIiwiamUiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwia2UiLCJtYXRobWwiLCJzdmciLCJsZSIsIm1lIiwibmUiLCJvZSIsIm5hbWVzcGFjZVVSSSIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJwZSIsInFlIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhQb3NpdGl2ZSIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJsaW5lQ2xhbXAiLCJ0YWJTaXplIiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInJlIiwic2UiLCJ0ZSIsImNoYXJBdCIsInN1YnN0cmluZyIsInVlIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJ0cmFjayIsIndiciIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJBZSIsIkJlIiwiYXV0b0ZvY3VzIiwiQ2UiLCJfX2h0bWwiLCJEZSIsIkVlIiwiR2UiLCJIZSIsIlNldCIsIkllIiwiSmUiLCJLZSIsIkxlIiwiTWUiLCJjb250ZXh0VHlwZXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJjaGlsZENvbnRleHRUeXBlcyIsIk5lIiwiT2UiLCJQZSIsIlFlIiwiZ2V0Q2hpbGRDb250ZXh0IiwiUmUiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIlNlIiwiVGUiLCJVZSIsIlZlIiwiWGUiLCJlbGVtZW50VHlwZSIsInBlbmRpbmdQcm9wcyIsImZpcnN0Q29udGV4dERlcGVuZGVuY3kiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJleHBpcmF0aW9uVGltZSIsIlllIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwicGVuZGluZ0NoaWxkcmVuIiwiZmYiLCJkaWRFcnJvciIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImdmIiwiaGYiLCJsYXRlc3RQaW5nZWRUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImpmIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJrZiIsImxmIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJtZiIsIm5mIiwicGF5bG9hZCIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ0ZiIsInVmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJvYnNlcnZlZEJpdHMiLCJGZiIsIkdmIiwiSGYiLCJJZiIsIkpmIiwidGFnTmFtZSIsIktmIiwiTGYiLCJNZiIsIk9mIiwiUGYiLCJRZiIsIlZmIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiV2YiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJYZiIsImNvbnRleHRUeXBlIiwicmVhZENvbnRleHQiLCJaZiIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIiRmIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJhZyIsImJnIiwiX3N0cmluZ1JlZiIsImNnIiwiZGciLCJNYXAiLCJkZWxldGUiLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInhnIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwieWciLCJwZW5kaW5nQ29udGV4dCIsInpnIiwidGltZWRPdXRBdCIsImZhbGxiYWNrIiwiQWciLCJOZiIsIlplIiwiZWxlbWVudCIsImh5ZHJhdGUiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJCZyIsIkNnIiwiR2ciLCJIZyIsIklnIiwib25DbGljayIsIm9uY2xpY2siLCJKZyIsIldlYWtTZXQiLCJLZyIsIkxnIiwiTWciLCJPZyIsImRlc3Ryb3kiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIlBnIiwiUWciLCJSZyIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJTZyIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJGZSIsIk5nIiwic2giLCJVZyIsIldlYWtNYXAiLCJWZyIsIldnIiwiWGciLCJjb21wb25lbnREaWRDYXRjaCIsIllnIiwiY29tcG9uZW50U3RhY2siLCJaZyIsIiRnIiwiYWgiLCJiaCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJraCIsImNyZWF0ZUVsZW1lbnROUyIsImxoIiwibWgiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJuaCIsIm1heER1cmF0aW9uIiwicGluZ0NhY2hlIiwib2giLCJmaW5pc2hlZFdvcmsiLCJwaCIsInFoIiwicmgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJ1bnN0YWJsZV9ub3ciLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsIkxoIiwidGltZW91dEhhbmRsZSIsIk5oIiwiT2giLCJuZXh0U2NoZWR1bGVkUm9vdCIsIlBoIiwiUWgiLCJSaCIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiX29uQ29tcGxldGUiLCJTaCIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJyYW5nZUNvdW50IiwiZGIiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiWWYiLCJWaCIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiU2QiLCJtaW4iLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJGYiIsIkdiIiwiSGMiLCJpaSIsIkRnIiwiRWciLCJqaSIsIkljIiwiRmciLCJjZSIsIlRoIiwiVWgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsImFpIiwiX3Jvb3QiLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJiaSIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJjaSIsIl9pbnRlcm5hbFJvb3QiLCJkaSIsImZpIiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwiZWkiLCJnaSIsIiRoIiwic3RyaW5naWZ5IiwiZm9ybSIsImNvbW1pdCIsInVubW91bnQiLCJjcmVhdGVCYXRjaCIsImtpIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlcyIsImZsdXNoU3luYyIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiV2UiLCJvdmVycmlkZVByb3BzIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImxpIiwibWkiLCJwcmV2aW91cyIsInByaW9yaXR5TGV2ZWwiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInBlcmZvcm1hbmNlIiwiX3NjaGVkTW9jayIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsIkZ1bmN0aW9uIiwicGl0TW9udGhseURlZHVjdGVkIiwiUElUQ2FsY3VsYXRvciIsIm1vbmV5TW9udGhseVNhbGFyeSIsIm1vbmV5TW9udGhseVNwZWNpYWxEZWR1Y3RlZCIsIm1vbmV5TW9udGhseVNpeFNwZWNpYWxEZWR1Y3RlZCIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZpbmVQcm9wZXJ0eSIsInBpdEZvcm0iLCJuMSIsIm1vbmV5TW9udGhseURlZHVjdGVkIiwiTnVtYmVyIiwidG9GaXhlZCIsIl90aGlzIiwicGl0SW5mb01hcCIsIm4xQnlNb250aCIsIl90aGlzJHBpdEZvcm0kZ2V0TGV2ZSIsImdldExldmVsTWV0YSIsInJhdGUiLCJxdWlja0NhbGN1bGF0ZURlZHVjdGluZyIsImxldmVsIiwicGl0SGlzdG9yeUFtb3VudCIsIl90b0NvbnN1bWFibGVBcnJheSIsInJlZHVjZSIsImFtb3VudCIsImdldFBpdEluZm9CeU1vbnRoIiwicGl0IiwicGl0SW5mbyIsImxvZyIsIl90aGlzMiIsIl9vYmplY3RTcHJlYWQiLCJQSVREZWR1Y3RJbkFkdmFuY2VSb3ciLCJ2YWxpZGF0ZSIsIlBJVERlZHVjdEluQWR2YW5jZVJvd19jbGFzc0NhbGxDaGVjayIsIlBJVERlZHVjdEluQWR2YW5jZVJvd19kZWZpbmVQcm9wZXJ0eSIsInBpdERlZHVjdEluQWR2YW5jZUZvcm0xIiwibGV2ZWxzIiwibW9uZXkiLCJsZXZlbE1ldGEiLCJsdmwiLCJVc2VyU2FsYXJ5Rm9ybSIsIlJlYWN0Iiwic2V0Rm9ybSIsImhhbmRsZVN1Ym1pdCIsIm9uU3VibWl0IiwiZm9ybVZhbHVlcyIsInJlZHVjZXIiLCJmaWVsZCIsIlVzZXJTYWxhcnlGb3JtX29iamVjdFNwcmVhZCIsIlVzZXJTYWxhcnlGb3JtX2RlZmluZVByb3BlcnR5IiwicmVhY3RfZGVmYXVsdCIsImh0bWxGb3IiLCJwbGFjZWhvbGRlciIsInJlYWRPbmx5IiwiUGl0Q2FsYyIsInRhYiIsInNob3dSZXN1bHQiLCJzaG93Q1NWUmVzdWx0Iiwic2hvd1RhYmxlUmVzdWx0IiwiTW9udGhseVNhbGFyeSIsIk1vbnRobHlTcGVjaWFsRGVkdWN0ZWQiLCJNb250aGx5U2l4U3BlY2lhbERlZHVjdGVkIiwiY2FsY3VsYXRlIiwiUGl0Q2FsY190b0NvbnN1bWFibGVBcnJheSIsIl9yZWYiLCJzY29wZSIsIl9yZWYyIiwiX3RoaXMkc3RhdGUiLCJyZW5kZXJQcmVUZXh0IiwicmVuZGVyUHJlVGFibGUiLCJjb21wb25lbnRzX1VzZXJTYWxhcnlGb3JtIiwicmVuZGVyUmVzdWx0IiwiUmVhY3RET00iLCJkYXRhLXRvZ2dsZSIsImRhdGEtdGFyZ2V0IiwiYXJpYS1jb250cm9scyIsImFyaWEtZXhwYW5kZWQiLCJhcmlhLWxhYmVsIiwicm9sZSIsImNvbXBvbmVudHNfUGl0Q2FsYyJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFyQixFQUFBcUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFYLE9BQUFZLE9BQUEsTUFHQSxHQUZBMUIsRUFBQWtCLEVBQUFPLEdBQ0FYLE9BQUFDLGVBQUFVLEVBQUEsV0FBeUNULFlBQUEsRUFBQUssVUFDekMsRUFBQUUsR0FBQSxpQkFBQUYsRUFBQSxRQUFBTSxLQUFBTixFQUFBckIsRUFBQVUsRUFBQWUsRUFBQUUsRUFBQSxTQUFBQSxHQUFnSCxPQUFBTixFQUFBTSxJQUFxQkMsS0FBQSxLQUFBRCxJQUNySSxPQUFBRixHQUlBekIsRUFBQTZCLEVBQUEsU0FBQTFCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQXFCLFdBQ0EsV0FBMkIsT0FBQXJCLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFpQixFQUFBQyxHQUFzRCxPQUFBakIsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBdUIsRUFBQUMsSUFHdEQvQixFQUFBa0MsRUFBQSxHQUlBbEMsSUFBQW1DLEVBQUEsa0NDL0VBaEMsRUFBQUQsUUFBbUJGLEVBQVE7Ozs7O0VDSzNCLElBQUFvQyxFQUFBdEIsT0FBQXNCLHNCQUNBSCxFQUFBbkIsT0FBQWtCLFVBQUFDLGVBQ0FJLEVBQUF2QixPQUFBa0IsVUFBQU0scUJBc0RBbkMsRUFBQUQsUUE1Q0EsV0FDQSxJQUNBLElBQUFZLE9BQUF5QixPQUNBLFNBTUEsSUFBQUMsRUFBQSxJQUFBQyxPQUFBLE9BRUEsR0FEQUQsRUFBQSxRQUNBLE1BQUExQixPQUFBNEIsb0JBQUFGLEdBQUEsR0FDQSxTQUtBLElBREEsSUFBQUcsRUFBQSxHQUNBdkMsRUFBQSxFQUFpQkEsRUFBQSxHQUFRQSxJQUN6QnVDLEVBQUEsSUFBQUYsT0FBQUcsYUFBQXhDLE1BS0Esa0JBSEFVLE9BQUE0QixvQkFBQUMsR0FBQUUsSUFBQSxTQUFBaEIsR0FDQSxPQUFBYyxFQUFBZCxLQUVBaUIsS0FBQSxJQUNBLFNBSUEsSUFBQUMsRUFBQSxHQUlBLE1BSEEsdUJBQUFDLE1BQUEsSUFBQUMsUUFBQSxTQUFBQyxHQUNBSCxFQUFBRyxPQUdBLHlCQURBcEMsT0FBQXFDLEtBQUFyQyxPQUFBeUIsT0FBQSxHQUFrQ1EsSUFBQUQsS0FBQSxJQU1oQyxNQUFBTSxHQUVGLFVBSUFDLEdBQUF2QyxPQUFBeUIsT0FBQSxTQUFBZSxFQUFBQyxHQUtBLElBSkEsSUFBQUMsRUFFQUMsRUFEQUMsRUF0REEsU0FBQUMsR0FDQSxHQUFBQSxRQUNBLFVBQUFDLFVBQUEseURBR0EsT0FBQTlDLE9BQUE2QyxHQWlEQUUsQ0FBQVAsR0FHQW5CLEVBQUEsRUFBZ0JBLEVBQUEyQixVQUFBQyxPQUFzQjVCLElBQUEsQ0FHdEMsUUFBQVIsS0FGQTZCLEVBQUExQyxPQUFBZ0QsVUFBQTNCLElBR0FGLEVBQUExQixLQUFBaUQsRUFBQTdCLEtBQ0ErQixFQUFBL0IsR0FBQTZCLEVBQUE3QixJQUlBLEdBQUFTLEVBQUEsQ0FDQXFCLEVBQUFyQixFQUFBb0IsR0FDQSxRQUFBcEQsRUFBQSxFQUFrQkEsRUFBQXFELEVBQUFNLE9BQW9CM0QsSUFDdENpQyxFQUFBOUIsS0FBQWlELEVBQUFDLEVBQUFyRCxNQUNBc0QsRUFBQUQsRUFBQXJELElBQUFvRCxFQUFBQyxFQUFBckQsTUFNQSxPQUFBc0Qsa0NDdEZBLFNBQUFNLElBRUEsR0FDQSxvQkFBQUMsZ0NBQ0EsbUJBQUFBLCtCQUFBRCxTQWNBLElBRUFDLCtCQUFBRCxZQUNHLE1BQUFaLEdBR0hjLFFBQUFDLE1BQUFmLElBT0FZLEdBQ0E3RCxFQUFBRCxRQUFtQkYsRUFBUSxvQkNsQzNCLElBQUFvRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBYUEsU0FBQUMsRUFBQUMsR0FFQSxhQUVnQyxpQkFBQW5FLEVBQUFELFFBU2hDQyxFQUFBRCxRQUFBbUUsRUFBQUUsU0FDQUQsRUFBQUQsR0FBQSxHQUNBLFNBQUFHLEdBQ0EsSUFBQUEsRUFBQUQsU0FDQSxVQUFBRSxNQUFBLDRDQUVBLE9BQUFILEVBQUFFLElBR0FGLEVBQUFELEdBdEJBLENBMEJDLG9CQUFBSyxjQUFBQyxLQUFBLFNBQUFELEVBQUFFLEdBTUQsYUFFQSxJQUFBQyxFQUFBLEdBRUFOLEVBQUFHLEVBQUFILFNBRUFPLEVBQUFoRSxPQUFBaUUsZUFFQUMsRUFBQUgsRUFBQUcsTUFFQUMsRUFBQUosRUFBQUksT0FFQUMsRUFBQUwsRUFBQUssS0FFQUMsRUFBQU4sRUFBQU0sUUFFQUMsRUFBQSxHQUVBQyxFQUFBRCxFQUFBQyxTQUVBQyxFQUFBRixFQUFBbkQsZUFFQXNELEVBQUFELEVBQUFELFNBRUFHLEVBQUFELEVBQUFoRixLQUFBTyxRQUVBMkUsRUFBQSxHQUVBQyxFQUFBLFNBQUFDLEdBTUEseUJBQUFBLEdBQUEsaUJBQUFBLEVBQUFDLFVBSUFDLEVBQUEsU0FBQUYsR0FDQSxhQUFBQSxTQUFBakIsUUFNQW9CLEVBQUEsQ0FDQUMsTUFBQSxFQUNBQyxLQUFBLEVBQ0FDLFVBQUEsR0FHQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUdBLElBQUFqRyxFQUNBa0csR0FIQUYsS0FBQTdCLEdBR0FnQyxjQUFBLFVBR0EsR0FEQUQsRUFBQUUsS0FBQUwsRUFDQUUsRUFDQSxJQUFBakcsS0FBQTBGLEVBQ0FPLEVBQUFqRyxLQUNBa0csRUFBQWxHLEdBQUFpRyxFQUFBakcsSUFJQWdHLEVBQUFLLEtBQUFDLFlBQUFKLEdBQUFLLFdBQUFDLFlBQUFOLEdBSUEsU0FBQU8sRUFBQWxCLEdBQ0EsYUFBQUEsRUFDQUEsRUFBQSxHQUlBLGlCQUFBQSxHQUFBLG1CQUFBQSxFQUNBUCxFQUFBQyxFQUFBOUUsS0FBQW9GLEtBQUEsZ0JBQ0FBLEVBUUEsSUFJQW1CLEVBQUEsU0FBQUMsRUFBQUMsR0FJQSxXQUFBRixFQUFBRyxHQUFBQyxLQUFBSCxFQUFBQyxJQUtBRyxFQUFBLHFDQW1WQSxTQUFBQyxFQUFBekIsR0FNQSxJQUFBNUIsSUFBQTRCLEdBQUEsV0FBQUEsS0FBQTVCLE9BQ0FnQyxFQUFBYyxFQUFBbEIsR0FFQSxPQUFBRCxFQUFBQyxLQUFBRSxFQUFBRixLQUlBLFVBQUFJLEdBQUEsSUFBQWhDLEdBQ0EsaUJBQUFBLEtBQUEsR0FBQUEsRUFBQSxLQUFBNEIsR0EvVkFtQixFQUFBRyxHQUFBSCxFQUFBOUUsVUFBQSxDQUdBcUYsT0FqQkEsUUFtQkFDLFlBQUFSLEVBR0EvQyxPQUFBLEVBRUF3RCxRQUFBLFdBQ0EsT0FBQXZDLEVBQUF6RSxLQUFBb0UsT0FLQTFELElBQUEsU0FBQXVHLEdBR0EsYUFBQUEsRUFDQXhDLEVBQUF6RSxLQUFBb0UsTUFJQTZDLEVBQUEsRUFBQTdDLEtBQUE2QyxFQUFBN0MsS0FBQVosUUFBQVksS0FBQTZDLElBS0FDLFVBQUEsU0FBQUMsR0FHQSxJQUFBQyxFQUFBYixFQUFBYyxNQUFBakQsS0FBQTJDLGNBQUFJLEdBTUEsT0FIQUMsRUFBQUUsV0FBQWxELEtBR0FnRCxHQUlBRyxLQUFBLFNBQUFDLEdBQ0EsT0FBQWpCLEVBQUFnQixLQUFBbkQsS0FBQW9ELElBR0FsRixJQUFBLFNBQUFrRixHQUNBLE9BQUFwRCxLQUFBOEMsVUFBQVgsRUFBQWpFLElBQUE4QixLQUFBLFNBQUFxRCxFQUFBNUgsR0FDQSxPQUFBMkgsRUFBQXhILEtBQUF5SCxFQUFBNUgsRUFBQTRILE9BSUFoRCxNQUFBLFdBQ0EsT0FBQUwsS0FBQThDLFVBQUF6QyxFQUFBaUQsTUFBQXRELEtBQUFiLGFBR0FvRSxNQUFBLFdBQ0EsT0FBQXZELEtBQUF3RCxHQUFBLElBR0FDLEtBQUEsV0FDQSxPQUFBekQsS0FBQXdELElBQUEsSUFHQUEsR0FBQSxTQUFBL0gsR0FDQSxJQUFBaUksRUFBQTFELEtBQUFaLE9BQ0F1RSxHQUFBbEksS0FBQSxFQUFBaUksRUFBQSxHQUNBLE9BQUExRCxLQUFBOEMsVUFBQWEsR0FBQSxHQUFBQSxFQUFBRCxFQUFBLENBQUExRCxLQUFBMkQsSUFBQSxLQUdBQyxJQUFBLFdBQ0EsT0FBQTVELEtBQUFrRCxZQUFBbEQsS0FBQTJDLGVBS0FwQyxPQUNBc0QsS0FBQTNELEVBQUEyRCxLQUNBQyxPQUFBNUQsRUFBQTRELFFBR0EzQixFQUFBNEIsT0FBQTVCLEVBQUFHLEdBQUF5QixPQUFBLFdBQ0EsSUFBQUMsRUFBQWhJLEVBQUFxRixFQUFBNEMsRUFBQUMsRUFBQUMsRUFDQXhGLEVBQUFRLFVBQUEsT0FDQTFELEVBQUEsRUFDQTJELEVBQUFELFVBQUFDLE9BQ0FnRixHQUFBLEVBc0JBLElBbkJBLGtCQUFBekYsSUFDQXlGLEVBQUF6RixFQUdBQSxFQUFBUSxVQUFBMUQsSUFBQSxHQUNBQSxLQUlBLGlCQUFBa0QsR0FBQW9DLEVBQUFwQyxLQUNBQSxFQUFBLElBSUFsRCxJQUFBMkQsSUFDQVQsRUFBQXFCLEtBQ0F2RSxLQUdRQSxFQUFBMkQsRUFBWTNELElBR3BCLFVBQUF1SSxFQUFBN0UsVUFBQTFELElBR0EsSUFBQU8sS0FBQWdJLEVBQ0EzQyxFQUFBMUMsRUFBQTNDLEdBSUEyQyxLQUhBc0YsRUFBQUQsRUFBQWhJLE1BUUFvSSxHQUFBSCxJQUFBOUIsRUFBQWtDLGNBQUFKLEtBQ0FDLEVBQUFJLE1BQUFDLFFBQUFOLE1BRUFDLEdBQ0FBLEdBQUEsRUFDQUMsRUFBQTlDLEdBQUFpRCxNQUFBQyxRQUFBbEQsS0FBQSxJQUdBOEMsRUFBQTlDLEdBQUFjLEVBQUFrQyxjQUFBaEQsS0FBQSxHQUlBMUMsRUFBQTNDLEdBQUFtRyxFQUFBNEIsT0FBQUssRUFBQUQsRUFBQUYsU0FHS08sSUFBQVAsSUFDTHRGLEVBQUEzQyxHQUFBaUksSUFPQSxPQUFBdEYsR0FHQXdELEVBQUE0QixPQUFBLENBR0FVLFFBQUEsVUF2S0EsUUF1S0FDLEtBQUFDLFVBQUFDLFFBQUEsVUFHQUMsU0FBQSxFQUVBckYsTUFBQSxTQUFBc0YsR0FDQSxVQUFBaEYsTUFBQWdGLElBR0FDLEtBQUEsYUFFQVYsY0FBQSxTQUFBckQsR0FDQSxJQUFBZ0UsRUFBQUMsRUFJQSxTQUFBakUsR0FBQSxvQkFBQU4sRUFBQTlFLEtBQUFvRixRQUlBZ0UsRUFBQTdFLEVBQUFhLEtBU0EsbUJBREFpRSxFQUFBdEUsRUFBQS9FLEtBQUFvSixFQUFBLGdCQUFBQSxFQUFBckMsY0FDQS9CLEVBQUFoRixLQUFBcUosS0FBQXBFLElBR0FxRSxjQUFBLFNBQUFsRSxHQUlBLElBQUFoRixFQUVBLElBQUFBLEtBQUFnRixFQUNBLFNBRUEsVUFJQW1FLFdBQUEsU0FBQTNELEdBQ0FELEVBQUFDLElBR0EyQixLQUFBLFNBQUFuQyxFQUFBb0MsR0FDQSxJQUFBaEUsRUFBQTNELEVBQUEsRUFFQSxHQUFBZ0gsRUFBQXpCLEdBRUEsSUFEQTVCLEVBQUE0QixFQUFBNUIsT0FDVTNELEVBQUEyRCxJQUNWLElBQUFnRSxFQUFBeEgsS0FBQW9GLEVBQUF2RixLQUFBdUYsRUFBQXZGLElBRHNCQSxVQU10QixJQUFBQSxLQUFBdUYsRUFDQSxRQUFBb0MsRUFBQXhILEtBQUFvRixFQUFBdkYsS0FBQXVGLEVBQUF2RixJQUNBLE1BS0EsT0FBQXVGLEdBSUFvRSxLQUFBLFNBQUF2RCxHQUNBLGFBQUFBLEVBQ0EsSUFDQUEsRUFBQSxJQUFBK0MsUUFBQXBDLEVBQUEsS0FJQTZDLFVBQUEsU0FBQW5GLEVBQUFvRixHQUNBLElBQUF0QyxFQUFBc0MsR0FBQSxHQWFBLE9BWEEsTUFBQXBGLElBQ0F1QyxFQUFBdEcsT0FBQStELElBQ0FpQyxFQUFBYyxNQUFBRCxFQUNBLGlCQUFBOUMsRUFDQSxDQUFBQSxNQUdBSyxFQUFBM0UsS0FBQW9ILEVBQUE5QyxJQUlBOEMsR0FHQXVDLFFBQUEsU0FBQWxDLEVBQUFuRCxFQUFBekUsR0FDQSxhQUFBeUUsR0FBQSxFQUFBTSxFQUFBNUUsS0FBQXNFLEVBQUFtRCxFQUFBNUgsSUFLQXdILE1BQUEsU0FBQU0sRUFBQWlDLEdBS0EsSUFKQSxJQUFBOUIsR0FBQThCLEVBQUFwRyxPQUNBdUUsRUFBQSxFQUNBbEksRUFBQThILEVBQUFuRSxPQUVTdUUsRUFBQUQsRUFBU0MsSUFDbEJKLEVBQUE5SCxLQUFBK0osRUFBQTdCLEdBS0EsT0FGQUosRUFBQW5FLE9BQUEzRCxFQUVBOEgsR0FHQWtDLEtBQUEsU0FBQTFDLEVBQUFLLEVBQUFzQyxHQVNBLElBUkEsSUFDQUMsRUFBQSxHQUNBbEssRUFBQSxFQUNBMkQsRUFBQTJELEVBQUEzRCxPQUNBd0csR0FBQUYsRUFJU2pLLEVBQUEyRCxFQUFZM0QsS0FDckIySCxFQUFBTCxFQUFBdEgsUUFDQW1LLEdBQ0FELEVBQUFwRixLQUFBd0MsRUFBQXRILElBSUEsT0FBQWtLLEdBSUF6SCxJQUFBLFNBQUE2RSxFQUFBSyxFQUFBeUMsR0FDQSxJQUFBekcsRUFBQTFDLEVBQ0FqQixFQUFBLEVBQ0F1SCxFQUFBLEdBR0EsR0FBQVAsRUFBQU0sR0FFQSxJQURBM0QsRUFBQTJELEVBQUEzRCxPQUNVM0QsRUFBQTJELEVBQVkzRCxJQUd0QixPQUZBaUIsRUFBQTBHLEVBQUFMLEVBQUF0SCxLQUFBb0ssS0FHQTdDLEVBQUF6QyxLQUFBN0QsUUFNQSxJQUFBakIsS0FBQXNILEVBR0EsT0FGQXJHLEVBQUEwRyxFQUFBTCxFQUFBdEgsS0FBQW9LLEtBR0E3QyxFQUFBekMsS0FBQTdELEdBTUEsT0FBQTRELEVBQUFnRCxNQUFBLEdBQUFOLElBSUE4QyxLQUFBLEVBSUFoRixZQUdBLG1CQUFBdEUsU0FDQTJGLEVBQUFHLEdBQUE5RixPQUFBdUosVUFBQTdGLEVBQUExRCxPQUFBdUosV0FJQTVELEVBQUFnQixLQUFBLHVFQUFBOUUsTUFBQSxLQUNBLFNBQUE1QyxFQUFBTyxHQUNBeUUsRUFBQSxXQUFBekUsRUFBQSxLQUFBQSxFQUFBZ0ssZ0JBbUJBLElBQUFDOzs7Ozs7Ozs7OztBQVdBLFNBQUFsRyxHQUVBLElBQUF0RSxFQUNBcUYsRUFDQW9GLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBR0FDLEVBQ0EvRyxFQUNBZ0gsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQXBCLEVBQ0FxQixFQUdBdkMsRUFBQSxlQUFBd0MsS0FDQUMsRUFBQW5ILEVBQUFILFNBQ0F1SCxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQUMsS0FDQUMsRUFBQUQsS0FDQUUsRUFBQUYsS0FDQUcsRUFBQSxTQUFBQyxFQUFBQyxHQUlBLE9BSEFELElBQUFDLElBQ0FqQixHQUFBLEdBRUEsR0FJQS9GLEVBQUEsR0FBYXJELGVBQ2I0QyxFQUFBLEdBQ0EwSCxFQUFBMUgsRUFBQTBILElBQ0FDLEVBQUEzSCxFQUFBSyxLQUNBQSxFQUFBTCxFQUFBSyxLQUNBRixFQUFBSCxFQUFBRyxNQUdBRyxFQUFBLFNBQUFzSCxFQUFBekUsR0FHQSxJQUZBLElBQUE1SCxFQUFBLEVBQ0FpSSxFQUFBb0UsRUFBQTFJLE9BQ1MzRCxFQUFBaUksRUFBU2pJLElBQ2xCLEdBQUFxTSxFQUFBck0sS0FBQTRILEVBQ0EsT0FBQTVILEVBR0EsVUFHQXNNLEVBQUEsNkhBS0FDLEVBQUEsc0JBR0FDLEVBQUEsZ0NBR0FDLEVBQUEsTUFBQUYsRUFBQSxLQUFBQyxFQUFBLE9BQUFELEVBRUEsZ0JBQUFBLEVBRUEsMkRBQUFDLEVBQUEsT0FBQUQsRUFDQSxPQUVBRyxFQUFBLEtBQUFGLEVBQUEsd0ZBS0FDLEVBQUEsZUFNQUUsRUFBQSxJQUFBQyxPQUFBTCxFQUFBLFNBQ0F4RixFQUFBLElBQUE2RixPQUFBLElBQUFMLEVBQUEsOEJBQUFBLEVBQUEsVUFFQU0sRUFBQSxJQUFBRCxPQUFBLElBQUFMLEVBQUEsS0FBQUEsRUFBQSxLQUNBTyxFQUFBLElBQUFGLE9BQUEsSUFBQUwsRUFBQSxXQUFBQSxFQUFBLElBQUFBLEVBQUEsS0FFQVEsRUFBQSxJQUFBSCxPQUFBLElBQUFMLEVBQUEsaUJBQUFBLEVBQUEsWUFFQVMsRUFBQSxJQUFBSixPQUFBRixHQUNBTyxFQUFBLElBQUFMLE9BQUEsSUFBQUosRUFBQSxLQUVBVSxFQUFBLENBQ0FDLEdBQUEsSUFBQVAsT0FBQSxNQUFBSixFQUFBLEtBQ0FZLE1BQUEsSUFBQVIsT0FBQSxRQUFBSixFQUFBLEtBQ0FhLElBQUEsSUFBQVQsT0FBQSxLQUFBSixFQUFBLFNBQ0FjLEtBQUEsSUFBQVYsT0FBQSxJQUFBSCxHQUNBYyxPQUFBLElBQUFYLE9BQUEsSUFBQUYsR0FDQWMsTUFBQSxJQUFBWixPQUFBLHlEQUFBTCxFQUNBLCtCQUFBQSxFQUFBLGNBQUFBLEVBQ0EsYUFBQUEsRUFBQSxjQUNBa0IsS0FBQSxJQUFBYixPQUFBLE9BQUFOLEVBQUEsVUFHQW9CLGFBQUEsSUFBQWQsT0FBQSxJQUFBTCxFQUFBLG1EQUNBQSxFQUFBLG1CQUFBQSxFQUFBLHlCQUdBb0IsRUFBQSxzQ0FDQUMsRUFBQSxTQUVBQyxFQUFBLHlCQUdBQyxFQUFBLG1DQUVBQyxFQUFBLE9BSUFDLEVBQUEsSUFBQXBCLE9BQUEscUJBQTRDTCxFQUFBLE1BQUFBLEVBQUEsYUFDNUMwQixHQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQSxLQUFBRixFQUFBLE1BSUEsT0FBQUUsTUFBQUQsRUFDQUQsRUFDQUUsRUFBQSxFQUVBaE0sT0FBQUcsYUFBQTZMLEVBQUEsT0FFQWhNLE9BQUFHLGFBQUE2TCxHQUFBLGNBQUFBLEVBQUEsUUFLQUMsR0FBQSxzREFDQUMsR0FBQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFBLEVBR0EsT0FBQUQsRUFDQSxJQUlBQSxFQUFBNUosTUFBQSxXQUFBNEosRUFBQUUsV0FBQUYsRUFBQTdLLE9BQUEsR0FBQXNCLFNBQUEsUUFJQSxLQUFBdUosR0FPQUcsR0FBQSxXQUNBekQsS0FHQTBELEdBQUFDLEdBQ0EsU0FBQWpILEdBQ0EsV0FBQUEsRUFBQWtILFdBQUEsU0FBQWxILEdBQUEsVUFBQUEsSUFFQSxDQUFHbUgsSUFBQSxhQUFBQyxLQUFBLFdBSUgsSUFDQWxLLEVBQUErQyxNQUNBcEQsRUFBQUcsRUFBQXpFLEtBQUFzTCxFQUFBd0QsWUFDQXhELEVBQUF3RCxZQUlBeEssRUFBQWdILEVBQUF3RCxXQUFBdEwsUUFBQTZCLFNBQ0MsTUFBQTBKLEdBQ0RwSyxFQUFBLENBQVMrQyxNQUFBcEQsRUFBQWQsT0FHVCxTQUFBVCxFQUFBaU0sR0FDQS9DLEVBQUF2RSxNQUFBM0UsRUFBQTBCLEVBQUF6RSxLQUFBZ1AsS0FLQSxTQUFBak0sRUFBQWlNLEdBSUEsSUFIQSxJQUFBakgsRUFBQWhGLEVBQUFTLE9BQ0EzRCxFQUFBLEVBRUFrRCxFQUFBZ0YsS0FBQWlILEVBQUFuUCxPQUNBa0QsRUFBQVMsT0FBQXVFLEVBQUEsSUFLQSxTQUFBc0MsR0FBQTdELEVBQUFDLEVBQUFpRCxFQUFBdUYsR0FDQSxJQUFBaFAsRUFBQUosRUFBQTRILEVBQUF5SCxFQUFBQyxFQUFBQyxFQUFBQyxFQUNBQyxFQUFBN0ksS0FBQThJLGNBR0FsSyxFQUFBb0IsSUFBQXBCLFNBQUEsRUFLQSxHQUhBcUUsS0FBQSxHQUdBLGlCQUFBbEQsT0FDQSxJQUFBbkIsR0FBQSxJQUFBQSxHQUFBLEtBQUFBLEVBRUEsT0FBQXFFLEVBSUEsSUFBQXVGLEtBRUF4SSxJQUFBOEksZUFBQTlJLEVBQUE2RSxLQUFBdEgsR0FDQStHLEVBQUF0RSxHQUVBQSxLQUFBekMsRUFFQWlILEdBQUEsQ0FJQSxRQUFBNUYsSUFBQThKLEVBQUF4QixFQUFBNkIsS0FBQWhKLElBR0EsR0FBQXZHLEVBQUFrUCxFQUFBLElBR0EsT0FBQTlKLEVBQUEsQ0FDQSxLQUFBb0MsRUFBQWhCLEVBQUFnSixlQUFBeFAsSUFVQSxPQUFBeUosRUFMQSxHQUFBakMsRUFBQWlJLEtBQUF6UCxFQUVBLE9BREF5SixFQUFBL0UsS0FBQThDLEdBQ0FpQyxPQVlBLEdBQUE0RixJQUFBN0gsRUFBQTZILEVBQUFHLGVBQUF4UCxLQUNBbUwsRUFBQTNFLEVBQUFnQixJQUNBQSxFQUFBaUksS0FBQXpQLEVBR0EsT0FEQXlKLEVBQUEvRSxLQUFBOEMsR0FDQWlDLE1BS0ssSUFBQXlGLEVBQUEsR0FFTCxPQURBeEssRUFBQStDLE1BQUFnQyxFQUFBakQsRUFBQWtKLHFCQUFBbkosSUFDQWtELEVBR0ssSUFBQXpKLEVBQUFrUCxFQUFBLEtBQUFqSyxFQUFBMEssd0JBQ0xuSixFQUFBbUosdUJBR0EsT0FEQWpMLEVBQUErQyxNQUFBZ0MsRUFBQWpELEVBQUFtSix1QkFBQTNQLElBQ0F5SixFQUtBLEdBQUF4RSxFQUFBMkssTUFDQWpFLEVBQUFwRixFQUFBLFFBQ0EwRSxNQUFBNEUsS0FBQXRKLElBQUEsQ0FFQSxPQUFBbkIsRUFDQWlLLEVBQUE3SSxFQUNBNEksRUFBQTdJLE9BTUssY0FBQUMsRUFBQXNKLFNBQUEzRixjQUFBLENBWUwsS0FUQThFLEVBQUF6SSxFQUFBdUosYUFBQSxPQUNBZCxJQUFBbEcsUUFBQW1GLEdBQUFDLElBRUEzSCxFQUFBd0osYUFBQSxLQUFBZixFQUFBckcsR0FLQWhKLEdBREF1UCxFQUFBM0UsRUFBQWpFLElBQ0FoRCxPQUNBM0QsS0FDQXVQLEVBQUF2UCxHQUFBLElBQUFxUCxFQUFBLElBQUFnQixHQUFBZCxFQUFBdlAsSUFFQXdQLEVBQUFELEVBQUE3TSxLQUFBLEtBR0ErTSxFQUFBMUIsRUFBQWtDLEtBQUF0SixJQUFBMkosR0FBQTFKLEVBQUFMLGFBQ0FLLEVBR0EsR0FBQTRJLEVBQ0EsSUFJQSxPQUhBMUssRUFBQStDLE1BQUFnQyxFQUNBNEYsRUFBQWMsaUJBQUFmLElBRUEzRixFQUNNLE1BQUEyRyxJQUNBLFFBQ05uQixJQUFBckcsR0FDQXBDLEVBQUE2SixnQkFBQSxRQVNBLE9BQUEzRixFQUFBbkUsRUFBQXdDLFFBQUFwQyxFQUFBLE1BQUFILEVBQUFpRCxFQUFBdUYsR0FTQSxTQUFBdkQsS0FDQSxJQUFBOUksRUFBQSxHQVVBLE9BUkEsU0FBQTJOLEVBQUFuUCxFQUFBTixHQU1BLE9BSkE4QixFQUFBK0IsS0FBQXZELEVBQUEsS0FBQWtKLEVBQUFrRyxvQkFFQUQsRUFBQTNOLEVBQUE2TixTQUVBRixFQUFBblAsRUFBQSxLQUFBTixHQVNBLFNBQUE0UCxHQUFBaEssR0FFQSxPQURBQSxFQUFBbUMsSUFBQSxFQUNBbkMsRUFPQSxTQUFBaUssR0FBQWpLLEdBQ0EsSUFBQWtLLEVBQUE1TSxFQUFBZ0MsY0FBQSxZQUVBLElBQ0EsUUFBQVUsRUFBQWtLLEdBQ0UsTUFBQTdCLEdBQ0YsU0FDRSxRQUVGNkIsRUFBQXhLLFlBQ0F3SyxFQUFBeEssV0FBQUMsWUFBQXVLLEdBR0FBLEVBQUEsTUFTQSxTQUFBQyxHQUFBQyxFQUFBQyxHQUlBLElBSEEsSUFBQXpNLEVBQUF3TSxFQUFBck8sTUFBQSxLQUNBNUMsRUFBQXlFLEVBQUFkLE9BRUEzRCxLQUNBeUssRUFBQTBHLFdBQUExTSxFQUFBekUsSUFBQWtSLEVBVUEsU0FBQUUsR0FBQW5GLEVBQUFDLEdBQ0EsSUFBQW1GLEVBQUFuRixHQUFBRCxFQUNBcUYsRUFBQUQsR0FBQSxJQUFBcEYsRUFBQXpHLFVBQUEsSUFBQTBHLEVBQUExRyxVQUNBeUcsRUFBQXNGLFlBQUFyRixFQUFBcUYsWUFHQSxHQUFBRCxFQUNBLE9BQUFBLEVBSUEsR0FBQUQsRUFDQSxLQUFBQSxJQUFBRyxhQUNBLEdBQUFILElBQUFuRixFQUNBLFNBS0EsT0FBQUQsRUFBQSxLQU9BLFNBQUF3RixHQUFBOUwsR0FDQSxnQkFBQWlDLEdBRUEsZ0JBREFBLEVBQUFzSSxTQUFBM0YsZUFDQTNDLEVBQUFqQyxVQVFBLFNBQUErTCxHQUFBL0wsR0FDQSxnQkFBQWlDLEdBQ0EsSUFBQXJILEVBQUFxSCxFQUFBc0ksU0FBQTNGLGNBQ0EsaUJBQUFoSyxHQUFBLFdBQUFBLElBQUFxSCxFQUFBakMsVUFRQSxTQUFBZ00sR0FBQTdDLEdBR0EsZ0JBQUFsSCxHQUtBLGVBQUFBLEVBU0FBLEVBQUFyQixhQUFBLElBQUFxQixFQUFBa0gsU0FHQSxVQUFBbEgsRUFDQSxVQUFBQSxFQUFBckIsV0FDQXFCLEVBQUFyQixXQUFBdUksYUFFQWxILEVBQUFrSCxhQU1BbEgsRUFBQWdLLGFBQUE5QyxHQUlBbEgsRUFBQWdLLGNBQUE5QyxHQUNBRixHQUFBaEgsS0FBQWtILEVBR0FsSCxFQUFBa0gsYUFLRyxVQUFBbEgsR0FDSEEsRUFBQWtILGNBWUEsU0FBQStDLEdBQUFoTCxHQUNBLE9BQUFnSyxHQUFBLFNBQUFpQixHQUVBLE9BREFBLEtBQ0FqQixHQUFBLFNBQUF6QixFQUFBbEYsR0FNQSxJQUxBLElBQUFoQyxFQUNBNkosRUFBQWxMLEVBQUEsR0FBQXVJLEVBQUF6TCxPQUFBbU8sR0FDQTlSLEVBQUErUixFQUFBcE8sT0FHQTNELEtBQ0FvUCxFQUFBbEgsRUFBQTZKLEVBQUEvUixNQUNBb1AsRUFBQWxILEtBQUFnQyxFQUFBaEMsR0FBQWtILEVBQUFsSCxTQVlBLFNBQUFvSSxHQUFBMUosR0FDQSxPQUFBQSxRQUFBLElBQUFBLEVBQUFrSixzQkFBQWxKLEVBaWpDQSxJQUFBNUcsS0E3aUNBcUYsRUFBQW1GLEdBQUFuRixRQUFBLEdBT0FzRixFQUFBSCxHQUFBRyxNQUFBLFNBQUEvQyxHQUdBLElBQUFvSyxFQUFBcEssTUFBQThILGVBQUE5SCxHQUFBb0ssZ0JBQ0EsUUFBQUEsR0FBQSxTQUFBQSxFQUFBOUIsVUFRQWhGLEVBQUFWLEdBQUFVLFlBQUEsU0FBQWpGLEdBQ0EsSUFBQWdNLEVBQUFDLEVBQ0FsTSxFQUFBQyxJQUFBeUosZUFBQXpKLEVBQUF3RixFQUdBLE9BQUF6RixJQUFBN0IsR0FBQSxJQUFBNkIsRUFBQVIsVUFBQVEsRUFBQWdNLGlCQU1BN0csR0FEQWhILEVBQUE2QixHQUNBZ00sZ0JBQ0E1RyxHQUFBVCxFQUFBeEcsR0FJQXNILElBQUF0SCxJQUNBK04sRUFBQS9OLEVBQUFnTyxjQUFBRCxFQUFBRSxNQUFBRixJQUdBQSxFQUFBRyxpQkFDQUgsRUFBQUcsaUJBQUEsU0FBQTFELElBQUEsR0FHR3VELEVBQUFJLGFBQ0hKLEVBQUFJLFlBQUEsV0FBQTNELEtBVUF0SixFQUFBb0gsV0FBQXFFLEdBQUEsU0FBQUMsR0FFQSxPQURBQSxFQUFBd0IsVUFBQSxLQUNBeEIsRUFBQVosYUFBQSxlQU9BOUssRUFBQXlLLHFCQUFBZ0IsR0FBQSxTQUFBQyxHQUVBLE9BREFBLEVBQUF6SyxZQUFBbkMsRUFBQXFPLGNBQUEsTUFDQXpCLEVBQUFqQixxQkFBQSxLQUFBbk0sU0FJQTBCLEVBQUEwSyx1QkFBQWxDLEVBQUFvQyxLQUFBOUwsRUFBQTRMLHdCQU1BMUssRUFBQW9OLFFBQUEzQixHQUFBLFNBQUFDLEdBRUEsT0FEQTVGLEVBQUE3RSxZQUFBeUssR0FBQWxCLEdBQUE3RyxHQUNBN0UsRUFBQXVPLG9CQUFBdk8sRUFBQXVPLGtCQUFBMUosR0FBQXJGLFNBSUEwQixFQUFBb04sU0FDQWhJLEVBQUFrSSxPQUFBLFlBQUE5QyxHQUNBLElBQUErQyxFQUFBL0MsRUFBQTFHLFFBQUE2RSxFQUFBQyxJQUNBLGdCQUFBckcsR0FDQSxPQUFBQSxFQUFBdUksYUFBQSxRQUFBeUMsSUFHQW5JLEVBQUFvSSxLQUFBLFlBQUFoRCxFQUFBakosR0FDQSxZQUFBQSxFQUFBZ0osZ0JBQUF4RSxFQUFBLENBQ0EsSUFBQXhELEVBQUFoQixFQUFBZ0osZUFBQUMsR0FDQSxPQUFBakksRUFBQSxDQUFBQSxHQUFBLE9BSUE2QyxFQUFBa0ksT0FBQSxZQUFBOUMsR0FDQSxJQUFBK0MsRUFBQS9DLEVBQUExRyxRQUFBNkUsRUFBQUMsSUFDQSxnQkFBQXJHLEdBQ0EsSUFBQTNCLE9BQUEsSUFBQTJCLEVBQUFrTCxrQkFDQWxMLEVBQUFrTCxpQkFBQSxNQUNBLE9BQUE3TSxLQUFBaEYsUUFBQTJSLElBTUFuSSxFQUFBb0ksS0FBQSxZQUFBaEQsRUFBQWpKLEdBQ0EsWUFBQUEsRUFBQWdKLGdCQUFBeEUsRUFBQSxDQUNBLElBQUFuRixFQUFBakcsRUFBQXNILEVBQ0FNLEVBQUFoQixFQUFBZ0osZUFBQUMsR0FFQSxHQUFBakksRUFBQSxDQUlBLElBREEzQixFQUFBMkIsRUFBQWtMLGlCQUFBLFFBQ0E3TSxFQUFBaEYsUUFBQTRPLEVBQ0EsT0FBQWpJLEdBTUEsSUFGQU4sRUFBQVYsRUFBQThMLGtCQUFBN0MsR0FDQTdQLEVBQUEsRUFDQTRILEVBQUFOLEVBQUF0SCxNQUVBLElBREFpRyxFQUFBMkIsRUFBQWtMLGlCQUFBLFFBQ0E3TSxFQUFBaEYsUUFBQTRPLEVBQ0EsT0FBQWpJLEdBS0EsWUFNQTZDLEVBQUFvSSxLQUFBLElBQUF4TixFQUFBeUsscUJBQ0EsU0FBQWlELEVBQUFuTSxHQUNBLGdCQUFBQSxFQUFBa0oscUJBQ0FsSixFQUFBa0oscUJBQUFpRCxHQUdJMU4sRUFBQTJLLElBQ0pwSixFQUFBMkosaUJBQUF3QyxRQURJLEdBS0osU0FBQUEsRUFBQW5NLEdBQ0EsSUFBQWdCLEVBQ0FvTCxFQUFBLEdBQ0FoVCxFQUFBLEVBRUE2SixFQUFBakQsRUFBQWtKLHFCQUFBaUQsR0FHQSxTQUFBQSxFQUFBLENBQ0EsS0FBQW5MLEVBQUFpQyxFQUFBN0osTUFDQSxJQUFBNEgsRUFBQXBDLFVBQ0F3TixFQUFBbE8sS0FBQThDLEdBSUEsT0FBQW9MLEVBRUEsT0FBQW5KLEdBSUFZLEVBQUFvSSxLQUFBLE1BQUF4TixFQUFBMEssd0JBQUEsU0FBQXdDLEVBQUEzTCxHQUNBLFlBQUFBLEVBQUFtSix3QkFBQTNFLEVBQ0EsT0FBQXhFLEVBQUFtSix1QkFBQXdDLElBVUFqSCxFQUFBLEdBT0FELEVBQUEsSUFFQWhHLEVBQUEySyxJQUFBbkMsRUFBQW9DLEtBQUE5TCxFQUFBb00scUJBR0FPLEdBQUEsU0FBQUMsR0FNQTVGLEVBQUE3RSxZQUFBeUssR0FBQWtDLFVBQUEsVUFBQWpLLEVBQUEscUJBQ0FBLEVBQUEsa0VBT0ErSCxFQUFBUixpQkFBQSx3QkFBQTVNLFFBQ0EwSCxFQUFBdkcsS0FBQSxTQUFBeUgsRUFBQSxnQkFLQXdFLEVBQUFSLGlCQUFBLGNBQUE1TSxRQUNBMEgsRUFBQXZHLEtBQUEsTUFBQXlILEVBQUEsYUFBQUQsRUFBQSxLQUlBeUUsRUFBQVIsaUJBQUEsUUFBQXZILEVBQUEsTUFBQXJGLFFBQ0EwSCxFQUFBdkcsS0FBQSxNQU1BaU0sRUFBQVIsaUJBQUEsWUFBQTVNLFFBQ0EwSCxFQUFBdkcsS0FBQSxZQU1BaU0sRUFBQVIsaUJBQUEsS0FBQXZILEVBQUEsTUFBQXJGLFFBQ0EwSCxFQUFBdkcsS0FBQSxjQUlBZ00sR0FBQSxTQUFBQyxHQUNBQSxFQUFBa0MsVUFBQSxvRkFLQSxJQUFBQyxFQUFBL08sRUFBQWdDLGNBQUEsU0FDQStNLEVBQUE5QyxhQUFBLGlCQUNBVyxFQUFBekssWUFBQTRNLEdBQUE5QyxhQUFBLFlBSUFXLEVBQUFSLGlCQUFBLFlBQUE1TSxRQUNBMEgsRUFBQXZHLEtBQUEsT0FBQXlILEVBQUEsZUFLQSxJQUFBd0UsRUFBQVIsaUJBQUEsWUFBQTVNLFFBQ0EwSCxFQUFBdkcsS0FBQSx3QkFLQXFHLEVBQUE3RSxZQUFBeUssR0FBQWpDLFVBQUEsRUFDQSxJQUFBaUMsRUFBQVIsaUJBQUEsYUFBQTVNLFFBQ0EwSCxFQUFBdkcsS0FBQSx3QkFJQWlNLEVBQUFSLGlCQUFBLFFBQ0FsRixFQUFBdkcsS0FBQSxZQUlBTyxFQUFBOE4sZ0JBQUF0RixFQUFBb0MsS0FBQS9GLEVBQUFpQixFQUFBakIsU0FDQWlCLEVBQUFpSSx1QkFDQWpJLEVBQUFrSSxvQkFDQWxJLEVBQUFtSSxrQkFDQW5JLEVBQUFvSSxxQkFFQXpDLEdBQUEsU0FBQUMsR0FHQTFMLEVBQUFtTyxrQkFBQXRKLEVBQUEvSixLQUFBNFEsRUFBQSxLQUlBN0csRUFBQS9KLEtBQUE0USxFQUFBLGFBQ0F6RixFQUFBeEcsS0FBQSxLQUFBNEgsS0FJQXJCLElBQUExSCxRQUFBLElBQUFpSixPQUFBdkIsRUFBQTNJLEtBQUEsTUFDQTRJLElBQUEzSCxRQUFBLElBQUFpSixPQUFBdEIsRUFBQTVJLEtBQUEsTUFJQXVQLEVBQUFwRSxFQUFBb0MsS0FBQTlFLEVBQUFzSSx5QkFLQWxJLEVBQUEwRyxHQUFBcEUsRUFBQW9DLEtBQUE5RSxFQUFBSSxVQUNBLFNBQUFVLEVBQUFDLEdBQ0EsSUFBQXdILEVBQUEsSUFBQXpILEVBQUF6RyxTQUFBeUcsRUFBQStGLGdCQUFBL0YsRUFDQTBILEVBQUF6SCxLQUFBM0YsV0FDQSxPQUFBMEYsSUFBQTBILFNBQUEsSUFBQUEsRUFBQW5PLFlBQ0FrTyxFQUFBbkksU0FDQW1JLEVBQUFuSSxTQUFBb0ksR0FDQTFILEVBQUF3SCx5QkFBQSxHQUFBeEgsRUFBQXdILHdCQUFBRSxNQUdBLFNBQUExSCxFQUFBQyxHQUNBLEdBQUFBLEVBQ0EsS0FBQUEsSUFBQTNGLFlBQ0EsR0FBQTJGLElBQUFELEVBQ0EsU0FJQSxVQU9BRCxFQUFBaUcsRUFDQSxTQUFBaEcsRUFBQUMsR0FHQSxHQUFBRCxJQUFBQyxFQUVBLE9BREFqQixHQUFBLEVBQ0EsRUFJQSxJQUFBMkksR0FBQTNILEVBQUF3SCx5QkFBQXZILEVBQUF1SCx3QkFDQSxPQUFBRyxJQVlBLEdBUEFBLEdBQUEzSCxFQUFBeUQsZUFBQXpELE1BQUFDLEVBQUF3RCxlQUFBeEQsR0FDQUQsRUFBQXdILHdCQUFBdkgsR0FHQSxLQUlBN0csRUFBQXdPLGNBQUEzSCxFQUFBdUgsd0JBQUF4SCxLQUFBMkgsRUFHQTNILElBQUE5SCxHQUFBOEgsRUFBQXlELGdCQUFBakUsR0FBQUYsRUFBQUUsRUFBQVEsSUFDQSxFQUVBQyxJQUFBL0gsR0FBQStILEVBQUF3RCxnQkFBQWpFLEdBQUFGLEVBQUFFLEVBQUFTLEdBQ0EsRUFJQWxCLEVBQ0FqRyxFQUFBaUcsRUFBQWlCLEdBQUFsSCxFQUFBaUcsRUFBQWtCLEdBQ0EsRUFHQSxFQUFBMEgsR0FBQSxNQUVBLFNBQUEzSCxFQUFBQyxHQUVBLEdBQUFELElBQUFDLEVBRUEsT0FEQWpCLEdBQUEsRUFDQSxFQUdBLElBQUFvRyxFQUNBclIsRUFBQSxFQUNBOFQsRUFBQTdILEVBQUExRixXQUNBb04sRUFBQXpILEVBQUEzRixXQUNBd04sRUFBQSxDQUFBOUgsR0FDQStILEVBQUEsQ0FBQTlILEdBR0EsSUFBQTRILElBQUFILEVBQ0EsT0FBQTFILElBQUE5SCxHQUFBLEVBQ0ErSCxJQUFBL0gsRUFBQSxFQUNBMlAsR0FBQSxFQUNBSCxFQUFBLEVBQ0EzSSxFQUNBakcsRUFBQWlHLEVBQUFpQixHQUFBbEgsRUFBQWlHLEVBQUFrQixHQUNBLEVBR0csR0FBQTRILElBQUFILEVBQ0gsT0FBQXZDLEdBQUFuRixFQUFBQyxHQUtBLElBREFtRixFQUFBcEYsRUFDQW9GLElBQUE5SyxZQUNBd04sRUFBQUUsUUFBQTVDLEdBR0EsSUFEQUEsRUFBQW5GLEVBQ0FtRixJQUFBOUssWUFDQXlOLEVBQUFDLFFBQUE1QyxHQUlBLEtBQUEwQyxFQUFBL1QsS0FBQWdVLEVBQUFoVSxJQUNBQSxJQUdBLE9BQUFBLEVBRUFvUixHQUFBMkMsRUFBQS9ULEdBQUFnVSxFQUFBaFUsSUFHQStULEVBQUEvVCxLQUFBeUwsR0FBQSxFQUNBdUksRUFBQWhVLEtBQUF5TCxFQUFBLEVBQ0EsR0FHQXRILEdBM1lBQSxHQThZQXFHLEdBQUFOLFFBQUEsU0FBQWdLLEVBQUFDLEdBQ0EsT0FBQTNKLEdBQUEwSixFQUFBLFVBQUFDLElBR0EzSixHQUFBMkksZ0JBQUEsU0FBQXZMLEVBQUFzTSxHQVNBLElBUEF0TSxFQUFBOEgsZUFBQTlILEtBQUF6RCxHQUNBK0csRUFBQXRELEdBSUFzTSxJQUFBL0ssUUFBQTRELEVBQUEsVUFFQTFILEVBQUE4TixpQkFBQS9ILElBQ0FXLEVBQUFtSSxFQUFBLFFBQ0E1SSxNQUFBMkUsS0FBQWlFLE9BQ0E3SSxNQUFBNEUsS0FBQWlFLElBRUEsSUFDQSxJQUFBM00sRUFBQTJDLEVBQUEvSixLQUFBeUgsRUFBQXNNLEdBR0EsR0FBQTNNLEdBQUFsQyxFQUFBbU8sbUJBR0E1TCxFQUFBekQsVUFBQSxLQUFBeUQsRUFBQXpELFNBQUFxQixTQUNBLE9BQUErQixFQUVHLE1BQUEySCxJQUdILE9BQUExRSxHQUFBMEosRUFBQS9QLEVBQUEsTUFBQXlELElBQUFqRSxPQUFBLEdBR0E2RyxHQUFBZSxTQUFBLFNBQUEzRSxFQUFBZ0IsR0FLQSxPQUhBaEIsRUFBQThJLGVBQUE5SSxLQUFBekMsR0FDQStHLEVBQUF0RSxHQUVBMkUsRUFBQTNFLEVBQUFnQixJQUdBNEMsR0FBQTRKLEtBQUEsU0FBQXhNLEVBQUFySCxJQUVBcUgsRUFBQThILGVBQUE5SCxLQUFBekQsR0FDQStHLEVBQUF0RCxHQUdBLElBQUFmLEVBQUE0RCxFQUFBMEcsV0FBQTVRLEVBQUFnSyxlQUVBaEgsRUFBQXNELEdBQUEzQixFQUFBL0UsS0FBQXNLLEVBQUEwRyxXQUFBNVEsRUFBQWdLLGVBQ0ExRCxFQUFBZSxFQUFBckgsR0FBQTZLLFFBQ0FyQyxFQUVBLFlBQUFBLElBQUF4RixFQUNBQSxFQUNBOEIsRUFBQW9ILGFBQUFyQixFQUNBeEQsRUFBQXVJLGFBQUE1UCxJQUNBZ0QsRUFBQXFFLEVBQUFrTCxpQkFBQXZTLEtBQUFnRCxFQUFBOFEsVUFDQTlRLEVBQUF0QyxNQUNBLE1BR0F1SixHQUFBOEosT0FBQSxTQUFBQyxHQUNBLE9BQUFBLEVBQUEsSUFBQXBMLFFBQUFtRixHQUFBQyxLQUdBL0QsR0FBQXpHLE1BQUEsU0FBQXNGLEdBQ0EsVUFBQWhGLE1BQUEsMENBQUFnRixJQU9BbUIsR0FBQWdLLFdBQUEsU0FBQTNLLEdBQ0EsSUFBQWpDLEVBQ0E2TSxFQUFBLEdBQ0F2TSxFQUFBLEVBQ0FsSSxFQUFBLEVBT0EsR0FKQWlMLEdBQUE1RixFQUFBcVAsaUJBQ0ExSixHQUFBM0YsRUFBQXNQLFlBQUE5SyxFQUFBakYsTUFBQSxHQUNBaUYsRUFBQXpCLEtBQUE0RCxHQUVBZixFQUFBLENBQ0EsS0FBQXJELEVBQUFpQyxFQUFBN0osTUFDQTRILElBQUFpQyxFQUFBN0osS0FDQWtJLEVBQUF1TSxFQUFBM1AsS0FBQTlFLElBR0EsS0FBQWtJLEtBQ0EyQixFQUFBeEIsT0FBQW9NLEVBQUF2TSxHQUFBLEdBUUEsT0FGQThDLEVBQUEsS0FFQW5CLEdBT0FhLEVBQUFGLEdBQUFFLFFBQUEsU0FBQTlDLEdBQ0EsSUFBQTNCLEVBQ0FzQixFQUFBLEdBQ0F2SCxFQUFBLEVBQ0F3RixFQUFBb0MsRUFBQXBDLFNBRUEsR0FBQUEsR0FNRSxPQUFBQSxHQUFBLElBQUFBLEdBQUEsS0FBQUEsRUFBQSxDQUdGLG9CQUFBb0MsRUFBQWdOLFlBQ0EsT0FBQWhOLEVBQUFnTixZQUdBLElBQUFoTixJQUFBaU4sV0FBZ0NqTixFQUFNQSxJQUFBNEosWUFDdENqSyxHQUFBbUQsRUFBQTlDLFFBR0UsT0FBQXBDLEdBQUEsSUFBQUEsRUFDRixPQUFBb0MsRUFBQWtOLGVBaEJBLEtBQUE3TyxFQUFBMkIsRUFBQTVILE1BRUF1SCxHQUFBbUQsRUFBQXpFLEdBa0JBLE9BQUFzQixJQUdBa0QsRUFBQUQsR0FBQXVLLFVBQUEsQ0FHQXBFLFlBQUEsR0FFQXFFLGFBQUFuRSxHQUVBdkIsTUFBQXBDLEVBRUFpRSxXQUFBLEdBRUEwQixLQUFBLEdBRUFvQyxTQUFBLENBQ0FDLElBQUEsQ0FBUW5HLElBQUEsYUFBQWpILE9BQUEsR0FDUnFOLElBQUEsQ0FBUXBHLElBQUEsY0FDUnFHLElBQUEsQ0FBUXJHLElBQUEsa0JBQUFqSCxPQUFBLEdBQ1J1TixJQUFBLENBQVF0RyxJQUFBLG9CQUdSdUcsVUFBQSxDQUNBaEksS0FBQSxTQUFBZ0MsR0FVQSxPQVRBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQW5HLFFBQUE2RSxFQUFBQyxJQUdBcUIsRUFBQSxJQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBQUEsRUFBQSxRQUFBbkcsUUFBQTZFLEVBQUFDLElBRUEsT0FBQXFCLEVBQUEsS0FDQUEsRUFBQSxPQUFBQSxFQUFBLFFBR0FBLEVBQUExSyxNQUFBLE1BR0E0SSxNQUFBLFNBQUE4QixHQTZCQSxPQWxCQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUEvRSxjQUVBLFFBQUErRSxFQUFBLEdBQUExSyxNQUFBLE1BRUEwSyxFQUFBLElBQ0E5RSxHQUFBekcsTUFBQXVMLEVBQUEsSUFLQUEsRUFBQSxLQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFBQUEsRUFBQSxtQkFBQUEsRUFBQSxZQUFBQSxFQUFBLEtBQ0FBLEVBQUEsS0FBQUEsRUFBQSxHQUFBQSxFQUFBLFlBQUFBLEVBQUEsS0FHSUEsRUFBQSxJQUNKOUUsR0FBQXpHLE1BQUF1TCxFQUFBLElBR0FBLEdBR0EvQixPQUFBLFNBQUErQixHQUNBLElBQUFpRyxFQUNBQyxHQUFBbEcsRUFBQSxJQUFBQSxFQUFBLEdBRUEsT0FBQXBDLEVBQUEsTUFBQStDLEtBQUFYLEVBQUEsSUFDQSxNQUlBQSxFQUFBLEdBQ0FBLEVBQUEsR0FBQUEsRUFBQSxJQUFBQSxFQUFBLE9BR0lrRyxHQUFBeEksRUFBQWlELEtBQUF1RixLQUVKRCxFQUFBM0ssRUFBQTRLLEdBQUEsTUFFQUQsRUFBQUMsRUFBQXpRLFFBQUEsSUFBQXlRLEVBQUE3UixPQUFBNFIsR0FBQUMsRUFBQTdSLFVBR0EyTCxFQUFBLEdBQUFBLEVBQUEsR0FBQTFLLE1BQUEsRUFBQTJRLEdBQ0FqRyxFQUFBLEdBQUFrRyxFQUFBNVEsTUFBQSxFQUFBMlEsSUFJQWpHLEVBQUExSyxNQUFBLFFBSUErTixPQUFBLENBRUF0RixJQUFBLFNBQUFvSSxHQUNBLElBQUF2RixFQUFBdUYsRUFBQXRNLFFBQUE2RSxFQUFBQyxJQUFBMUQsY0FDQSxZQUFBa0wsRUFDQSxXQUFnQixVQUNoQixTQUFBN04sR0FDQSxPQUFBQSxFQUFBc0ksVUFBQXRJLEVBQUFzSSxTQUFBM0YsZ0JBQUEyRixJQUlBOUMsTUFBQSxTQUFBbUYsR0FDQSxJQUFBbUQsRUFBQTlKLEVBQUEyRyxFQUFBLEtBRUEsT0FBQW1ELElBQ0FBLEVBQUEsSUFBQTlJLE9BQUEsTUFBQUwsRUFBQSxJQUFBZ0csRUFBQSxJQUFBaEcsRUFBQSxTQUNBWCxFQUFBMkcsRUFBQSxTQUFBM0ssR0FDQSxPQUFBOE4sRUFBQXpGLEtBQUEsaUJBQUFySSxFQUFBMkssV0FBQTNLLEVBQUEySyxnQkFBQSxJQUFBM0ssRUFBQXVJLGNBQUF2SSxFQUFBdUksYUFBQSxpQkFJQTdDLEtBQUEsU0FBQS9NLEVBQUFvVixFQUFBQyxHQUNBLGdCQUFBaE8sR0FDQSxJQUFBaU8sRUFBQXJMLEdBQUE0SixLQUFBeE0sRUFBQXJILEdBRUEsYUFBQXNWLEVBQ0EsT0FBQUYsR0FFQUEsSUFJQUUsR0FBQSxHQUVBLE1BQUFGLEVBQUFFLElBQUFELEVBQ0EsT0FBQUQsRUFBQUUsSUFBQUQsRUFDQSxPQUFBRCxFQUFBQyxHQUFBLElBQUFDLEVBQUE5USxRQUFBNlEsR0FDQSxPQUFBRCxFQUFBQyxHQUFBQyxFQUFBOVEsUUFBQTZRLElBQUEsRUFDQSxPQUFBRCxFQUFBQyxHQUFBQyxFQUFBalIsT0FBQWdSLEVBQUFqUyxVQUFBaVMsRUFDQSxPQUFBRCxHQUFBLElBQUFFLEVBQUExTSxRQUFBd0QsRUFBQSxVQUFBNUgsUUFBQTZRLElBQUEsRUFDQSxPQUFBRCxJQUFBRSxJQUFBRCxHQUFBQyxFQUFBalIsTUFBQSxFQUFBZ1IsRUFBQWpTLE9BQUEsS0FBQWlTLEVBQUEsUUFLQXBJLE1BQUEsU0FBQTdILEVBQUFtUSxFQUFBaEUsRUFBQWhLLEVBQUFFLEdBQ0EsSUFBQStOLEVBQUEsUUFBQXBRLEVBQUFmLE1BQUEsS0FDQW9SLEVBQUEsU0FBQXJRLEVBQUFmLE9BQUEsR0FDQXFSLEVBQUEsWUFBQUgsRUFFQSxXQUFBaE8sR0FBQSxJQUFBRSxFQUdBLFNBQUFKLEdBQ0EsUUFBQUEsRUFBQXJCLFlBR0EsU0FBQXFCLEVBQUFoQixFQUFBc1AsR0FDQSxJQUFBeEYsRUFBQXlGLEVBQUFDLEVBQUFuUSxFQUFBb1EsRUFBQUMsRUFDQXZILEVBQUFnSCxJQUFBQyxFQUFBLGdDQUNBTyxFQUFBM08sRUFBQXJCLFdBQ0FoRyxFQUFBMFYsR0FBQXJPLEVBQUFzSSxTQUFBM0YsY0FDQWlNLEdBQUFOLElBQUFELEVBQ0EzRSxHQUFBLEVBRUEsR0FBQWlGLEVBQUEsQ0FHQSxHQUFBUixFQUFBLENBQ0EsS0FBQWhILEdBQUEsQ0FFQSxJQURBOUksRUFBQTJCLEVBQ0EzQixJQUFBOEksSUFDQSxHQUFBa0gsRUFDQWhRLEVBQUFpSyxTQUFBM0YsZ0JBQUFoSyxFQUNBLElBQUEwRixFQUFBVCxTQUVBLFNBSUE4USxFQUFBdkgsRUFBQSxTQUFBcEosSUFBQTJRLEdBQUEsY0FFQSxTQU1BLEdBSEFBLEVBQUEsQ0FBQU4sRUFBQU8sRUFBQTFCLFdBQUEwQixFQUFBRSxXQUdBVCxHQUFBUSxHQWtCQSxJQUhBbEYsR0FEQStFLEdBREEzRixHQUhBeUYsR0FKQUMsR0FEQW5RLEVBQUFzUSxHQUNBdk4sS0FBQS9DLEVBQUErQyxHQUFBLEtBSUEvQyxFQUFBeVEsWUFDQU4sRUFBQW5RLEVBQUF5USxVQUFBLEtBRUEvUSxJQUFBLElBQ0EsS0FBQStGLEdBQUFnRixFQUFBLEtBQ0FBLEVBQUEsR0FDQXpLLEVBQUFvUSxHQUFBRSxFQUFBdEgsV0FBQW9ILEdBRUFwUSxJQUFBb1EsR0FBQXBRLEtBQUE4SSxLQUdBdUMsRUFBQStFLEVBQUEsSUFBQUMsRUFBQW5LLE9BR0EsT0FBQWxHLEVBQUFULFlBQUE4TCxHQUFBckwsSUFBQTJCLEVBQUEsQ0FDQXVPLEVBQUF4USxHQUFBLENBQUErRixFQUFBMkssRUFBQS9FLEdBQ0EsWUF1QkEsR0FqQkFrRixJQVlBbEYsRUFEQStFLEdBREEzRixHQUhBeUYsR0FKQUMsR0FEQW5RLEVBQUEyQixHQUNBb0IsS0FBQS9DLEVBQUErQyxHQUFBLEtBSUEvQyxFQUFBeVEsWUFDQU4sRUFBQW5RLEVBQUF5USxVQUFBLEtBRUEvUSxJQUFBLElBQ0EsS0FBQStGLEdBQUFnRixFQUFBLEtBTUEsSUFBQVksRUFFQSxNQUFBckwsSUFBQW9RLEdBQUFwUSxLQUFBOEksS0FDQXVDLEVBQUErRSxFQUFBLElBQUFDLEVBQUFuSyxVQUVBOEosRUFDQWhRLEVBQUFpSyxTQUFBM0YsZ0JBQUFoSyxFQUNBLElBQUEwRixFQUFBVCxjQUNBOEwsSUFHQWtGLEtBS0FMLEdBSkFDLEVBQUFuUSxFQUFBK0MsS0FBQS9DLEVBQUErQyxHQUFBLEtBSUEvQyxFQUFBeVEsWUFDQU4sRUFBQW5RLEVBQUF5USxVQUFBLEtBRUEvUSxHQUFBLENBQUErRixFQUFBNEYsSUFHQXJMLElBQUEyQixNQVVBLE9BREEwSixHQUFBdEosS0FDQUYsR0FBQXdKLEVBQUF4SixHQUFBLEdBQUF3SixFQUFBeEosR0FBQSxLQUtBeUYsT0FBQSxTQUFBb0osRUFBQTdFLEdBS0EsSUFBQThFLEVBQ0EvUCxFQUFBNEQsRUFBQWlDLFFBQUFpSyxJQUFBbE0sRUFBQW9NLFdBQUFGLEVBQUFwTSxnQkFDQUMsR0FBQXpHLE1BQUEsdUJBQUE0UyxHQUtBLE9BQUE5UCxFQUFBbUMsR0FDQW5DLEVBQUFpTCxHQUlBakwsRUFBQWxELE9BQUEsR0FDQWlULEVBQUEsQ0FBQUQsSUFBQSxHQUFBN0UsR0FDQXJILEVBQUFvTSxXQUFBaFYsZUFBQThVLEVBQUFwTSxlQUNBc0csR0FBQSxTQUFBekIsRUFBQWxGLEdBSUEsSUFIQSxJQUFBNE0sRUFDQUMsRUFBQWxRLEVBQUF1SSxFQUFBMEMsR0FDQTlSLEVBQUErVyxFQUFBcFQsT0FDQTNELEtBRUFvUCxFQURBMEgsRUFBQS9SLEVBQUFxSyxFQUFBMkgsRUFBQS9XLE9BQ0FrSyxFQUFBNE0sR0FBQUMsRUFBQS9XLE1BR0EsU0FBQTRILEdBQ0EsT0FBQWYsRUFBQWUsRUFBQSxFQUFBZ1AsS0FJQS9QLElBSUE2RixRQUFBLENBRUFzSyxJQUFBbkcsR0FBQSxTQUFBbEssR0FJQSxJQUFBdU0sRUFBQSxHQUNBckosRUFBQSxHQUNBb04sRUFBQXBNLEVBQUFsRSxFQUFBd0MsUUFBQXBDLEVBQUEsT0FFQSxPQUFBa1EsRUFBQWpPLEdBQ0E2SCxHQUFBLFNBQUF6QixFQUFBbEYsRUFBQXRELEVBQUFzUCxHQU1BLElBTEEsSUFBQXRPLEVBQ0FzUCxFQUFBRCxFQUFBN0gsRUFBQSxLQUFBOEcsRUFBQSxJQUNBbFcsRUFBQW9QLEVBQUF6TCxPQUdBM0QsTUFDQTRILEVBQUFzUCxFQUFBbFgsTUFDQW9QLEVBQUFwUCxLQUFBa0ssRUFBQWxLLEdBQUE0SCxNQUlBLFNBQUFBLEVBQUFoQixFQUFBc1AsR0FLQSxPQUpBaEQsRUFBQSxHQUFBdEwsRUFDQXFQLEVBQUEvRCxFQUFBLEtBQUFnRCxFQUFBck0sR0FFQXFKLEVBQUEsU0FDQXJKLEVBQUFzQyxTQUlBZ0wsSUFBQXRHLEdBQUEsU0FBQWxLLEdBQ0EsZ0JBQUFpQixHQUNBLE9BQUE0QyxHQUFBN0QsRUFBQWlCLEdBQUFqRSxPQUFBLEtBSUE0SCxTQUFBc0YsR0FBQSxTQUFBekssR0FFQSxPQURBQSxJQUFBK0MsUUFBQTZFLEVBQUFDLElBQ0EsU0FBQXJHLEdBQ0EsT0FBQUEsRUFBQWdOLGFBQUFoTixFQUFBd1AsV0FBQTFNLEVBQUE5QyxJQUFBN0MsUUFBQXFCLElBQUEsS0FXQWlSLEtBQUF4RyxHQUFBLFNBQUF3RyxHQU1BLE9BSkFwSyxFQUFBZ0QsS0FBQW9ILEdBQUEsS0FDQTdNLEdBQUF6RyxNQUFBLHFCQUFBc1QsR0FFQUEsSUFBQWxPLFFBQUE2RSxFQUFBQyxJQUFBMUQsY0FDQSxTQUFBM0MsR0FDQSxJQUFBMFAsRUFDQSxHQUNBLEdBQUFBLEVBQUFsTSxFQUNBeEQsRUFBQXlQLEtBQ0F6UCxFQUFBdUksYUFBQSxhQUFBdkksRUFBQXVJLGFBQUEsUUFHQSxPQURBbUgsSUFBQS9NLGlCQUNBOE0sR0FBQSxJQUFBQyxFQUFBdlMsUUFBQXNTLEVBQUEsWUFFS3pQLElBQUFyQixhQUFBLElBQUFxQixFQUFBcEMsVUFDTCxZQUtBdEMsT0FBQSxTQUFBMEUsR0FDQSxJQUFBMlAsRUFBQWpULEVBQUFrVCxVQUFBbFQsRUFBQWtULFNBQUFELEtBQ0EsT0FBQUEsS0FBQTNTLE1BQUEsS0FBQWdELEVBQUFpSSxJQUdBNEgsS0FBQSxTQUFBN1AsR0FDQSxPQUFBQSxJQUFBdUQsR0FHQXVNLE1BQUEsU0FBQTlQLEdBQ0EsT0FBQUEsSUFBQXpELEVBQUF3VCxpQkFBQXhULEVBQUF5VCxVQUFBelQsRUFBQXlULGdCQUFBaFEsRUFBQWpDLE1BQUFpQyxFQUFBaVEsT0FBQWpRLEVBQUFrUSxXQUlBQyxRQUFBcEcsSUFBQSxHQUNBN0MsU0FBQTZDLElBQUEsR0FFQXFHLFFBQUEsU0FBQXBRLEdBR0EsSUFBQXNJLEVBQUF0SSxFQUFBc0ksU0FBQTNGLGNBQ0EsZ0JBQUEyRixLQUFBdEksRUFBQW9RLFNBQUEsV0FBQTlILEtBQUF0SSxFQUFBcVEsVUFHQUEsU0FBQSxTQUFBclEsR0FPQSxPQUpBQSxFQUFBckIsWUFDQXFCLEVBQUFyQixXQUFBMlIsZUFHQSxJQUFBdFEsRUFBQXFRLFVBSUFFLE1BQUEsU0FBQXZRLEdBS0EsSUFBQUEsSUFBQWlOLFdBQWdDak4sRUFBTUEsSUFBQTRKLFlBQ3RDLEdBQUE1SixFQUFBcEMsU0FBQSxFQUNBLFNBR0EsVUFHQStRLE9BQUEsU0FBQTNPLEdBQ0EsT0FBQTZDLEVBQUFpQyxRQUFBLE1BQUE5RSxJQUlBd1EsT0FBQSxTQUFBeFEsR0FDQSxPQUFBZ0csRUFBQXFDLEtBQUFySSxFQUFBc0ksV0FHQWdELE1BQUEsU0FBQXRMLEdBQ0EsT0FBQStGLEVBQUFzQyxLQUFBckksRUFBQXNJLFdBR0FtSSxPQUFBLFNBQUF6USxHQUNBLElBQUFySCxFQUFBcUgsRUFBQXNJLFNBQUEzRixjQUNBLGdCQUFBaEssR0FBQSxXQUFBcUgsRUFBQWpDLE1BQUEsV0FBQXBGLEdBR0E2RixLQUFBLFNBQUF3QixHQUNBLElBQUF3TSxFQUNBLGdCQUFBeE0sRUFBQXNJLFNBQUEzRixlQUNBLFNBQUEzQyxFQUFBakMsT0FJQSxPQUFBeU8sRUFBQXhNLEVBQUF1SSxhQUFBLG1CQUFBaUUsRUFBQTdKLGdCQUlBekMsTUFBQStKLEdBQUEsV0FDQSxZQUdBN0osS0FBQTZKLEdBQUEsU0FBQUUsRUFBQXBPLEdBQ0EsT0FBQUEsRUFBQSxLQUdBb0UsR0FBQThKLEdBQUEsU0FBQUUsRUFBQXBPLEVBQUFtTyxHQUNBLE9BQUFBLEVBQUEsRUFBQUEsRUFBQW5PLEVBQUFtTyxLQUdBd0csS0FBQXpHLEdBQUEsU0FBQUUsRUFBQXBPLEdBRUEsSUFEQSxJQUFBM0QsRUFBQSxFQUNVQSxFQUFBMkQsRUFBWTNELEdBQUEsRUFDdEIrUixFQUFBak4sS0FBQTlFLEdBRUEsT0FBQStSLElBR0F3RyxJQUFBMUcsR0FBQSxTQUFBRSxFQUFBcE8sR0FFQSxJQURBLElBQUEzRCxFQUFBLEVBQ1VBLEVBQUEyRCxFQUFZM0QsR0FBQSxFQUN0QitSLEVBQUFqTixLQUFBOUUsR0FFQSxPQUFBK1IsSUFHQXlHLEdBQUEzRyxHQUFBLFNBQUFFLEVBQUFwTyxFQUFBbU8sR0FFQSxJQURBLElBQUE5UixFQUFBOFIsRUFBQSxFQUFBQSxFQUFBbk8sRUFBQW1PLElBQ1U5UixHQUFBLEdBQ1YrUixFQUFBak4sS0FBQTlFLEdBRUEsT0FBQStSLElBR0EwRyxHQUFBNUcsR0FBQSxTQUFBRSxFQUFBcE8sRUFBQW1PLEdBRUEsSUFEQSxJQUFBOVIsRUFBQThSLEVBQUEsRUFBQUEsRUFBQW5PLEVBQUFtTyxJQUNVOVIsRUFBQTJELEdBQ1ZvTyxFQUFBak4sS0FBQTlFLEdBRUEsT0FBQStSLE9BS0FyRixRQUFBLElBQUFqQyxFQUFBaUMsUUFBQSxHQUdBLENBQVlnTSxPQUFBLEVBQUFDLFVBQUEsRUFBQUMsTUFBQSxFQUFBQyxVQUFBLEVBQUFDLE9BQUEsR0FDWnJPLEVBQUFpQyxRQUFBMU0sR0FBQXlSLEdBQUF6UixHQUVBLElBQUFBLElBQUEsQ0FBWStZLFFBQUEsRUFBQUMsT0FBQSxHQUNadk8sRUFBQWlDLFFBQUExTSxHQUFBMFIsR0FBQTFSLEdBSUEsU0FBQTZXLE1BdUVBLFNBQUF4RyxHQUFBNEksR0FJQSxJQUhBLElBQUFqWixFQUFBLEVBQ0FpSSxFQUFBZ1IsRUFBQXRWLE9BQ0FnRCxFQUFBLEdBQ1EzRyxFQUFBaUksRUFBU2pJLElBQ2pCMkcsR0FBQXNTLEVBQUFqWixHQUFBaUIsTUFFQSxPQUFBMEYsRUFHQSxTQUFBa0ksR0FBQW9JLEVBQUFpQyxFQUFBQyxHQUNBLElBQUFwSyxFQUFBbUssRUFBQW5LLElBQ0FxSyxFQUFBRixFQUFBbEssS0FDQXpOLEVBQUE2WCxHQUFBckssRUFDQXNLLEVBQUFGLEdBQUEsZUFBQTVYLEVBQ0ErWCxFQUFBM04sSUFFQSxPQUFBdU4sRUFBQXBSLE1BRUEsU0FBQUYsRUFBQWhCLEVBQUFzUCxHQUNBLEtBQUF0TyxJQUFBbUgsSUFDQSxPQUFBbkgsRUFBQXBDLFVBQUE2VCxFQUNBLE9BQUFwQyxFQUFBclAsRUFBQWhCLEVBQUFzUCxHQUdBLFVBSUEsU0FBQXRPLEVBQUFoQixFQUFBc1AsR0FDQSxJQUFBcUQsRUFBQXBELEVBQUFDLEVBQ0FvRCxFQUFBLENBQUE5TixFQUFBNE4sR0FHQSxHQUFBcEQsR0FDQSxLQUFBdE8sSUFBQW1ILElBQ0EsUUFBQW5ILEVBQUFwQyxVQUFBNlQsSUFDQXBDLEVBQUFyUCxFQUFBaEIsRUFBQXNQLEdBQ0EsY0FLQSxLQUFBdE8sSUFBQW1ILElBQ0EsT0FBQW5ILEVBQUFwQyxVQUFBNlQsRUFPQSxHQUZBbEQsR0FKQUMsRUFBQXhPLEVBQUFvQixLQUFBcEIsRUFBQW9CLEdBQUEsS0FJQXBCLEVBQUE4TyxZQUFBTixFQUFBeE8sRUFBQThPLFVBQUEsSUFFQTBDLE9BQUF4UixFQUFBc0ksU0FBQTNGLGNBQ0EzQyxJQUFBbUgsSUFBQW5ILE1BQ08sS0FBQTJSLEVBQUFwRCxFQUFBNVUsS0FDUGdZLEVBQUEsS0FBQTdOLEdBQUE2TixFQUFBLEtBQUFELEVBR0EsT0FBQUUsRUFBQSxHQUFBRCxFQUFBLEdBTUEsR0FIQXBELEVBQUE1VSxHQUFBaVksRUFHQUEsRUFBQSxHQUFBdkMsRUFBQXJQLEVBQUFoQixFQUFBc1AsR0FDQSxTQU1BLFVBSUEsU0FBQXVELEdBQUFDLEdBQ0EsT0FBQUEsRUFBQS9WLE9BQUEsRUFDQSxTQUFBaUUsRUFBQWhCLEVBQUFzUCxHQUVBLElBREEsSUFBQWxXLEVBQUEwWixFQUFBL1YsT0FDQTNELEtBQ0EsSUFBQTBaLEVBQUExWixHQUFBNEgsRUFBQWhCLEVBQUFzUCxHQUNBLFNBR0EsVUFFQXdELEVBQUEsR0FZQSxTQUFBQyxHQUFBekMsRUFBQXpVLEVBQUFrUSxFQUFBL0wsRUFBQXNQLEdBT0EsSUFOQSxJQUFBdE8sRUFDQWdTLEVBQUEsR0FDQTVaLEVBQUEsRUFDQWlJLEVBQUFpUCxFQUFBdlQsT0FDQWtXLEVBQUEsTUFBQXBYLEVBRVF6QyxFQUFBaUksRUFBU2pJLEtBQ2pCNEgsRUFBQXNQLEVBQUFsWCxNQUNBMlMsTUFBQS9LLEVBQUFoQixFQUFBc1AsS0FDQTBELEVBQUE5VSxLQUFBOEMsR0FDQWlTLEdBQ0FwWCxFQUFBcUMsS0FBQTlFLEtBTUEsT0FBQTRaLEVBR0EsU0FBQUUsR0FBQXhFLEVBQUEzTyxFQUFBc1EsRUFBQThDLEVBQUFDLEVBQUFDLEdBT0EsT0FOQUYsTUFBQS9RLEtBQ0ErUSxFQUFBRCxHQUFBQyxJQUVBQyxNQUFBaFIsS0FDQWdSLEVBQUFGLEdBQUFFLEVBQUFDLElBRUFwSixHQUFBLFNBQUF6QixFQUFBdkYsRUFBQWpELEVBQUFzUCxHQUNBLElBQUFnRSxFQUFBbGEsRUFBQTRILEVBQ0F1UyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQXhRLEVBQUFsRyxPQUdBMkQsRUFBQThILEdBNUNBLFNBQUF6SSxFQUFBMlQsRUFBQXpRLEdBR0EsSUFGQSxJQUFBN0osRUFBQSxFQUNBaUksRUFBQXFTLEVBQUEzVyxPQUNRM0QsRUFBQWlJLEVBQVNqSSxJQUNqQndLLEdBQUE3RCxFQUFBMlQsRUFBQXRhLEdBQUE2SixHQUVBLE9BQUFBLEVBc0NBMFEsQ0FBQTVULEdBQUEsSUFBQUMsRUFBQXBCLFNBQUEsQ0FBQW9CLEtBQUEsSUFHQTRULEdBQUFsRixJQUFBbEcsR0FBQXpJLEVBRUFXLEVBREFxUyxHQUFBclMsRUFBQTZTLEVBQUE3RSxFQUFBMU8sRUFBQXNQLEdBR0F1RSxFQUFBeEQsRUFFQStDLElBQUE1SyxFQUFBa0csRUFBQStFLEdBQUFOLEdBR0EsR0FHQWxRLEVBQ0EyUSxFQVFBLEdBTEF2RCxHQUNBQSxFQUFBdUQsRUFBQUMsRUFBQTdULEVBQUFzUCxHQUlBNkQsRUFNQSxJQUxBRyxFQUFBUCxHQUFBYyxFQUFBTCxHQUNBTCxFQUFBRyxFQUFBLEdBQUF0VCxFQUFBc1AsR0FHQWxXLEVBQUFrYSxFQUFBdlcsT0FDQTNELE1BQ0E0SCxFQUFBc1MsRUFBQWxhLE1BQ0F5YSxFQUFBTCxFQUFBcGEsTUFBQXdhLEVBQUFKLEVBQUFwYSxJQUFBNEgsSUFLQSxHQUFBd0gsR0FDQSxHQUFBNEssR0FBQTFFLEVBQUEsQ0FDQSxHQUFBMEUsRUFBQSxDQUlBLElBRkFFLEVBQUEsR0FDQWxhLEVBQUF5YSxFQUFBOVcsT0FDQTNELE1BQ0E0SCxFQUFBNlMsRUFBQXphLEtBRUFrYSxFQUFBcFYsS0FBQTBWLEVBQUF4YSxHQUFBNEgsR0FHQW9TLEVBQUEsS0FBQVMsRUFBQSxHQUFBUCxFQUFBaEUsR0FLQSxJQURBbFcsRUFBQXlhLEVBQUE5VyxPQUNBM0QsTUFDQTRILEVBQUE2UyxFQUFBemEsTUFDQWthLEVBQUFGLEVBQUFqVixFQUFBcUssRUFBQXhILEdBQUF1UyxFQUFBbmEsS0FBQSxJQUVBb1AsRUFBQThLLEtBQUFyUSxFQUFBcVEsR0FBQXRTLFVBT0E2UyxFQUFBZCxHQUNBYyxJQUFBNVEsRUFDQTRRLEVBQUFwUyxPQUFBZ1MsRUFBQUksRUFBQTlXLFFBQ0E4VyxHQUVBVCxFQUNBQSxFQUFBLEtBQUFuUSxFQUFBNFEsRUFBQXZFLEdBRUFwUixFQUFBK0MsTUFBQWdDLEVBQUE0USxLQU1BLFNBQUFDLEdBQUF6QixHQXdCQSxJQXZCQSxJQUFBMEIsRUFBQTFELEVBQUEvTyxFQUNBRCxFQUFBZ1IsRUFBQXRWLE9BQ0FpWCxFQUFBblEsRUFBQXdLLFNBQUFnRSxFQUFBLEdBQUF0VCxNQUNBa1YsRUFBQUQsR0FBQW5RLEVBQUF3SyxTQUFBLEtBQ0FqVixFQUFBNGEsRUFBQSxJQUdBRSxFQUFBak0sR0FBQSxTQUFBakgsR0FDQSxPQUFBQSxJQUFBK1MsR0FDR0UsR0FBQSxHQUNIRSxFQUFBbE0sR0FBQSxTQUFBakgsR0FDQSxPQUFBN0MsRUFBQTRWLEVBQUEvUyxJQUFBLEdBQ0dpVCxHQUFBLEdBQ0huQixFQUFBLFVBQUE5UixFQUFBaEIsRUFBQXNQLEdBQ0EsSUFBQTNPLEdBQUFxVCxJQUFBMUUsR0FBQXRQLElBQUFtRSxNQUNBNFAsRUFBQS9ULEdBQUFwQixTQUNBc1YsRUFBQWxULEVBQUFoQixFQUFBc1AsR0FDQTZFLEVBQUFuVCxFQUFBaEIsRUFBQXNQLElBR0EsT0FEQXlFLEVBQUEsS0FDQXBULElBR1F2SCxFQUFBaUksRUFBU2pJLElBQ2pCLEdBQUFpWCxFQUFBeE0sRUFBQXdLLFNBQUFnRSxFQUFBalosR0FBQTJGLE1BQ0ErVCxFQUFBLENBQUE3SyxHQUFBNEssR0FBQUMsR0FBQXpDLFFBQ0csQ0FJSCxJQUhBQSxFQUFBeE0sRUFBQWtJLE9BQUFzRyxFQUFBalosR0FBQTJGLE1BQUFrQyxNQUFBLEtBQUFvUixFQUFBalosR0FBQWtLLFVBR0FsQixHQUFBLENBR0EsSUFEQWQsSUFBQWxJLEVBQ1drSSxFQUFBRCxJQUNYd0MsRUFBQXdLLFNBQUFnRSxFQUFBL1EsR0FBQXZDLE1BRG9CdUMsS0FLcEIsT0FBQTRSLEdBQ0E5WixFQUFBLEdBQUF5WixHQUFBQyxHQUNBMVosRUFBQSxHQUFBcVEsR0FFQTRJLEVBQUFyVSxNQUFBLEVBQUE1RSxFQUFBLEdBQUE2RSxPQUFBLENBQXVDNUQsTUFBQSxNQUFBZ1ksRUFBQWpaLEVBQUEsR0FBQTJGLEtBQUEsVUFDdkN3RCxRQUFBcEMsRUFBQSxNQUNBa1EsRUFDQWpYLEVBQUFrSSxHQUFBd1MsR0FBQXpCLEVBQUFyVSxNQUFBNUUsRUFBQWtJLElBQ0FBLEVBQUFELEdBQUF5UyxHQUFBekIsSUFBQXJVLE1BQUFzRCxJQUNBQSxFQUFBRCxHQUFBb0ksR0FBQTRJLElBR0FTLEVBQUE1VSxLQUFBbVMsR0FJQSxPQUFBd0MsR0FBQUMsR0E4UkEsT0E5bUJBN0MsR0FBQWpWLFVBQUE2SSxFQUFBdVEsUUFBQXZRLEVBQUFpQyxRQUNBakMsRUFBQW9NLFdBQUEsSUFBQUEsR0FFQWpNLEVBQUFKLEdBQUFJLFNBQUEsU0FBQWpFLEVBQUFzVSxHQUNBLElBQUFsRSxFQUFBekgsRUFBQTJKLEVBQUF0VCxFQUNBdVYsRUFBQTNMLEVBQUE0TCxFQUNBQyxFQUFBdFAsRUFBQW5GLEVBQUEsS0FFQSxHQUFBeVUsRUFDQSxPQUFBSCxFQUFBLEVBQUFHLEVBQUF4VyxNQUFBLEdBT0EsSUFKQXNXLEVBQUF2VSxFQUNBNEksRUFBQSxHQUNBNEwsRUFBQTFRLEVBQUE2SyxVQUVBNEYsR0FBQSxDQXlCQSxJQUFBdlYsS0F0QkFvUixLQUFBekgsRUFBQXpDLEVBQUE4QyxLQUFBdUwsTUFDQTVMLElBRUE0TCxJQUFBdFcsTUFBQTBLLEVBQUEsR0FBQTNMLFNBQUF1WCxHQUVBM0wsRUFBQXpLLEtBQUFtVSxFQUFBLEtBR0FsQyxHQUFBLEdBR0F6SCxFQUFBeEMsRUFBQTZDLEtBQUF1TCxNQUNBbkUsRUFBQXpILEVBQUFzQixRQUNBcUksRUFBQW5VLEtBQUEsQ0FDQTdELE1BQUE4VixFQUVBcFIsS0FBQTJKLEVBQUEsR0FBQW5HLFFBQUFwQyxFQUFBLE9BRUFtVSxJQUFBdFcsTUFBQW1TLEVBQUFwVCxTQUlBOEcsRUFBQWtJLFNBQ0FyRCxFQUFBcEMsRUFBQXZILEdBQUFnSyxLQUFBdUwsS0FBQUMsRUFBQXhWLE1BQ0EySixFQUFBNkwsRUFBQXhWLEdBQUEySixNQUNBeUgsRUFBQXpILEVBQUFzQixRQUNBcUksRUFBQW5VLEtBQUEsQ0FDQTdELE1BQUE4VixFQUNBcFIsT0FDQXVFLFFBQUFvRixJQUVBNEwsSUFBQXRXLE1BQUFtUyxFQUFBcFQsU0FJQSxJQUFBb1QsRUFDQSxNQU9BLE9BQUFrRSxFQUNBQyxFQUFBdlgsT0FDQXVYLEVBQ0ExUSxHQUFBekcsTUFBQTRDLEdBRUFtRixFQUFBbkYsRUFBQTRJLEdBQUEzSyxNQUFBLElBK1hBaUcsRUFBQUwsR0FBQUssUUFBQSxTQUFBbEUsRUFBQTJJLEdBQ0EsSUFBQXRQLEVBQ0FxYixFQUFBLEdBQ0FDLEVBQUEsR0FDQUYsRUFBQXJQLEVBQUFwRixFQUFBLEtBRUEsSUFBQXlVLEVBQUEsQ0FNQSxJQUpBOUwsSUFDQUEsRUFBQTFFLEVBQUFqRSxJQUVBM0csRUFBQXNQLEVBQUEzTCxPQUNBM0QsTUFDQW9iLEVBQUFWLEdBQUFwTCxFQUFBdFAsS0FDQWdKLEdBQ0FxUyxFQUFBdlcsS0FBQXNXLEdBRUFFLEVBQUF4VyxLQUFBc1csSUFLQUEsRUFBQXJQLEVBQUFwRixFQXJJQSxTQUFBMlUsRUFBQUQsR0FDQSxJQUFBRSxFQUFBRixFQUFBMVgsT0FBQSxFQUNBNlgsRUFBQUYsRUFBQTNYLE9BQUEsRUFDQThYLEVBQUEsU0FBQXJNLEVBQUF4SSxFQUFBc1AsRUFBQXJNLEVBQUE2UixHQUNBLElBQUE5VCxFQUFBTSxFQUFBK08sRUFDQTBFLEVBQUEsRUFDQTNiLEVBQUEsSUFDQWtYLEVBQUE5SCxHQUFBLEdBQ0F3TSxFQUFBLEdBQ0FDLEVBQUE5USxFQUVBekQsRUFBQThILEdBQUFvTSxHQUFBL1EsRUFBQW9JLEtBQUEsUUFBQTZJLEdBRUFJLEVBQUFwUSxHQUFBLE1BQUFtUSxFQUFBLEVBQUE1UyxLQUFBQyxVQUFBLEdBQ0FqQixFQUFBWCxFQUFBM0QsT0FTQSxJQVBBK1gsSUFDQTNRLEVBQUFuRSxJQUFBekMsR0FBQXlDLEdBQUE4VSxHQU1VMWIsSUFBQWlJLEdBQUEsT0FBQUwsRUFBQU4sRUFBQXRILElBQXdDQSxJQUFBLENBQ2xELEdBQUF3YixHQUFBNVQsRUFBQSxDQU1BLElBTEFNLEVBQUEsRUFDQXRCLEdBQUFnQixFQUFBOEgsZ0JBQUF2TCxJQUNBK0csRUFBQXRELEdBQ0FzTyxHQUFBOUssR0FFQTZMLEVBQUFxRSxFQUFBcFQsTUFDQSxHQUFBK08sRUFBQXJQLEVBQUFoQixHQUFBekMsRUFBQStSLEdBQUEsQ0FDQXJNLEVBQUEvRSxLQUFBOEMsR0FDQSxNQUdBOFQsSUFDQWhRLEVBQUFvUSxHQUtBUCxLQUVBM1QsR0FBQXFQLEdBQUFyUCxJQUNBK1QsSUFJQXZNLEdBQ0E4SCxFQUFBcFMsS0FBQThDLElBZ0JBLEdBVEErVCxHQUFBM2IsRUFTQXViLEdBQUF2YixJQUFBMmIsRUFBQSxDQUVBLElBREF6VCxFQUFBLEVBQ0ErTyxFQUFBb0UsRUFBQW5ULE1BQ0ErTyxFQUFBQyxFQUFBMEUsRUFBQWhWLEVBQUFzUCxHQUdBLEdBQUE5RyxFQUFBLENBRUEsR0FBQXVNLEVBQUEsRUFDQSxLQUFBM2IsS0FDQWtYLEVBQUFsWCxJQUFBNGIsRUFBQTViLEtBQ0E0YixFQUFBNWIsR0FBQW1NLEVBQUFoTSxLQUFBMEosSUFNQStSLEVBQUFqQyxHQUFBaUMsR0FJQTlXLEVBQUErQyxNQUFBZ0MsRUFBQStSLEdBR0FGLElBQUF0TSxHQUFBd00sRUFBQWpZLE9BQUEsR0FDQWdZLEVBQUFOLEVBQUExWCxPQUFBLEdBRUE2RyxHQUFBZ0ssV0FBQTNLLEdBVUEsT0FMQTZSLElBQ0FoUSxFQUFBb1EsRUFDQS9RLEVBQUE4USxHQUdBM0UsR0FHQSxPQUFBcUUsRUFDQTFLLEdBQUE0SyxHQUNBQSxFQXlCQU0sQ0FBQVQsRUFBQUQsS0FHQTFVLFdBRUEsT0FBQXlVLEdBWUF0USxFQUFBTixHQUFBTSxPQUFBLFNBQUFuRSxFQUFBQyxFQUFBaUQsRUFBQXVGLEdBQ0EsSUFBQXBQLEVBQUFpWixFQUFBK0MsRUFBQXJXLEVBQUFrTixFQUNBb0osRUFBQSxtQkFBQXRWLEtBQ0EySSxHQUFBRixHQUFBeEUsRUFBQWpFLEVBQUFzVixFQUFBdFYsYUFNQSxHQUpBa0QsS0FBQSxHQUlBLElBQUF5RixFQUFBM0wsT0FBQSxDQUlBLElBREFzVixFQUFBM0osRUFBQSxHQUFBQSxFQUFBLEdBQUExSyxNQUFBLElBQ0FqQixPQUFBLFdBQUFxWSxFQUFBL0MsRUFBQSxJQUFBdFQsTUFDQSxJQUFBaUIsRUFBQXBCLFVBQUE0RixHQUFBWCxFQUFBd0ssU0FBQWdFLEVBQUEsR0FBQXRULE1BQUEsQ0FHQSxLQURBaUIsR0FBQTZELEVBQUFvSSxLQUFBLEdBQUFtSixFQUFBOVIsUUFBQSxHQUFBZixRQUFBNkUsRUFBQUMsSUFBQXJILElBQUEsUUFFQSxPQUFBaUQsRUFHSW9TLElBQ0pyVixJQUFBTCxZQUdBSSxJQUFBL0IsTUFBQXFVLEVBQUFySSxRQUFBM1AsTUFBQTBDLFFBS0EsSUFEQTNELEVBQUFrTixFQUFBLGFBQUErQyxLQUFBdEosR0FBQSxFQUFBc1MsRUFBQXRWLE9BQ0EzRCxNQUNBZ2MsRUFBQS9DLEVBQUFqWixJQUdBeUssRUFBQXdLLFNBQUF0UCxFQUFBcVcsRUFBQXJXLFFBR0EsSUFBQWtOLEVBQUFwSSxFQUFBb0ksS0FBQWxOLE1BRUF5SixFQUFBeUQsRUFDQW1KLEVBQUE5UixRQUFBLEdBQUFmLFFBQUE2RSxFQUFBQyxJQUNBRixFQUFBa0MsS0FBQWdKLEVBQUEsR0FBQXRULE9BQUEySyxHQUFBMUosRUFBQUwsYUFBQUssSUFDQSxDQUtBLEdBRkFxUyxFQUFBNVEsT0FBQXJJLEVBQUEsS0FDQTJHLEVBQUF5SSxFQUFBekwsUUFBQTBNLEdBQUE0SSxJQUdBLE9BREFuVSxFQUFBK0MsTUFBQWdDLEVBQUF1RixHQUNBdkYsRUFHQSxPQWVBLE9BUEFvUyxHQUFBcFIsRUFBQWxFLEVBQUEySSxJQUNBRixFQUNBeEksR0FDQXdFLEVBQ0F2QixHQUNBakQsR0FBQW1ILEVBQUFrQyxLQUFBdEosSUFBQTJKLEdBQUExSixFQUFBTCxhQUFBSyxHQUVBaUQsR0FNQXhFLEVBQUFzUCxXQUFBM0wsRUFBQXBHLE1BQUEsSUFBQXdGLEtBQUE0RCxHQUFBdEosS0FBQSxNQUFBc0csRUFJQTNELEVBQUFxUCxtQkFBQXpKLEVBR0FDLElBSUE3RixFQUFBd08sYUFBQS9DLEdBQUEsU0FBQUMsR0FFQSxTQUFBQSxFQUFBMEMsd0JBQUF0UCxFQUFBZ0MsY0FBQSxlQU1BMkssR0FBQSxTQUFBQyxHQUVBLE9BREFBLEVBQUFrQyxVQUFBLG1CQUNBLE1BQUFsQyxFQUFBOEQsV0FBQTFFLGFBQUEsV0FFQWEsR0FBQSxrQ0FBQXBKLEVBQUFySCxFQUFBb0ssR0FDQSxJQUFBQSxFQUNBLE9BQUEvQyxFQUFBdUksYUFBQTVQLEVBQUEsU0FBQUEsRUFBQWdLLGNBQUEsT0FPQWxGLEVBQUFvSCxZQUFBcUUsR0FBQSxTQUFBQyxHQUdBLE9BRkFBLEVBQUFrQyxVQUFBLFdBQ0FsQyxFQUFBOEQsV0FBQXpFLGFBQUEsWUFDQSxLQUFBVyxFQUFBOEQsV0FBQTFFLGFBQUEsWUFFQWEsR0FBQSxpQkFBQXBKLEVBQUFySCxFQUFBb0ssR0FDQSxJQUFBQSxHQUFBLFVBQUEvQyxFQUFBc0ksU0FBQTNGLGNBQ0EsT0FBQTNDLEVBQUFzVSxlQU9BcEwsR0FBQSxTQUFBQyxHQUNBLGFBQUFBLEVBQUFaLGFBQUEsZUFFQWEsR0FBQTFFLEVBQUEsU0FBQTFFLEVBQUFySCxFQUFBb0ssR0FDQSxJQUFBcEgsRUFDQSxJQUFBb0gsRUFDQSxXQUFBL0MsRUFBQXJILEtBQUFnSyxlQUNBaEgsRUFBQXFFLEVBQUFrTCxpQkFBQXZTLEtBQUFnRCxFQUFBOFEsVUFDQTlRLEVBQUF0QyxNQUNBLE9BS0F1SixHQWhzRUEsQ0Frc0VDbEcsR0FJRG9DLEVBQUFtTSxLQUFBckksRUFDQTlELEVBQUF3TixLQUFBMUosRUFBQXVLLFVBR0FyTyxFQUFBd04sS0FBQSxLQUFBeE4sRUFBQXdOLEtBQUF4SCxRQUNBaEcsRUFBQThOLFdBQUE5TixFQUFBeVYsT0FBQTNSLEVBQUFnSyxXQUNBOU4sRUFBQU4sS0FBQW9FLEVBQUFFLFFBQ0FoRSxFQUFBMFYsU0FBQTVSLEVBQUFHLE1BQ0FqRSxFQUFBNkUsU0FBQWYsRUFBQWUsU0FDQTdFLEVBQUEyVixlQUFBN1IsRUFBQThKLE9BS0EsSUFBQXZGLEVBQUEsU0FBQW5ILEVBQUFtSCxFQUFBdU4sR0FJQSxJQUhBLElBQUF2RixFQUFBLEdBQ0F3RixPQUFBeFQsSUFBQXVULEdBRUExVSxJQUFBbUgsS0FBQSxJQUFBbkgsRUFBQXBDLFVBQ0EsT0FBQW9DLEVBQUFwQyxTQUFBLENBQ0EsR0FBQStXLEdBQUE3VixFQUFBa0IsR0FBQTRVLEdBQUFGLEdBQ0EsTUFFQXZGLEVBQUFqUyxLQUFBOEMsR0FHQSxPQUFBbVAsR0FJQTBGLEVBQUEsU0FBQWhiLEVBQUFtRyxHQUdBLElBRkEsSUFBQW1QLEVBQUEsR0FFUXRWLEVBQUdBLElBQUErUCxZQUNYLElBQUEvUCxFQUFBK0QsVUFBQS9ELElBQUFtRyxHQUNBbVAsRUFBQWpTLEtBQUFyRCxHQUlBLE9BQUFzVixHQUlBMkYsRUFBQWhXLEVBQUF3TixLQUFBNUUsTUFBQTVCLGFBSUEsU0FBQXdDLEVBQUF0SSxFQUFBckgsR0FFQSxPQUFBcUgsRUFBQXNJLFVBQUF0SSxFQUFBc0ksU0FBQTNGLGdCQUFBaEssRUFBQWdLLGNBR0EsSUFBQW9TLEVBQUEsa0VBS0EsU0FBQUMsRUFBQXpJLEVBQUEwSSxFQUFBN0YsR0FDQSxPQUFBMVIsRUFBQXVYLEdBQ0FuVyxFQUFBc0QsS0FBQW1LLEVBQUEsU0FBQXZNLEVBQUE1SCxHQUNBLFFBQUE2YyxFQUFBMWMsS0FBQXlILEVBQUE1SCxFQUFBNEgsS0FBQW9QLElBS0E2RixFQUFBclgsU0FDQWtCLEVBQUFzRCxLQUFBbUssRUFBQSxTQUFBdk0sR0FDQSxPQUFBQSxJQUFBaVYsSUFBQTdGLElBS0EsaUJBQUE2RixFQUNBblcsRUFBQXNELEtBQUFtSyxFQUFBLFNBQUF2TSxHQUNBLE9BQUE3QyxFQUFBNUUsS0FBQTBjLEVBQUFqVixJQUFBLElBQUFvUCxJQUtBdFEsRUFBQWlNLE9BQUFrSyxFQUFBMUksRUFBQTZDLEdBR0F0USxFQUFBaU0sT0FBQSxTQUFBdUIsRUFBQTVNLEVBQUEwUCxHQUNBLElBQUFwUCxFQUFBTixFQUFBLEdBTUEsT0FKQTBQLElBQ0E5QyxFQUFBLFFBQUFBLEVBQUEsS0FHQSxJQUFBNU0sRUFBQTNELFFBQUEsSUFBQWlFLEVBQUFwQyxTQUNBa0IsRUFBQW1NLEtBQUFNLGdCQUFBdkwsRUFBQXNNLEdBQUEsQ0FBQXRNLEdBQUEsR0FHQWxCLEVBQUFtTSxLQUFBM0ksUUFBQWdLLEVBQUF4TixFQUFBc0QsS0FBQTFDLEVBQUEsU0FBQU0sR0FDQSxXQUFBQSxFQUFBcEMsYUFJQWtCLEVBQUFHLEdBQUF5QixPQUFBLENBQ0F1SyxLQUFBLFNBQUFsTSxHQUNBLElBQUEzRyxFQUFBdUgsRUFDQVUsRUFBQTFELEtBQUFaLE9BQ0FtWixFQUFBdlksS0FFQSxvQkFBQW9DLEVBQ0EsT0FBQXBDLEtBQUE4QyxVQUFBWCxFQUFBQyxHQUFBZ00sT0FBQSxXQUNBLElBQUEzUyxFQUFBLEVBQWdCQSxFQUFBaUksRUFBU2pJLElBQ3pCLEdBQUEwRyxFQUFBNkUsU0FBQXVSLEVBQUE5YyxHQUFBdUUsTUFDQSxZQVFBLElBRkFnRCxFQUFBaEQsS0FBQThDLFVBQUEsSUFFQXJILEVBQUEsRUFBY0EsRUFBQWlJLEVBQVNqSSxJQUN2QjBHLEVBQUFtTSxLQUFBbE0sRUFBQW1XLEVBQUE5YyxHQUFBdUgsR0FHQSxPQUFBVSxFQUFBLEVBQUF2QixFQUFBOE4sV0FBQWpOLE1BRUFvTCxPQUFBLFNBQUFoTSxHQUNBLE9BQUFwQyxLQUFBOEMsVUFBQXVWLEVBQUFyWSxLQUFBb0MsR0FBQSxTQUVBcVEsSUFBQSxTQUFBclEsR0FDQSxPQUFBcEMsS0FBQThDLFVBQUF1VixFQUFBclksS0FBQW9DLEdBQUEsU0FFQTZWLEdBQUEsU0FBQTdWLEdBQ0EsUUFBQWlXLEVBQ0FyWSxLQUlBLGlCQUFBb0MsR0FBQStWLEVBQUF6TSxLQUFBdEosR0FDQUQsRUFBQUMsR0FDQUEsR0FBQSxJQUNBLEdBQ0FoRCxVQVNBLElBQUFvWixFQU1BalAsRUFBQSx1Q0FFQXBILEVBQUFHLEdBQUFDLEtBQUEsU0FBQUgsRUFBQUMsRUFBQTZRLEdBQ0EsSUFBQW5JLEVBQUExSCxFQUdBLElBQUFqQixFQUNBLE9BQUFwQyxLQVFBLEdBSEFrVCxLQUFBc0YsRUFHQSxpQkFBQXBXLEVBQUEsQ0FhQSxLQVBBMkksRUFMQSxNQUFBM0ksRUFBQSxJQUNBLE1BQUFBLElBQUFoRCxPQUFBLElBQ0FnRCxFQUFBaEQsUUFBQSxFQUdBLE1BQUFnRCxFQUFBLE1BR0FtSCxFQUFBNkIsS0FBQWhKLE1BSUEySSxFQUFBLElBQUExSSxFQTZDSSxPQUFBQSxLQUFBSyxRQUNKTCxHQUFBNlEsR0FBQTVFLEtBQUFsTSxHQUtBcEMsS0FBQTJDLFlBQUFOLEdBQUFpTSxLQUFBbE0sR0FoREEsR0FBQTJJLEVBQUEsSUFZQSxHQVhBMUksZUFBQUYsRUFBQUUsRUFBQSxHQUFBQSxFQUlBRixFQUFBYyxNQUFBakQsS0FBQW1DLEVBQUFzVyxVQUNBMU4sRUFBQSxHQUNBMUksS0FBQXBCLFNBQUFvQixFQUFBOEksZUFBQTlJLEVBQUF6QyxHQUNBLElBSUF3WSxFQUFBMU0sS0FBQVgsRUFBQSxLQUFBNUksRUFBQWtDLGNBQUFoQyxHQUNBLElBQUEwSSxLQUFBMUksRUFHQXRCLEVBQUFmLEtBQUErSyxJQUNBL0ssS0FBQStLLEdBQUExSSxFQUFBMEksSUFJQS9LLEtBQUE2UCxLQUFBOUUsRUFBQTFJLEVBQUEwSSxJQUtBLE9BQUEvSyxLQVlBLE9BUkFxRCxFQUFBekQsRUFBQXlMLGVBQUFOLEVBQUEsT0FLQS9LLEtBQUEsR0FBQXFELEVBQ0FyRCxLQUFBWixPQUFBLEdBRUFZLEtBY0csT0FBQW9DLEVBQUFuQixVQUNIakIsS0FBQSxHQUFBb0MsRUFDQXBDLEtBQUFaLE9BQUEsRUFDQVksTUFJR2UsRUFBQXFCLFFBQ0hvQyxJQUFBME8sRUFBQXdGLE1BQ0F4RixFQUFBd0YsTUFBQXRXLEdBR0FBLEVBQUFELEdBR0FBLEVBQUFrRCxVQUFBakQsRUFBQXBDLFFBSUEzQyxVQUFBOEUsRUFBQUcsR0FHQWtXLEVBQUFyVyxFQUFBdkMsR0FHQSxJQUFBK1ksRUFBQSxpQ0FHQUMsRUFBQSxDQUNBQyxVQUFBLEVBQ0FDLFVBQUEsRUFDQXJPLE1BQUEsRUFDQXNPLE1BQUEsR0FvRkEsU0FBQUMsRUFBQWxNLEVBQUF0QyxHQUNBLE1BQUFzQyxJQUFBdEMsS0FBQSxJQUFBc0MsRUFBQTdMLFdBQ0EsT0FBQTZMLEVBbkZBM0ssRUFBQUcsR0FBQXlCLE9BQUEsQ0FDQTZPLElBQUEsU0FBQWpVLEdBQ0EsSUFBQXNhLEVBQUE5VyxFQUFBeEQsRUFBQXFCLE1BQ0F0RSxFQUFBdWQsRUFBQTdaLE9BRUEsT0FBQVksS0FBQW9PLE9BQUEsV0FFQSxJQURBLElBQUEzUyxFQUFBLEVBQ1VBLEVBQUFDLEVBQU9ELElBQ2pCLEdBQUEwRyxFQUFBNkUsU0FBQWhILEtBQUFpWixFQUFBeGQsSUFDQSxZQU1BeWQsUUFBQSxTQUFBMUksRUFBQW5PLEdBQ0EsSUFBQXlLLEVBQ0FyUixFQUFBLEVBQ0FDLEVBQUFzRSxLQUFBWixPQUNBb1QsRUFBQSxHQUNBeUcsRUFBQSxpQkFBQXpJLEdBQUFyTyxFQUFBcU8sR0FHQSxJQUFBMkgsRUFBQXpNLEtBQUE4RSxHQUNBLEtBQVUvVSxFQUFBQyxFQUFPRCxJQUNqQixJQUFBcVIsRUFBQTlNLEtBQUF2RSxHQUEwQnFSLE9BQUF6SyxFQUF3QnlLLElBQUE5SyxXQUdsRCxHQUFBOEssRUFBQTdMLFNBQUEsS0FBQWdZLEVBQ0FBLEVBQUFFLE1BQUFyTSxJQUFBLEVBR0EsSUFBQUEsRUFBQTdMLFVBQ0FrQixFQUFBbU0sS0FBQU0sZ0JBQUE5QixFQUFBMEQsSUFBQSxDQUVBZ0MsRUFBQWpTLEtBQUF1TSxHQUNBLE1BTUEsT0FBQTlNLEtBQUE4QyxVQUFBMFAsRUFBQXBULE9BQUEsRUFBQStDLEVBQUE4TixXQUFBdUMsT0FJQTJHLE1BQUEsU0FBQTlWLEdBR0EsT0FBQUEsRUFLQSxpQkFBQUEsRUFDQTdDLEVBQUE1RSxLQUFBdUcsRUFBQWtCLEdBQUFyRCxLQUFBLElBSUFRLEVBQUE1RSxLQUFBb0UsS0FHQXFELEVBQUFYLE9BQUFXLEVBQUEsR0FBQUEsR0FaQXJELEtBQUEsSUFBQUEsS0FBQSxHQUFBZ0MsV0FBQWhDLEtBQUF1RCxRQUFBNlYsVUFBQWhhLFFBQUEsR0FnQkFpYSxJQUFBLFNBQUFqWCxFQUFBQyxHQUNBLE9BQUFyQyxLQUFBOEMsVUFDQVgsRUFBQThOLFdBQ0E5TixFQUFBYyxNQUFBakQsS0FBQTFELE1BQUE2RixFQUFBQyxFQUFBQyxPQUtBaVgsUUFBQSxTQUFBbFgsR0FDQSxPQUFBcEMsS0FBQXFaLElBQUEsTUFBQWpYLEVBQ0FwQyxLQUFBa0QsV0FBQWxELEtBQUFrRCxXQUFBa0wsT0FBQWhNLE9BVUFELEVBQUFnQixLQUFBLENBQ0E2TyxPQUFBLFNBQUEzTyxHQUNBLElBQUEyTyxFQUFBM08sRUFBQXJCLFdBQ0EsT0FBQWdRLEdBQUEsS0FBQUEsRUFBQS9RLFNBQUErUSxFQUFBLE1BRUF1SCxRQUFBLFNBQUFsVyxHQUNBLE9BQUFtSCxFQUFBbkgsRUFBQSxlQUVBbVcsYUFBQSxTQUFBblcsRUFBQTVILEVBQUFzYyxHQUNBLE9BQUF2TixFQUFBbkgsRUFBQSxhQUFBMFUsSUFFQXROLEtBQUEsU0FBQXBILEdBQ0EsT0FBQTJWLEVBQUEzVixFQUFBLGdCQUVBMFYsS0FBQSxTQUFBMVYsR0FDQSxPQUFBMlYsRUFBQTNWLEVBQUEsb0JBRUFvVyxRQUFBLFNBQUFwVyxHQUNBLE9BQUFtSCxFQUFBbkgsRUFBQSxnQkFFQStWLFFBQUEsU0FBQS9WLEdBQ0EsT0FBQW1ILEVBQUFuSCxFQUFBLG9CQUVBcVcsVUFBQSxTQUFBclcsRUFBQTVILEVBQUFzYyxHQUNBLE9BQUF2TixFQUFBbkgsRUFBQSxjQUFBMFUsSUFFQTRCLFVBQUEsU0FBQXRXLEVBQUE1SCxFQUFBc2MsR0FDQSxPQUFBdk4sRUFBQW5ILEVBQUEsa0JBQUEwVSxJQUVBRyxTQUFBLFNBQUE3VSxHQUNBLE9BQUE2VSxHQUFBN1UsRUFBQXJCLFlBQUEsSUFBMENzTyxXQUFBak4sSUFFMUN3VixTQUFBLFNBQUF4VixHQUNBLE9BQUE2VSxFQUFBN1UsRUFBQWlOLGFBRUF3SSxTQUFBLFNBQUF6VixHQUNBLE9BQUFzSSxFQUFBdEksRUFBQSxVQUNBQSxFQUFBdVcsaUJBTUFqTyxFQUFBdEksRUFBQSxjQUNBQSxJQUFBd1csU0FBQXhXLEdBR0FsQixFQUFBYyxNQUFBLEdBQUFJLEVBQUFxSCxlQUVDLFNBQUExTyxFQUFBc0csR0FDREgsRUFBQUcsR0FBQXRHLEdBQUEsU0FBQStiLEVBQUEzVixHQUNBLElBQUFvUSxFQUFBclEsRUFBQWpFLElBQUE4QixLQUFBc0MsRUFBQXlWLEdBdUJBLE1BckJBLFVBQUEvYixFQUFBcUUsT0FBQSxLQUNBK0IsRUFBQTJWLEdBR0EzVixHQUFBLGlCQUFBQSxJQUNBb1EsRUFBQXJRLEVBQUFpTSxPQUFBaE0sRUFBQW9RLElBR0F4UyxLQUFBWixPQUFBLElBR0F3WixFQUFBNWMsSUFDQW1HLEVBQUE4TixXQUFBdUMsR0FJQW1HLEVBQUFqTixLQUFBMVAsSUFDQXdXLEVBQUFzSCxXQUlBOVosS0FBQThDLFVBQUEwUCxNQUdBLElBQUF1SCxFQUFBLG9CQXNPQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFBLEVBRUEsU0FBQUMsRUFBQUMsR0FDQSxNQUFBQSxFQUdBLFNBQUFDLEVBQUExZCxFQUFBMmQsRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUVBLElBR0E5ZCxHQUFBcUUsRUFBQXlaLEVBQUE5ZCxFQUFBK2QsU0FDQUQsRUFBQTVlLEtBQUFjLEdBQUEwSyxLQUFBaVQsR0FBQUssS0FBQUosR0FHRzVkLEdBQUFxRSxFQUFBeVosRUFBQTlkLEVBQUFpZSxNQUNISCxFQUFBNWUsS0FBQWMsRUFBQTJkLEVBQUFDLEdBUUFELEVBQUEvVyxXQUFBa0IsRUFBQSxDQUFBOUgsR0FBQTJELE1BQUFrYSxJQU1FLE1BQUE3ZCxHQUlGNGQsRUFBQWhYLFdBQUFrQixFQUFBLENBQUE5SCxLQXZPQXlGLEVBQUF5WSxVQUFBLFNBQUE1VyxHQUlBQSxFQUFBLGlCQUFBQSxFQWxDQSxTQUFBQSxHQUNBLElBQUE3RyxFQUFBLEdBSUEsT0FIQWdGLEVBQUFnQixLQUFBYSxFQUFBK0csTUFBQWdQLElBQUEsWUFBQXBRLEVBQUFrUixHQUNBMWQsRUFBQTBkLElBQUEsSUFFQTFkLEVBOEJBMmQsQ0FBQTlXLEdBQ0E3QixFQUFBNEIsT0FBQSxHQUFtQkMsR0FFbkIsSUFDQStXLEVBR0FDLEVBR0FDLEVBR0FDLEVBR0FwVCxFQUFBLEdBR0FxVCxFQUFBLEdBR0FDLEdBQUEsRUFHQUMsRUFBQSxXQVFBLElBTEFILEtBQUFsWCxFQUFBc1gsS0FJQUwsRUFBQUYsR0FBQSxFQUNVSSxFQUFBL2IsT0FBY2djLEdBQUEsRUFFeEIsSUFEQUosRUFBQUcsRUFBQTlPLFVBQ0ErTyxFQUFBdFQsRUFBQTFJLFNBR0EsSUFBQTBJLEVBQUFzVCxHQUFBOVgsTUFBQTBYLEVBQUEsR0FBQUEsRUFBQSxLQUNBaFgsRUFBQXVYLGNBR0FILEVBQUF0VCxFQUFBMUksT0FDQTRiLEdBQUEsR0FNQWhYLEVBQUFnWCxTQUNBQSxHQUFBLEdBR0FELEdBQUEsRUFHQUcsSUFJQXBULEVBREFrVCxFQUNBLEdBSUEsS0FNQXpDLEVBQUEsQ0FHQWMsSUFBQSxXQTJCQSxPQTFCQXZSLElBR0FrVCxJQUFBRCxJQUNBSyxFQUFBdFQsRUFBQTFJLE9BQUEsRUFDQStiLEVBQUE1YSxLQUFBeWEsSUFHQSxTQUFBM0IsRUFBQWhILEdBQ0FsUSxFQUFBZ0IsS0FBQWtQLEVBQUEsU0FBQTFJLEVBQUE5RCxHQUNBOUUsRUFBQThFLEdBQ0E3QixFQUFBNFQsUUFBQVcsRUFBQTNGLElBQUEvTSxJQUNBaUMsRUFBQXZILEtBQUFzRixHQUVRQSxLQUFBekcsUUFBQSxXQUFBOEMsRUFBQTJELElBR1J3VCxFQUFBeFQsS0FUQSxDQVlNMUcsV0FFTjZiLElBQUFELEdBQ0FNLEtBR0FyYixNQUlBd2IsT0FBQSxXQVlBLE9BWEFyWixFQUFBZ0IsS0FBQWhFLFVBQUEsU0FBQXdLLEVBQUE5RCxHQUVBLElBREEsSUFBQXNULEdBQ0FBLEVBQUFoWCxFQUFBb0QsUUFBQU0sRUFBQWlDLEVBQUFxUixLQUFBLEdBQ0FyUixFQUFBaEUsT0FBQXFWLEVBQUEsR0FHQUEsR0FBQWlDLEdBQ0FBLE1BSUFwYixNQUtBNFMsSUFBQSxTQUFBdFEsR0FDQSxPQUFBQSxFQUNBSCxFQUFBb0QsUUFBQWpELEVBQUF3RixJQUFBLEVBQ0FBLEVBQUExSSxPQUFBLEdBSUF3VSxNQUFBLFdBSUEsT0FIQTlMLElBQ0FBLEVBQUEsSUFFQTlILE1BTUF5YixRQUFBLFdBR0EsT0FGQVAsRUFBQUMsRUFBQSxHQUNBclQsRUFBQWtULEVBQUEsR0FDQWhiLE1BRUF1SyxTQUFBLFdBQ0EsT0FBQXpDLEdBTUE0VCxLQUFBLFdBS0EsT0FKQVIsRUFBQUMsRUFBQSxHQUNBSCxHQUFBRCxJQUNBalQsRUFBQWtULEVBQUEsSUFFQWhiLE1BRUFrYixPQUFBLFdBQ0EsUUFBQUEsR0FJQVMsU0FBQSxTQUFBdFosRUFBQWdRLEdBU0EsT0FSQTZJLElBRUE3SSxFQUFBLENBQUFoUSxHQURBZ1EsS0FBQSxJQUNBaFMsTUFBQWdTLEVBQUFoUyxRQUFBZ1MsR0FDQThJLEVBQUE1YSxLQUFBOFIsR0FDQTBJLEdBQ0FNLEtBR0FyYixNQUlBcWIsS0FBQSxXQUVBLE9BREE5QyxFQUFBb0QsU0FBQTNiLEtBQUFiLFdBQ0FhLE1BSUFpYixNQUFBLFdBQ0EsUUFBQUEsSUFJQSxPQUFBMUMsR0E0Q0FwVyxFQUFBNEIsT0FBQSxDQUVBNlgsU0FBQSxTQUFBQyxHQUNBLElBQUFDLEVBQUEsQ0FJQSxxQkFBQTNaLEVBQUF5WSxVQUFBLFVBQ0F6WSxFQUFBeVksVUFBQSxhQUNBLGtCQUFBelksRUFBQXlZLFVBQUEsZUFDQXpZLEVBQUF5WSxVQUFBLDZCQUNBLGlCQUFBelksRUFBQXlZLFVBQUEsZUFDQXpZLEVBQUF5WSxVQUFBLDhCQUVBbUIsRUFBQSxVQUNBdEIsRUFBQSxDQUNBc0IsTUFBQSxXQUNBLE9BQUFBLEdBRUFDLE9BQUEsV0FFQSxPQURBQyxFQUFBN1UsS0FBQWpJLFdBQUF1YixLQUFBdmIsV0FDQWEsTUFFQWtjLE1BQUEsU0FBQTVaLEdBQ0EsT0FBQW1ZLEVBQUFFLEtBQUEsS0FBQXJZLElBSUE2WixLQUFBLFdBQ0EsSUFBQUMsRUFBQWpkLFVBRUEsT0FBQWdELEVBQUF5WixTQUFBLFNBQUFTLEdBQ0FsYSxFQUFBZ0IsS0FBQTJZLEVBQUEsU0FBQXJnQixFQUFBNmdCLEdBR0EsSUFBQWhhLEVBQUF2QixFQUFBcWIsRUFBQUUsRUFBQSxNQUFBRixFQUFBRSxFQUFBLElBS0FMLEVBQUFLLEVBQUEsZUFDQSxJQUFBQyxFQUFBamEsS0FBQWdCLE1BQUF0RCxLQUFBYixXQUNBb2QsR0FBQXhiLEVBQUF3YixFQUFBOUIsU0FDQThCLEVBQUE5QixVQUNBK0IsU0FBQUgsRUFBQUksUUFDQXJWLEtBQUFpVixFQUFBaEMsU0FDQUssS0FBQTJCLEVBQUEvQixRQUVBK0IsRUFBQUMsRUFBQSxXQUNBdGMsS0FDQXNDLEVBQUEsQ0FBQWlhLEdBQUFwZCxlQUtBaWQsRUFBQSxPQUNNM0IsV0FFTkUsS0FBQSxTQUFBK0IsRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBLEVBQ0EsU0FBQXhDLEVBQUF5QyxFQUFBYixFQUFBdFAsRUFBQW9RLEdBQ0Esa0JBQ0EsSUFBQUMsRUFBQWhkLEtBQ0FxUyxFQUFBbFQsVUFDQThkLEVBQUEsV0FDQSxJQUFBVixFQUFBNUIsRUFLQSxLQUFBbUMsRUFBQUQsR0FBQSxDQVFBLElBSkFOLEVBQUE1UCxFQUFBckosTUFBQTBaLEVBQUEzSyxNQUlBNEosRUFBQXhCLFVBQ0EsVUFBQXhiLFVBQUEsNEJBT0EwYixFQUFBNEIsSUFLQSxpQkFBQUEsR0FDQSxtQkFBQUEsSUFDQUEsRUFBQTVCLEtBR0E1WixFQUFBNFosR0FHQW9DLEVBQ0FwQyxFQUFBL2UsS0FDQTJnQixFQUNBbEMsRUFBQXdDLEVBQUFaLEVBQUFqQyxFQUFBK0MsR0FDQTFDLEVBQUF3QyxFQUFBWixFQUFBL0IsRUFBQTZDLEtBT0FGLElBRUFsQyxFQUFBL2UsS0FDQTJnQixFQUNBbEMsRUFBQXdDLEVBQUFaLEVBQUFqQyxFQUFBK0MsR0FDQTFDLEVBQUF3QyxFQUFBWixFQUFBL0IsRUFBQTZDLEdBQ0ExQyxFQUFBd0MsRUFBQVosRUFBQWpDLEVBQ0FpQyxFQUFBaUIsZUFTQXZRLElBQUFxTixJQUNBZ0QsT0FBQXhZLEVBQ0E2TixFQUFBLENBQUFrSyxLQUtBUSxHQUFBZCxFQUFBa0IsYUFBQUgsRUFBQTNLLE1BS0ErSyxFQUFBTCxFQUNBRSxFQUNBLFdBQ0EsSUFDQUEsSUFDVyxNQUFBdFMsR0FFWHhJLEVBQUF5WixTQUFBeUIsZUFDQWxiLEVBQUF5WixTQUFBeUIsY0FBQTFTLEVBQ0F5UyxFQUFBRSxZQU1BUixFQUFBLEdBQUFELElBSUFsUSxJQUFBdU4sSUFDQThDLE9BQUF4WSxFQUNBNk4sRUFBQSxDQUFBMUgsSUFHQXNSLEVBQUFzQixXQUFBUCxFQUFBM0ssTUFTQXlLLEVBQ0FNLEtBS0FqYixFQUFBeVosU0FBQTRCLGVBQ0FKLEVBQUFFLFdBQUFuYixFQUFBeVosU0FBQTRCLGdCQUVBemQsRUFBQTBkLFdBQUFMLEtBS0EsT0FBQWpiLEVBQUF5WixTQUFBLFNBQUFTLEdBR0FQLEVBQUEsTUFBQXpDLElBQ0FnQixFQUNBLEVBQ0FnQyxFQUNBdGIsRUFBQTZiLEdBQ0FBLEVBQ0E1QyxFQUNBcUMsRUFBQWEsYUFLQXBCLEVBQUEsTUFBQXpDLElBQ0FnQixFQUNBLEVBQ0FnQyxFQUNBdGIsRUFBQTJiLEdBQ0FBLEVBQ0ExQyxJQUtBOEIsRUFBQSxNQUFBekMsSUFDQWdCLEVBQ0EsRUFDQWdDLEVBQ0F0YixFQUFBNGIsR0FDQUEsRUFDQXpDLE1BR01PLFdBS05BLFFBQUEsU0FBQXpaLEdBQ0EsYUFBQUEsRUFBQW1CLEVBQUE0QixPQUFBL0MsRUFBQXlaLE9BR0F3QixFQUFBLEdBa0VBLE9BL0RBOVosRUFBQWdCLEtBQUEyWSxFQUFBLFNBQUFyZ0IsRUFBQTZnQixHQUNBLElBQUF4VSxFQUFBd1UsRUFBQSxHQUNBb0IsRUFBQXBCLEVBQUEsR0FLQTdCLEVBQUE2QixFQUFBLElBQUF4VSxFQUFBdVIsSUFHQXFFLEdBQ0E1VixFQUFBdVIsSUFDQSxXQUlBMEMsRUFBQTJCLEdBS0E1QixFQUFBLEVBQUFyZ0IsR0FBQSxHQUFBZ2dCLFFBSUFLLEVBQUEsRUFBQXJnQixHQUFBLEdBQUFnZ0IsUUFHQUssRUFBQSxNQUFBSixLQUdBSSxFQUFBLE1BQUFKLE1BT0E1VCxFQUFBdVIsSUFBQWlELEVBQUEsR0FBQWpCLE1BS0FZLEVBQUFLLEVBQUEsZUFFQSxPQURBTCxFQUFBSyxFQUFBLFdBQUF0YyxPQUFBaWMsT0FBQXpYLEVBQUF4RSxLQUFBYixXQUNBYSxNQU1BaWMsRUFBQUssRUFBQSxXQUFBeFUsRUFBQTZULFdBSUFsQixVQUFBd0IsR0FHQUosR0FDQUEsRUFBQWpnQixLQUFBcWdCLEtBSUFBLEdBSUEwQixLQUFBLFNBQUFDLEdBQ0EsSUFHQUMsRUFBQTFlLFVBQUFDLE9BR0EzRCxFQUFBb2lCLEVBR0FDLEVBQUF4WixNQUFBN0ksR0FDQXNpQixFQUFBMWQsRUFBQXpFLEtBQUF1RCxXQUdBNmUsRUFBQTdiLEVBQUF5WixXQUdBcUMsRUFBQSxTQUFBeGlCLEdBQ0EsZ0JBQUFpQixHQUNBb2hCLEVBQUFyaUIsR0FBQXVFLEtBQ0ErZCxFQUFBdGlCLEdBQUEwRCxVQUFBQyxPQUFBLEVBQUFpQixFQUFBekUsS0FBQXVELFdBQUF6QyxJQUNBbWhCLEdBQ0FHLEVBQUFiLFlBQUFXLEVBQUFDLEtBTUEsR0FBQUYsR0FBQSxJQUNBekQsRUFBQXdELEVBQUFJLEVBQUE1VyxLQUFBNlcsRUFBQXhpQixJQUFBNGUsUUFBQTJELEVBQUExRCxRQUNBdUQsR0FHQSxZQUFBRyxFQUFBakMsU0FDQWhiLEVBQUFnZCxFQUFBdGlCLElBQUFzaUIsRUFBQXRpQixHQUFBa2YsT0FFQSxPQUFBcUQsRUFBQXJELE9BS0EsS0FBQWxmLEtBQ0EyZSxFQUFBMkQsRUFBQXRpQixHQUFBd2lCLEVBQUF4aUIsR0FBQXVpQixFQUFBMUQsUUFHQSxPQUFBMEQsRUFBQXZELGFBT0EsSUFBQXlELEVBQUEseURBRUEvYixFQUFBeVosU0FBQXlCLGNBQUEsU0FBQTdkLEVBQUEyZSxHQUlBcGUsRUFBQVIsU0FBQVEsRUFBQVIsUUFBQTZlLE1BQUE1ZSxHQUFBMGUsRUFBQXhTLEtBQUFsTSxFQUFBeEQsT0FDQStELEVBQUFSLFFBQUE2ZSxLQUFBLDhCQUFBNWUsRUFBQTZlLFFBQUE3ZSxFQUFBMmUsVUFPQWhjLEVBQUFtYyxlQUFBLFNBQUE5ZSxHQUNBTyxFQUFBMGQsV0FBQSxXQUNBLE1BQUFqZSxLQVFBLElBQUErZSxFQUFBcGMsRUFBQXlaLFdBa0RBLFNBQUE0QyxJQUNBNWUsRUFBQTZlLG9CQUFBLG1CQUFBRCxHQUNBemUsRUFBQTBlLG9CQUFBLE9BQUFELEdBQ0FyYyxFQUFBdVcsUUFuREF2VyxFQUFBRyxHQUFBb1csTUFBQSxTQUFBcFcsR0FZQSxPQVZBaWMsRUFDQTVELEtBQUFyWSxHQUtBNFosTUFBQSxTQUFBMWMsR0FDQTJDLEVBQUFtYyxlQUFBOWUsS0FHQVEsTUFHQW1DLEVBQUE0QixPQUFBLENBR0FjLFNBQUEsRUFJQTZaLFVBQUEsRUFHQWhHLE1BQUEsU0FBQWlHLEtBR0EsSUFBQUEsSUFBQXhjLEVBQUF1YyxVQUFBdmMsRUFBQTBDLFdBS0ExQyxFQUFBMEMsU0FBQSxHQUdBLElBQUE4WixLQUFBeGMsRUFBQXVjLFVBQUEsR0FLQUgsRUFBQXBCLFlBQUF2ZCxFQUFBLENBQUF1QyxRQUlBQSxFQUFBdVcsTUFBQWlDLEtBQUE0RCxFQUFBNUQsS0FhQSxhQUFBL2EsRUFBQWdmLFlBQ0EsWUFBQWhmLEVBQUFnZixhQUFBaGYsRUFBQTZOLGdCQUFBb1IsU0FHQTllLEVBQUEwZCxXQUFBdGIsRUFBQXVXLFFBS0E5WSxFQUFBa08saUJBQUEsbUJBQUEwUSxHQUdBemUsRUFBQStOLGlCQUFBLE9BQUEwUSxJQVFBLElBQUFNLEVBQUEsU0FBQS9iLEVBQUFULEVBQUF0RixFQUFBTixFQUFBcWlCLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQXhqQixFQUFBLEVBQ0FpSSxFQUFBWCxFQUFBM0QsT0FDQThmLEVBQUEsTUFBQWxpQixFQUdBLGNBQUFrRixFQUFBbEYsR0FFQSxJQUFBdkIsS0FEQXNqQixHQUFBLEVBQ0EvaEIsRUFDQThoQixFQUFBL2IsRUFBQVQsRUFBQTdHLEVBQUF1QixFQUFBdkIsSUFBQSxFQUFBdWpCLEVBQUFDLFFBSUUsUUFBQXphLElBQUE5SCxJQUNGcWlCLEdBQUEsRUFFQWhlLEVBQUFyRSxLQUNBdWlCLEdBQUEsR0FHQUMsSUFHQUQsR0FDQTNjLEVBQUExRyxLQUFBbUgsRUFBQXJHLEdBQ0E0RixFQUFBLE9BSUE0YyxFQUFBNWMsRUFDQUEsRUFBQSxTQUFBZSxFQUFBckcsRUFBQU4sR0FDQSxPQUFBd2lCLEVBQUF0akIsS0FBQXVHLEVBQUFrQixHQUFBM0csTUFLQTRGLEdBQ0EsS0FBVTdHLEVBQUFpSSxFQUFTakksSUFDbkI2RyxFQUNBUyxFQUFBdEgsR0FBQXVCLEVBQUFpaUIsRUFDQXZpQixFQUNBQSxFQUFBZCxLQUFBbUgsRUFBQXRILEtBQUE2RyxFQUFBUyxFQUFBdEgsR0FBQXVCLEtBTUEsT0FBQStoQixFQUNBaGMsRUFJQW1jLEVBQ0E1YyxFQUFBMUcsS0FBQW1ILEdBR0FXLEVBQUFwQixFQUFBUyxFQUFBLEdBQUEvRixHQUFBZ2lCLEdBS0FHLEVBQUEsUUFDQUMsRUFBQSxZQUdBLFNBQUFDLEVBQUFDLEVBQUEvZ0IsR0FDQSxPQUFBQSxFQUFBZ2hCLGNBTUEsU0FBQUMsRUFBQUMsR0FDQSxPQUFBQSxFQUFBN2EsUUFBQXVhLEVBQUEsT0FBQXZhLFFBQUF3YSxFQUFBQyxHQUVBLElBQUFLLEVBQUEsU0FBQUMsR0FRQSxXQUFBQSxFQUFBMWUsVUFBQSxJQUFBMGUsRUFBQTFlLFlBQUEwZSxFQUFBMWUsVUFNQSxTQUFBMmUsSUFDQTVmLEtBQUF5RSxRQUFBdEMsRUFBQXNDLFFBQUFtYixFQUFBQyxNQUdBRCxFQUFBQyxJQUFBLEVBRUFELEVBQUF2aUIsVUFBQSxDQUVBOE8sTUFBQSxTQUFBd1QsR0FHQSxJQUFBampCLEVBQUFpakIsRUFBQTNmLEtBQUF5RSxTQTRCQSxPQXpCQS9ILElBQ0FBLEVBQUEsR0FLQWdqQixFQUFBQyxLQUlBQSxFQUFBMWUsU0FDQTBlLEVBQUEzZixLQUFBeUUsU0FBQS9ILEVBTUFQLE9BQUFDLGVBQUF1akIsRUFBQTNmLEtBQUF5RSxRQUFBLENBQ0EvSCxRQUNBb2pCLGNBQUEsTUFNQXBqQixHQUVBcWpCLElBQUEsU0FBQUosRUFBQUssRUFBQXRqQixHQUNBLElBQUF1akIsRUFDQTlULEVBQUFuTSxLQUFBbU0sTUFBQXdULEdBSUEsb0JBQUFLLEVBQ0E3VCxFQUFBcVQsRUFBQVEsSUFBQXRqQixPQU1BLElBQUF1akIsS0FBQUQsRUFDQTdULEVBQUFxVCxFQUFBUyxJQUFBRCxFQUFBQyxHQUdBLE9BQUE5VCxHQUVBN1AsSUFBQSxTQUFBcWpCLEVBQUEzaUIsR0FDQSxZQUFBd0gsSUFBQXhILEVBQ0FnRCxLQUFBbU0sTUFBQXdULEdBR0FBLEVBQUEzZixLQUFBeUUsVUFBQWtiLEVBQUEzZixLQUFBeUUsU0FBQSthLEVBQUF4aUIsS0FFQThoQixPQUFBLFNBQUFhLEVBQUEzaUIsRUFBQU4sR0FhQSxZQUFBOEgsSUFBQXhILEdBQ0FBLEdBQUEsaUJBQUFBLFFBQUF3SCxJQUFBOUgsRUFFQXNELEtBQUExRCxJQUFBcWpCLEVBQUEzaUIsSUFTQWdELEtBQUErZixJQUFBSixFQUFBM2lCLEVBQUFOLFFBSUE4SCxJQUFBOUgsSUFBQU0sSUFFQXdlLE9BQUEsU0FBQW1FLEVBQUEzaUIsR0FDQSxJQUFBdkIsRUFDQTBRLEVBQUF3VCxFQUFBM2YsS0FBQXlFLFNBRUEsUUFBQUQsSUFBQTJILEVBQUEsQ0FJQSxRQUFBM0gsSUFBQXhILEVBQUEsQ0FrQkF2QixHQVhBdUIsRUFKQXNILE1BQUFDLFFBQUF2SCxHQUlBQSxFQUFBa0IsSUFBQXNoQixJQUVBeGlCLEVBQUF3aUIsRUFBQXhpQixNQUlBbVAsRUFDQSxDQUFBblAsR0FDQUEsRUFBQStOLE1BQUFnUCxJQUFBLElBR0EzYSxPQUVBLEtBQUEzRCxZQUNBMFEsRUFBQW5QLEVBQUF2QixVQUtBK0ksSUFBQXhILEdBQUFtRixFQUFBK0MsY0FBQWlILE1BTUF3VCxFQUFBMWUsU0FDQTBlLEVBQUEzZixLQUFBeUUsY0FBQUQsU0FFQW1iLEVBQUEzZixLQUFBeUUsWUFJQXliLFFBQUEsU0FBQVAsR0FDQSxJQUFBeFQsRUFBQXdULEVBQUEzZixLQUFBeUUsU0FDQSxZQUFBRCxJQUFBMkgsSUFBQWhLLEVBQUErQyxjQUFBaUgsS0FHQSxJQUFBZ1UsRUFBQSxJQUFBUCxFQUVBUSxFQUFBLElBQUFSLEVBY0FTLEdBQUEsZ0NBQ0FDLEdBQUEsU0EyQkEsU0FBQUMsR0FBQWxkLEVBQUFyRyxFQUFBZ2pCLEdBQ0EsSUFBQWhrQixFQUlBLFFBQUF3SSxJQUFBd2IsR0FBQSxJQUFBM2MsRUFBQXBDLFNBSUEsR0FIQWpGLEVBQUEsUUFBQWdCLEVBQUE0SCxRQUFBMGIsR0FBQSxPQUFBdGEsY0FHQSxpQkFGQWdhLEVBQUEzYyxFQUFBdUksYUFBQTVQLElBRUEsQ0FDQSxJQUNBZ2tCLEVBcENBLFNBQUFBLEdBQ0EsZUFBQUEsR0FJQSxVQUFBQSxJQUlBLFNBQUFBLEVBQ0EsS0FJQUEsT0FBQSxJQUNBQSxFQUdBSyxHQUFBM1UsS0FBQXNVLEdBQ0FRLEtBQUFDLE1BQUFULEdBR0FBLEdBY0FVLENBQUFWLEdBQ0ksTUFBQXJWLElBR0p5VixFQUFBTCxJQUFBMWMsRUFBQXJHLEVBQUFnakIsUUFFQUEsT0FBQXhiLEVBR0EsT0FBQXdiLEVBR0E3ZCxFQUFBNEIsT0FBQSxDQUNBbWMsUUFBQSxTQUFBN2MsR0FDQSxPQUFBK2MsRUFBQUYsUUFBQTdjLElBQUE4YyxFQUFBRCxRQUFBN2MsSUFHQTJjLEtBQUEsU0FBQTNjLEVBQUFySCxFQUFBZ2tCLEdBQ0EsT0FBQUksRUFBQXRCLE9BQUF6YixFQUFBckgsRUFBQWdrQixJQUdBVyxXQUFBLFNBQUF0ZCxFQUFBckgsR0FDQW9rQixFQUFBNUUsT0FBQW5ZLEVBQUFySCxJQUtBNGtCLE1BQUEsU0FBQXZkLEVBQUFySCxFQUFBZ2tCLEdBQ0EsT0FBQUcsRUFBQXJCLE9BQUF6YixFQUFBckgsRUFBQWdrQixJQUdBYSxZQUFBLFNBQUF4ZCxFQUFBckgsR0FDQW1rQixFQUFBM0UsT0FBQW5ZLEVBQUFySCxNQUlBbUcsRUFBQUcsR0FBQXlCLE9BQUEsQ0FDQWljLEtBQUEsU0FBQWhqQixFQUFBTixHQUNBLElBQUFqQixFQUFBTyxFQUFBZ2tCLEVBQ0EzYyxFQUFBckQsS0FBQSxHQUNBME0sRUFBQXJKLEtBQUE2RSxXQUdBLFFBQUExRCxJQUFBeEgsRUFBQSxDQUNBLEdBQUFnRCxLQUFBWixTQUNBNGdCLEVBQUFJLEVBQUE5akIsSUFBQStHLEdBRUEsSUFBQUEsRUFBQXBDLFdBQUFrZixFQUFBN2pCLElBQUErRyxFQUFBLGtCQUVBLElBREE1SCxFQUFBaVIsRUFBQXROLE9BQ0EzRCxLQUlBaVIsRUFBQWpSLElBRUEsS0FEQU8sRUFBQTBRLEVBQUFqUixHQUFBTyxNQUNBd0UsUUFBQSxXQUNBeEUsRUFBQXdqQixFQUFBeGpCLEVBQUFxRSxNQUFBLElBQ0FrZ0IsR0FBQWxkLEVBQUFySCxFQUFBZ2tCLEVBQUFoa0IsS0FJQW1rQixFQUFBSixJQUFBMWMsRUFBQSxtQkFJQSxPQUFBMmMsRUFJQSx1QkFBQWhqQixFQUNBZ0QsS0FBQW1ELEtBQUEsV0FDQWlkLEVBQUFMLElBQUEvZixLQUFBaEQsS0FJQThoQixFQUFBOWUsS0FBQSxTQUFBdEQsR0FDQSxJQUFBc2pCLEVBT0EsR0FBQTNjLFFBQUFtQixJQUFBOUgsRUFLQSxZQUFBOEgsS0FEQXdiLEVBQUFJLEVBQUE5akIsSUFBQStHLEVBQUFyRyxJQUVBZ2pCLE9BTUF4YixLQURBd2IsRUFBQU8sR0FBQWxkLEVBQUFyRyxJQUVBZ2pCLE9BSUEsRUFJQWhnQixLQUFBbUQsS0FBQSxXQUdBaWQsRUFBQUwsSUFBQS9mLEtBQUFoRCxFQUFBTixNQUVHLEtBQUFBLEVBQUF5QyxVQUFBQyxPQUFBLFlBR0h1aEIsV0FBQSxTQUFBM2pCLEdBQ0EsT0FBQWdELEtBQUFtRCxLQUFBLFdBQ0FpZCxFQUFBNUUsT0FBQXhiLEtBQUFoRCxRQU1BbUYsRUFBQTRCLE9BQUEsQ0FDQW9YLE1BQUEsU0FBQTlYLEVBQUFqQyxFQUFBNGUsR0FDQSxJQUFBN0UsRUFFQSxHQUFBOVgsRUFZQSxPQVhBakMsTUFBQSxjQUNBK1osRUFBQWdGLEVBQUE3akIsSUFBQStHLEVBQUFqQyxHQUdBNGUsS0FDQTdFLEdBQUE3VyxNQUFBQyxRQUFBeWIsR0FDQTdFLEVBQUFnRixFQUFBckIsT0FBQXpiLEVBQUFqQyxFQUFBZSxFQUFBa0QsVUFBQTJhLElBRUE3RSxFQUFBNWEsS0FBQXlmLElBR0E3RSxHQUFBLElBSUEyRixRQUFBLFNBQUF6ZCxFQUFBakMsR0FDQUEsS0FBQSxLQUVBLElBQUErWixFQUFBaFosRUFBQWdaLE1BQUE5WCxFQUFBakMsR0FDQTJmLEVBQUE1RixFQUFBL2IsT0FDQWtELEVBQUE2WSxFQUFBOU8sUUFDQTJVLEVBQUE3ZSxFQUFBOGUsWUFBQTVkLEVBQUFqQyxHQU1BLGVBQUFrQixJQUNBQSxFQUFBNlksRUFBQTlPLFFBQ0EwVSxLQUdBemUsSUFJQSxPQUFBbEIsR0FDQStaLEVBQUF6TCxRQUFBLHFCQUlBc1IsRUFBQUUsS0FDQTVlLEVBQUExRyxLQUFBeUgsRUFwQkEsV0FDQWxCLEVBQUEyZSxRQUFBemQsRUFBQWpDLElBbUJBNGYsS0FHQUQsR0FBQUMsR0FDQUEsRUFBQXBOLE1BQUF5SCxRQUtBNEYsWUFBQSxTQUFBNWQsRUFBQWpDLEdBQ0EsSUFBQXBFLEVBQUFvRSxFQUFBLGFBQ0EsT0FBQStlLEVBQUE3akIsSUFBQStHLEVBQUFyRyxJQUFBbWpCLEVBQUFyQixPQUFBemIsRUFBQXJHLEVBQUEsQ0FDQTRXLE1BQUF6UixFQUFBeVksVUFBQSxlQUFBdkIsSUFBQSxXQUNBOEcsRUFBQTNFLE9BQUFuWSxFQUFBLENBQUFqQyxFQUFBLFFBQUFwRSxXQU1BbUYsRUFBQUcsR0FBQXlCLE9BQUEsQ0FDQW9YLE1BQUEsU0FBQS9aLEVBQUE0ZSxHQUNBLElBQUFtQixFQUFBLEVBUUEsTUFOQSxpQkFBQS9mLElBQ0E0ZSxFQUFBNWUsRUFDQUEsRUFBQSxLQUNBK2YsS0FHQWhpQixVQUFBQyxPQUFBK2hCLEVBQ0FoZixFQUFBZ1osTUFBQW5iLEtBQUEsR0FBQW9CLFFBR0FvRCxJQUFBd2IsRUFDQWhnQixLQUNBQSxLQUFBbUQsS0FBQSxXQUNBLElBQUFnWSxFQUFBaFosRUFBQWdaLE1BQUFuYixLQUFBb0IsRUFBQTRlLEdBR0E3ZCxFQUFBOGUsWUFBQWpoQixLQUFBb0IsR0FFQSxPQUFBQSxHQUFBLGVBQUErWixFQUFBLElBQ0FoWixFQUFBMmUsUUFBQTlnQixLQUFBb0IsTUFJQTBmLFFBQUEsU0FBQTFmLEdBQ0EsT0FBQXBCLEtBQUFtRCxLQUFBLFdBQ0FoQixFQUFBMmUsUUFBQTlnQixLQUFBb0IsTUFHQWdnQixXQUFBLFNBQUFoZ0IsR0FDQSxPQUFBcEIsS0FBQW1iLE1BQUEvWixHQUFBLFVBS0FxWixRQUFBLFNBQUFyWixFQUFBSixHQUNBLElBQUF5TixFQUNBNFMsRUFBQSxFQUNBQyxFQUFBbmYsRUFBQXlaLFdBQ0FoTSxFQUFBNVAsS0FDQXZFLEVBQUF1RSxLQUFBWixPQUNBaWIsRUFBQSxhQUNBZ0gsR0FDQUMsRUFBQW5FLFlBQUF2TixFQUFBLENBQUFBLEtBVUEsSUFOQSxpQkFBQXhPLElBQ0FKLEVBQUFJLEVBQ0FBLE9BQUFvRCxHQUVBcEQsS0FBQSxLQUVBM0YsTUFDQWdULEVBQUEwUixFQUFBN2pCLElBQUFzVCxFQUFBblUsR0FBQTJGLEVBQUEsZ0JBQ0FxTixFQUFBbUYsUUFDQXlOLElBQ0E1UyxFQUFBbUYsTUFBQXlGLElBQUFnQixJQUlBLE9BREFBLElBQ0FpSCxFQUFBN0csUUFBQXpaLE1BR0EsSUFBQXVnQixHQUFBLHNDQUFBM2lCLE9BRUE0aUIsR0FBQSxJQUFBblosT0FBQSxpQkFBQWtaLEdBQUEsbUJBR0FFLEdBQUEsZ0NBRUFDLEdBQUEsU0FBQXJlLEVBQUFtSixHQU9BLGdCQUhBbkosRUFBQW1KLEdBQUFuSixHQUdBc2UsTUFBQUMsU0FDQSxLQUFBdmUsRUFBQXNlLE1BQUFDLFNBTUF6ZixFQUFBNkUsU0FBQTNELEVBQUE4SCxjQUFBOUgsSUFFQSxTQUFBbEIsRUFBQTBmLElBQUF4ZSxFQUFBLFlBR0F5ZSxHQUFBLFNBQUF6ZSxFQUFBVyxFQUFBWixFQUFBaVAsR0FDQSxJQUFBclAsRUFBQWhILEVBQ0ErbEIsRUFBQSxHQUdBLElBQUEvbEIsS0FBQWdJLEVBQ0ErZCxFQUFBL2xCLEdBQUFxSCxFQUFBc2UsTUFBQTNsQixHQUNBcUgsRUFBQXNlLE1BQUEzbEIsR0FBQWdJLEVBQUFoSSxHQU1BLElBQUFBLEtBSEFnSCxFQUFBSSxFQUFBRSxNQUFBRCxFQUFBZ1AsR0FBQSxJQUdBck8sRUFDQVgsRUFBQXNlLE1BQUEzbEIsR0FBQStsQixFQUFBL2xCLEdBR0EsT0FBQWdILEdBTUEsU0FBQWdmLEdBQUEzZSxFQUFBNGMsRUFBQWdDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQUMsRUFDQUMsRUFBQSxHQUNBQyxFQUFBSixFQUNBLFdBQ0EsT0FBQUEsRUFBQXBWLE9BRUEsV0FDQSxPQUFBM0ssRUFBQTBmLElBQUF4ZSxFQUFBNGMsRUFBQSxLQUVBc0MsRUFBQUQsSUFDQUUsRUFBQVAsS0FBQSxLQUFBOWYsRUFBQXNnQixVQUFBeEMsR0FBQSxTQUdBeUMsR0FBQXZnQixFQUFBc2dCLFVBQUF4QyxJQUFBLE9BQUF1QyxJQUFBRCxJQUNBZixHQUFBcFcsS0FBQWpKLEVBQUEwZixJQUFBeGUsRUFBQTRjLElBRUEsR0FBQXlDLEtBQUEsS0FBQUYsRUFBQSxDQVlBLElBUkFELEdBQUEsRUFHQUMsS0FBQUUsRUFBQSxHQUdBQSxHQUFBSCxHQUFBLEVBRUFGLEtBSUFsZ0IsRUFBQXdmLE1BQUF0ZSxFQUFBNGMsRUFBQXlDLEVBQUFGLElBQ0EsRUFBQUosSUFBQSxHQUFBQSxFQUFBRSxJQUFBQyxHQUFBLFVBQ0FGLEVBQUEsR0FFQUssR0FBQU4sRUFJQU0sR0FBQSxFQUNBdmdCLEVBQUF3ZixNQUFBdGUsRUFBQTRjLEVBQUF5QyxFQUFBRixHQUdBUCxLQUFBLEdBZ0JBLE9BYkFBLElBQ0FTLE9BQUFILEdBQUEsRUFHQUosRUFBQUYsRUFBQSxHQUNBUyxHQUFBVCxFQUFBLE1BQUFBLEVBQUEsSUFDQUEsRUFBQSxHQUNBQyxJQUNBQSxFQUFBTSxPQUNBTixFQUFBblEsTUFBQTJRLEVBQ0FSLEVBQUF0ZSxJQUFBdWUsSUFHQUEsRUFJQSxJQUFBUSxHQUFBLEdBRUEsU0FBQUMsR0FBQXZmLEdBQ0EsSUFBQXNTLEVBQ0FsVSxFQUFBNEIsRUFBQThILGNBQ0FRLEVBQUF0SSxFQUFBc0ksU0FDQWlXLEVBQUFlLEdBQUFoWCxHQUVBLE9BQUFpVyxJQUlBak0sRUFBQWxVLEVBQUFvaEIsS0FBQTlnQixZQUFBTixFQUFBRyxjQUFBK0osSUFDQWlXLEVBQUF6ZixFQUFBMGYsSUFBQWxNLEVBQUEsV0FFQUEsRUFBQTNULFdBQUFDLFlBQUEwVCxHQUVBLFNBQUFpTSxJQUNBQSxFQUFBLFNBRUFlLEdBQUFoWCxHQUFBaVcsRUFFQUEsR0FHQSxTQUFBa0IsR0FBQWxULEVBQUFtVCxHQU9BLElBTkEsSUFBQW5CLEVBQUF2ZSxFQUNBMmYsRUFBQSxHQUNBN0osRUFBQSxFQUNBL1osRUFBQXdRLEVBQUF4USxPQUdRK1osRUFBQS9aLEVBQWdCK1osS0FDeEI5VixFQUFBdU0sRUFBQXVKLElBQ0F3SSxRQUlBQyxFQUFBdmUsRUFBQXNlLE1BQUFDLFFBQ0FtQixHQUtBLFNBQUFuQixJQUNBb0IsRUFBQTdKLEdBQUFnSCxFQUFBN2pCLElBQUErRyxFQUFBLGlCQUNBMmYsRUFBQTdKLEtBQ0E5VixFQUFBc2UsTUFBQUMsUUFBQSxLQUdBLEtBQUF2ZSxFQUFBc2UsTUFBQUMsU0FBQUYsR0FBQXJlLEtBQ0EyZixFQUFBN0osR0FBQXlKLEdBQUF2ZixLQUdBLFNBQUF1ZSxJQUNBb0IsRUFBQTdKLEdBQUEsT0FHQWdILEVBQUFKLElBQUExYyxFQUFBLFVBQUF1ZSxLQU1BLElBQUF6SSxFQUFBLEVBQWlCQSxFQUFBL1osRUFBZ0IrWixJQUNqQyxNQUFBNkosRUFBQTdKLEtBQ0F2SixFQUFBdUosR0FBQXdJLE1BQUFDLFFBQUFvQixFQUFBN0osSUFJQSxPQUFBdkosRUFHQXpOLEVBQUFHLEdBQUF5QixPQUFBLENBQ0FnZixLQUFBLFdBQ0EsT0FBQUQsR0FBQTlpQixNQUFBLElBRUFpakIsS0FBQSxXQUNBLE9BQUFILEdBQUE5aUIsT0FFQWtqQixPQUFBLFNBQUFuSCxHQUNBLHdCQUFBQSxFQUNBQSxFQUFBL2IsS0FBQStpQixPQUFBL2lCLEtBQUFpakIsT0FHQWpqQixLQUFBbUQsS0FBQSxXQUNBdWUsR0FBQTFoQixNQUNBbUMsRUFBQW5DLE1BQUEraUIsT0FFQTVnQixFQUFBbkMsTUFBQWlqQixZQUtBLElBQUFFLEdBQUEsd0JBRUFDLEdBQUEsaUNBRUFDLEdBQUEscUNBS0FDLEdBQUEsQ0FHQUMsT0FBQSwrQ0FLQUMsTUFBQSx5QkFDQUMsSUFBQSw4Q0FDQUMsR0FBQSx3Q0FDQUMsR0FBQSxpREFFQUMsU0FBQSxXQVVBLFNBQUFDLEdBQUF4aEIsRUFBQW1NLEdBSUEsSUFBQXhMLEVBWUEsT0FUQUEsT0FEQSxJQUFBWCxFQUFBa0oscUJBQ0FsSixFQUFBa0oscUJBQUFpRCxHQUFBLFVBRUUsSUFBQW5NLEVBQUEySixpQkFDRjNKLEVBQUEySixpQkFBQXdDLEdBQUEsS0FHQSxRQUdBaEssSUFBQWdLLE1BQUE3QyxFQUFBdEosRUFBQW1NLEdBQ0FyTSxFQUFBYyxNQUFBLENBQUFaLEdBQUFXLEdBR0FBLEVBS0EsU0FBQThnQixHQUFBL2dCLEVBQUFnaEIsR0FJQSxJQUhBLElBQUF0b0IsRUFBQSxFQUNBQyxFQUFBcUgsRUFBQTNELE9BRVEzRCxFQUFBQyxFQUFPRCxJQUNmMGtCLEVBQUFKLElBQ0FoZCxFQUFBdEgsR0FDQSxjQUNBc29CLEdBQUE1RCxFQUFBN2pCLElBQUF5bkIsRUFBQXRvQixHQUFBLGVBdkNBNm5CLEdBQUFVLFNBQUFWLEdBQUFDLE9BRUFELEdBQUFXLE1BQUFYLEdBQUFZLE1BQUFaLEdBQUFhLFNBQUFiLEdBQUFjLFFBQUFkLEdBQUFFLE1BQ0FGLEdBQUFlLEdBQUFmLEdBQUFLLEdBMENBLElBOEZBVyxHQUNBM1YsR0EvRkE0VixHQUFBLFlBRUEsU0FBQUMsR0FBQXpoQixFQUFBVixFQUFBb2lCLEVBQUFDLEVBQUFDLEdBT0EsSUFOQSxJQUFBdGhCLEVBQUFvTCxFQUFBRCxFQUFBb1csRUFBQTVkLEVBQUFyRCxFQUNBa2hCLEVBQUF4aUIsRUFBQXlpQix5QkFDQUMsRUFBQSxHQUNBdHBCLEVBQUEsRUFDQUMsRUFBQXFILEVBQUEzRCxPQUVRM0QsRUFBQUMsRUFBT0QsSUFHZixJQUZBNEgsRUFBQU4sRUFBQXRILEtBRUEsSUFBQTRILEVBR0EsY0FBQW5CLEVBQUFtQixHQUlBbEIsRUFBQWMsTUFBQThoQixFQUFBMWhCLEVBQUFwQyxTQUFBLENBQUFvQyxXQUdJLEdBQUFraEIsR0FBQTdZLEtBQUFySSxHQUlBLENBVUosSUFUQW9MLEtBQUFvVyxFQUFBOWlCLFlBQUFNLEVBQUFULGNBQUEsUUFHQTRNLEdBQUE0VSxHQUFBaFksS0FBQS9ILElBQUEsWUFBQTJDLGNBQ0E0ZSxFQUFBdEIsR0FBQTlVLElBQUE4VSxHQUFBTSxTQUNBblYsRUFBQUMsVUFBQWtXLEVBQUEsR0FBQXppQixFQUFBNmlCLGNBQUEzaEIsR0FBQXVoQixFQUFBLEdBR0FqaEIsRUFBQWloQixFQUFBLEdBQ0FqaEIsS0FDQThLLElBQUF5RCxVQUtBL1AsRUFBQWMsTUFBQThoQixFQUFBdFcsRUFBQS9ELGFBR0ErRCxFQUFBb1csRUFBQXZVLFlBR0FELFlBQUEsUUF6QkEwVSxFQUFBeGtCLEtBQUE4QixFQUFBNGlCLGVBQUE1aEIsSUFrQ0EsSUFIQXdoQixFQUFBeFUsWUFBQSxHQUVBNVUsRUFBQSxFQUNBNEgsRUFBQTBoQixFQUFBdHBCLE1BR0EsR0FBQWlwQixHQUFBdmlCLEVBQUFvRCxRQUFBbEMsRUFBQXFoQixJQUFBLEVBQ0FDLEdBQ0FBLEVBQUFwa0IsS0FBQThDLFFBZ0JBLEdBWEEyRCxFQUFBN0UsRUFBQTZFLFNBQUEzRCxFQUFBOEgsY0FBQTlILEdBR0FvTCxFQUFBb1YsR0FBQWdCLEVBQUE5aUIsWUFBQXNCLEdBQUEsVUFHQTJELEdBQ0E4YyxHQUFBclYsR0FJQWdXLEVBRUEsSUFEQTlnQixFQUFBLEVBQ0FOLEVBQUFvTCxFQUFBOUssTUFDQTBmLEdBQUEzWCxLQUFBckksRUFBQWpDLE1BQUEsS0FDQXFqQixFQUFBbGtCLEtBQUE4QyxHQU1BLE9BQUF3aEIsRUFNQVAsR0FEQTFrQixFQUFBa2xCLHlCQUNBL2lCLFlBQUFuQyxFQUFBZ0MsY0FBQSxTQUNBK00sR0FBQS9PLEVBQUFnQyxjQUFBLFVBTUFpSyxhQUFBLGdCQUNBOEMsR0FBQTlDLGFBQUEscUJBQ0E4QyxHQUFBOUMsYUFBQSxZQUVBeVksR0FBQXZpQixZQUFBNE0sSUFJQTdOLEVBQUFva0IsV0FBQVosR0FBQWEsV0FBQSxHQUFBQSxXQUFBLEdBQUFqVCxVQUFBdUIsUUFJQTZRLEdBQUE1VixVQUFBLHlCQUNBNU4sRUFBQXNrQixpQkFBQWQsR0FBQWEsV0FBQSxHQUFBalQsVUFBQXlGLGFBRUEsSUFBQWxLLEdBQUE3TixFQUFBNk4sZ0JBS0E0WCxHQUFBLE9BQ0FDLEdBQUEsaURBQ0FDLEdBQUEsc0JBRUEsU0FBQUMsS0FDQSxTQUdBLFNBQUFDLEtBQ0EsU0FLQSxTQUFBQyxLQUNBLElBQ0EsT0FBQTlsQixFQUFBd1QsY0FDRSxNQUFBM1UsS0FHRixTQUFBa25CLEdBQUF0aUIsRUFBQXVpQixFQUFBeGpCLEVBQUE0ZCxFQUFBMWQsRUFBQXVqQixHQUNBLElBQUFDLEVBQUExa0IsRUFHQSxvQkFBQXdrQixFQUFBLENBU0EsSUFBQXhrQixJQU5BLGlCQUFBZ0IsSUFHQTRkLEtBQUE1ZCxFQUNBQSxPQUFBb0MsR0FFQW9oQixFQUNBRCxHQUFBdGlCLEVBQUFqQyxFQUFBZ0IsRUFBQTRkLEVBQUE0RixFQUFBeGtCLEdBQUF5a0IsR0FFQSxPQUFBeGlCLEVBc0JBLEdBbkJBLE1BQUEyYyxHQUFBLE1BQUExZCxHQUdBQSxFQUFBRixFQUNBNGQsRUFBQTVkLE9BQUFvQyxHQUNFLE1BQUFsQyxJQUNGLGlCQUFBRixHQUdBRSxFQUFBMGQsRUFDQUEsT0FBQXhiLElBSUFsQyxFQUFBMGQsRUFDQUEsRUFBQTVkLEVBQ0FBLE9BQUFvQyxLQUdBLElBQUFsQyxFQUNBQSxFQUFBbWpCLFFBQ0UsSUFBQW5qQixFQUNGLE9BQUFlLEVBZUEsT0FaQSxJQUFBd2lCLElBQ0FDLEVBQUF4akIsR0FDQUEsRUFBQSxTQUFBeWpCLEdBSUEsT0FEQTVqQixJQUFBNmpCLElBQUFELEdBQ0FELEVBQUF4aUIsTUFBQXRELEtBQUFiLGFBSUEyRyxLQUFBZ2dCLEVBQUFoZ0IsT0FBQWdnQixFQUFBaGdCLEtBQUEzRCxFQUFBMkQsU0FFQXpDLEVBQUFGLEtBQUEsV0FDQWhCLEVBQUE0akIsTUFBQTFNLElBQUFyWixLQUFBNGxCLEVBQUF0akIsRUFBQTBkLEVBQUE1ZCxLQVFBRCxFQUFBNGpCLE1BQUEsQ0FFQXJtQixPQUFBLEdBRUEyWixJQUFBLFNBQUFoVyxFQUFBdWlCLEVBQUFqWixFQUFBcVQsRUFBQTVkLEdBRUEsSUFBQTZqQixFQUFBQyxFQUFBelgsRUFDQTBYLEVBQUF4cEIsRUFBQXlwQixFQUNBckosRUFBQXNKLEVBQUFqbEIsRUFBQWtsQixFQUFBQyxFQUNBQyxFQUFBckcsRUFBQTdqQixJQUFBK0csR0FHQSxHQUFBbWpCLEVBdUNBLElBbENBN1osWUFFQUEsR0FEQXNaLEVBQUF0WixHQUNBQSxRQUNBdkssRUFBQTZqQixFQUFBN2pCLFVBS0FBLEdBQ0FELEVBQUFtTSxLQUFBTSxnQkFBQW5CLEdBQUFyTCxHQUlBdUssRUFBQTdHLE9BQ0E2RyxFQUFBN0csS0FBQTNELEVBQUEyRCxTQUlBcWdCLEVBQUFLLEVBQUFMLFVBQ0FBLEVBQUFLLEVBQUFMLE9BQUEsS0FFQUQsRUFBQU0sRUFBQUMsVUFDQVAsRUFBQU0sRUFBQUMsT0FBQSxTQUFBOWIsR0FJQSxnQkFBQXhJLEtBQUE0akIsTUFBQVcsWUFBQS9iLEVBQUF2SixLQUNBZSxFQUFBNGpCLE1BQUFZLFNBQUFyakIsTUFBQUQsRUFBQWxFLGdCQUFBcUYsSUFNQTdILEdBREFpcEIsTUFBQSxJQUFBN2EsTUFBQWdQLElBQUEsTUFDQTNhLE9BQ0F6QyxLQUVBeUUsRUFBQW1sQixHQURBOVgsRUFBQThXLEdBQUFuYSxLQUFBd2EsRUFBQWpwQixLQUFBLElBQ0EsR0FDQTJwQixHQUFBN1gsRUFBQSxRQUFBcFEsTUFBQSxLQUFBd0YsT0FHQXpDLElBS0EyYixFQUFBNWEsRUFBQTRqQixNQUFBaEosUUFBQTNiLElBQUEsR0FHQUEsR0FBQWdCLEVBQUEyYSxFQUFBNkosYUFBQTdKLEVBQUE4SixXQUFBemxCLEVBR0EyYixFQUFBNWEsRUFBQTRqQixNQUFBaEosUUFBQTNiLElBQUEsR0FHQWdsQixFQUFBamtCLEVBQUE0QixPQUFBLENBQ0EzQyxPQUNBbWxCLFdBQ0F2RyxPQUNBclQsVUFDQTdHLEtBQUE2RyxFQUFBN0csS0FDQTFELFdBQ0ErRyxhQUFBL0csR0FBQUQsRUFBQXdOLEtBQUE1RSxNQUFBNUIsYUFBQXVDLEtBQUF0SixHQUNBMGtCLFVBQUFSLEVBQUFub0IsS0FBQSxNQUNJOG5CLElBR0pJLEVBQUFGLEVBQUEva0IsT0FDQWlsQixFQUFBRixFQUFBL2tCLEdBQUEsSUFDQTJsQixjQUFBLEVBR0FoSyxFQUFBaUssUUFDQSxJQUFBakssRUFBQWlLLE1BQUFwckIsS0FBQXlILEVBQUEyYyxFQUFBc0csRUFBQUosSUFFQTdpQixFQUFBeUssa0JBQ0F6SyxFQUFBeUssaUJBQUExTSxFQUFBOGtCLElBS0FuSixFQUFBMUQsTUFDQTBELEVBQUExRCxJQUFBemQsS0FBQXlILEVBQUEraUIsR0FFQUEsRUFBQXpaLFFBQUE3RyxPQUNBc2dCLEVBQUF6WixRQUFBN0csS0FBQTZHLEVBQUE3RyxPQUtBMUQsRUFDQWlrQixFQUFBdmlCLE9BQUF1aUIsRUFBQVUsZ0JBQUEsRUFBQVgsR0FFQUMsRUFBQTlsQixLQUFBNmxCLEdBSUFqa0IsRUFBQTRqQixNQUFBcm1CLE9BQUEwQixJQUFBLElBTUFvYSxPQUFBLFNBQUFuWSxFQUFBdWlCLEVBQUFqWixFQUFBdkssRUFBQTZrQixHQUVBLElBQUF0akIsRUFBQXVqQixFQUFBelksRUFDQTBYLEVBQUF4cEIsRUFBQXlwQixFQUNBckosRUFBQXNKLEVBQUFqbEIsRUFBQWtsQixFQUFBQyxFQUNBQyxFQUFBckcsRUFBQUQsUUFBQTdjLElBQUE4YyxFQUFBN2pCLElBQUErRyxHQUVBLEdBQUFtakIsSUFBQUwsRUFBQUssRUFBQUwsUUFBQSxDQU9BLElBREF4cEIsR0FEQWlwQixNQUFBLElBQUE3YSxNQUFBZ1AsSUFBQSxNQUNBM2EsT0FDQXpDLEtBTUEsR0FKQXlFLEVBQUFtbEIsR0FEQTlYLEVBQUE4VyxHQUFBbmEsS0FBQXdhLEVBQUFqcEIsS0FBQSxJQUNBLEdBQ0EycEIsR0FBQTdYLEVBQUEsUUFBQXBRLE1BQUEsS0FBQXdGLE9BR0F6QyxFQUFBLENBZUEsSUFSQTJiLEVBQUE1YSxFQUFBNGpCLE1BQUFoSixRQUFBM2IsSUFBQSxHQUVBaWxCLEVBQUFGLEVBREEva0IsR0FBQWdCLEVBQUEyYSxFQUFBNkosYUFBQTdKLEVBQUE4SixXQUFBemxCLElBQ0EsR0FDQXFOLElBQUEsSUFDQSxJQUFBcEcsT0FBQSxVQUFBaWUsRUFBQW5vQixLQUFBLDRCQUdBK29CLEVBQUF2akIsRUFBQTBpQixFQUFBam5CLE9BQ0F1RSxLQUNBeWlCLEVBQUFDLEVBQUExaUIsSUFFQXNqQixHQUFBVixJQUFBSCxFQUFBRyxVQUNBNVosS0FBQTdHLE9BQUFzZ0IsRUFBQXRnQixNQUNBMkksTUFBQS9DLEtBQUEwYSxFQUFBVSxZQUNBMWtCLE9BQUFna0IsRUFBQWhrQixXQUNBLE9BQUFBLElBQUFna0IsRUFBQWhrQixZQUNBaWtCLEVBQUF2aUIsT0FBQUgsRUFBQSxHQUVBeWlCLEVBQUFoa0IsVUFDQWlrQixFQUFBVSxnQkFFQWhLLEVBQUF2QixRQUNBdUIsRUFBQXZCLE9BQUE1ZixLQUFBeUgsRUFBQStpQixJQU9BYyxJQUFBYixFQUFBam5CLFNBQ0EyZCxFQUFBb0ssV0FDQSxJQUFBcEssRUFBQW9LLFNBQUF2ckIsS0FBQXlILEVBQUFpakIsRUFBQUUsRUFBQUMsU0FFQXRrQixFQUFBaWxCLFlBQUEvakIsRUFBQWpDLEVBQUFvbEIsRUFBQUMsZUFHQU4sRUFBQS9rQixTQTFDQSxJQUFBQSxLQUFBK2tCLEVBQ0Foa0IsRUFBQTRqQixNQUFBdkssT0FBQW5ZLEVBQUFqQyxFQUFBd2tCLEVBQUFqcEIsR0FBQWdRLEVBQUF2SyxHQUFBLEdBOENBRCxFQUFBK0MsY0FBQWloQixJQUNBaEcsRUFBQTNFLE9BQUFuWSxFQUFBLG1CQUlBc2pCLFNBQUEsU0FBQVUsR0FHQSxJQUVBNXJCLEVBQUFrSSxFQUFBWCxFQUFBd1AsRUFBQTRULEVBQUFrQixFQUZBdkIsRUFBQTVqQixFQUFBNGpCLE1BQUF3QixJQUFBRixHQUdBaFYsRUFBQSxJQUFBL04sTUFBQW5GLFVBQUFDLFFBQ0FpbkIsR0FBQWxHLEVBQUE3akIsSUFBQTBELEtBQUEsZUFBb0QrbEIsRUFBQTNrQixPQUFBLEdBQ3BEMmIsRUFBQTVhLEVBQUE0akIsTUFBQWhKLFFBQUFnSixFQUFBM2tCLE9BQUEsR0FLQSxJQUZBaVIsRUFBQSxHQUFBMFQsRUFFQXRxQixFQUFBLEVBQWNBLEVBQUEwRCxVQUFBQyxPQUFzQjNELElBQ3BDNFcsRUFBQTVXLEdBQUEwRCxVQUFBMUQsR0FNQSxHQUhBc3FCLEVBQUF5QixlQUFBeG5CLE1BR0ErYyxFQUFBMEssY0FBQSxJQUFBMUssRUFBQTBLLFlBQUE3ckIsS0FBQW9FLEtBQUErbEIsR0FBQSxDQVNBLElBSkF1QixFQUFBbmxCLEVBQUE0akIsTUFBQU0sU0FBQXpxQixLQUFBb0UsS0FBQStsQixFQUFBTSxHQUdBNXFCLEVBQUEsR0FDQStXLEVBQUE4VSxFQUFBN3JCLFFBQUFzcUIsRUFBQTJCLHdCQUlBLElBSEEzQixFQUFBNEIsY0FBQW5WLEVBQUFuUCxLQUVBTSxFQUFBLEdBQ0F5aUIsRUFBQTVULEVBQUE2VCxTQUFBMWlCLFFBQ0FvaUIsRUFBQTZCLGlDQUlBN0IsRUFBQThCLGFBQUE5QixFQUFBOEIsV0FBQW5jLEtBQUEwYSxFQUFBVSxhQUVBZixFQUFBSyxZQUNBTCxFQUFBL0YsS0FBQW9HLEVBQUFwRyxVQUtBeGIsS0FIQXhCLElBQUFiLEVBQUE0akIsTUFBQWhKLFFBQUFxSixFQUFBRyxXQUFBLElBQStERSxRQUMvREwsRUFBQXpaLFNBQUFySixNQUFBa1AsRUFBQW5QLEtBQUFnUCxNQUdBLEtBQUEwVCxFQUFBelUsT0FBQXRPLEtBQ0EraUIsRUFBQStCLGlCQUNBL0IsRUFBQWdDLG9CQVlBLE9BSkFoTCxFQUFBaUwsY0FDQWpMLEVBQUFpTCxhQUFBcHNCLEtBQUFvRSxLQUFBK2xCLEdBR0FBLEVBQUF6VSxTQUdBK1UsU0FBQSxTQUFBTixFQUFBTSxHQUNBLElBQUE1cUIsRUFBQTJxQixFQUFBcFcsRUFBQWlZLEVBQUFDLEVBQ0FaLEVBQUEsR0FDQVAsRUFBQVYsRUFBQVUsY0FDQWphLEVBQUFpWixFQUFBcG5CLE9BR0EsR0FBQW9vQixHQUlBamEsRUFBQTdMLFlBT0EsVUFBQThrQixFQUFBM2tCLE1BQUEya0IsRUFBQWpTLFFBQUEsR0FFQSxLQUFVaEgsSUFBQTlNLEtBQWM4TSxJQUFBOUssWUFBQWhDLEtBSXhCLE9BQUE4TSxFQUFBN0wsV0FBQSxVQUFBOGtCLEVBQUEza0IsT0FBQSxJQUFBMEwsRUFBQXZDLFVBQUEsQ0FHQSxJQUZBMGQsRUFBQSxHQUNBQyxFQUFBLEdBQ0F6c0IsRUFBQSxFQUFpQkEsRUFBQXNyQixFQUFtQnRyQixTQU1wQytJLElBQUEwakIsRUFGQWxZLEdBSEFvVyxFQUFBQyxFQUFBNXFCLElBR0EyRyxTQUFBLE9BR0E4bEIsRUFBQWxZLEdBQUFvVyxFQUFBamQsYUFDQWhILEVBQUE2TixFQUFBaFEsTUFBQW1aLE1BQUFyTSxJQUFBLEVBQ0EzSyxFQUFBbU0sS0FBQTBCLEVBQUFoUSxLQUFBLE1BQUE4TSxJQUFBMU4sUUFFQThvQixFQUFBbFksSUFDQWlZLEVBQUExbkIsS0FBQTZsQixHQUdBNkIsRUFBQTdvQixRQUNBa29CLEVBQUEvbUIsS0FBQSxDQUEwQjhDLEtBQUF5SixFQUFBdVosU0FBQTRCLElBWTFCLE9BTEFuYixFQUFBOU0sS0FDQSttQixFQUFBVixFQUFBam5CLFFBQ0Frb0IsRUFBQS9tQixLQUFBLENBQXVCOEMsS0FBQXlKLEVBQUF1WixXQUFBaG1CLE1BQUEwbUIsS0FHdkJPLEdBR0FhLFFBQUEsU0FBQW5zQixFQUFBb3NCLEdBQ0Fqc0IsT0FBQUMsZUFBQStGLEVBQUFrbUIsTUFBQWhyQixVQUFBckIsRUFBQSxDQUNBSyxZQUFBLEVBQ0F5akIsY0FBQSxFQUVBeGpCLElBQUF5RSxFQUFBcW5CLEdBQ0EsV0FDQSxHQUFBcG9CLEtBQUFzb0IsY0FDQSxPQUFBRixFQUFBcG9CLEtBQUFzb0IsZ0JBR0EsV0FDQSxHQUFBdG9CLEtBQUFzb0IsY0FDQSxPQUFBdG9CLEtBQUFzb0IsY0FBQXRzQixJQUlBK2pCLElBQUEsU0FBQXJqQixHQUNBUCxPQUFBQyxlQUFBNEQsS0FBQWhFLEVBQUEsQ0FDQUssWUFBQSxFQUNBeWpCLGNBQUEsRUFDQXlJLFVBQUEsRUFDQTdyQixjQU1BNnFCLElBQUEsU0FBQWUsR0FDQSxPQUFBQSxFQUFBbm1CLEVBQUFzQyxTQUNBNmpCLEVBQ0EsSUFBQW5tQixFQUFBa21CLE1BQUFDLElBR0F2TCxRQUFBLENBQ0F5TCxLQUFBLENBR0FDLFVBQUEsR0FFQXRWLE1BQUEsQ0FHQXVWLFFBQUEsV0FDQSxHQUFBMW9CLE9BQUEwbEIsTUFBQTFsQixLQUFBbVQsTUFFQSxPQURBblQsS0FBQW1ULFNBQ0EsR0FHQXlULGFBQUEsV0FFQStCLEtBQUEsQ0FDQUQsUUFBQSxXQUNBLEdBQUExb0IsT0FBQTBsQixNQUFBMWxCLEtBQUEyb0IsS0FFQSxPQURBM29CLEtBQUEyb0IsUUFDQSxHQUdBL0IsYUFBQSxZQUVBZ0MsTUFBQSxDQUdBRixRQUFBLFdBQ0EsZ0JBQUExb0IsS0FBQW9CLE1BQUFwQixLQUFBNG9CLE9BQUFqZCxFQUFBM0wsS0FBQSxTQUVBLE9BREFBLEtBQUE0b0IsU0FDQSxHQUtBaEYsU0FBQSxTQUFBbUMsR0FDQSxPQUFBcGEsRUFBQW9hLEVBQUFwbkIsT0FBQSxPQUlBa3FCLGFBQUEsQ0FDQWIsYUFBQSxTQUFBakMsUUFJQXZoQixJQUFBdWhCLEVBQUF6VSxRQUFBeVUsRUFBQXVDLGdCQUNBdkMsRUFBQXVDLGNBQUFRLFlBQUEvQyxFQUFBelUsWUFPQW5QLEVBQUFpbEIsWUFBQSxTQUFBL2pCLEVBQUFqQyxFQUFBcWxCLEdBR0FwakIsRUFBQW9iLHFCQUNBcGIsRUFBQW9iLG9CQUFBcmQsRUFBQXFsQixJQUlBdGtCLEVBQUFrbUIsTUFBQSxTQUFBaG5CLEVBQUEwbkIsR0FHQSxLQUFBL29CLGdCQUFBbUMsRUFBQWttQixPQUNBLFdBQUFsbUIsRUFBQWttQixNQUFBaG5CLEVBQUEwbkIsR0FJQTFuQixLQUFBRCxNQUNBcEIsS0FBQXNvQixjQUFBam5CLEVBQ0FyQixLQUFBb0IsS0FBQUMsRUFBQUQsS0FJQXBCLEtBQUFncEIsbUJBQUEzbkIsRUFBQTRuQix1QkFDQXprQixJQUFBbkQsRUFBQTRuQixtQkFHQSxJQUFBNW5CLEVBQUF5bkIsWUFDQXRELEdBQ0FDLEdBS0F6bEIsS0FBQXJCLE9BQUEwQyxFQUFBMUMsUUFBQSxJQUFBMEMsRUFBQTFDLE9BQUFzQyxTQUNBSSxFQUFBMUMsT0FBQXFELFdBQ0FYLEVBQUExQyxPQUVBcUIsS0FBQTJuQixjQUFBdG1CLEVBQUFzbUIsY0FDQTNuQixLQUFBa3BCLGNBQUE3bkIsRUFBQTZuQixlQUlBbHBCLEtBQUFvQixLQUFBQyxFQUlBMG5CLEdBQ0E1bUIsRUFBQTRCLE9BQUEvRCxLQUFBK29CLEdBSUEvb0IsS0FBQW1wQixVQUFBOW5CLEtBQUE4bkIsV0FBQWxpQixLQUFBbWlCLE1BR0FwcEIsS0FBQW1DLEVBQUFzQyxVQUFBLEdBS0F0QyxFQUFBa21CLE1BQUFockIsVUFBQSxDQUNBc0YsWUFBQVIsRUFBQWttQixNQUNBVyxtQkFBQXZELEdBQ0FpQyxxQkFBQWpDLEdBQ0FtQyw4QkFBQW5DLEdBQ0E0RCxhQUFBLEVBRUF2QixlQUFBLFdBQ0EsSUFBQW5kLEVBQUEzSyxLQUFBc29CLGNBRUF0b0IsS0FBQWdwQixtQkFBQXhELEdBRUE3YSxJQUFBM0ssS0FBQXFwQixhQUNBMWUsRUFBQW1kLGtCQUdBQyxnQkFBQSxXQUNBLElBQUFwZCxFQUFBM0ssS0FBQXNvQixjQUVBdG9CLEtBQUEwbkIscUJBQUFsQyxHQUVBN2EsSUFBQTNLLEtBQUFxcEIsYUFDQTFlLEVBQUFvZCxtQkFHQXVCLHlCQUFBLFdBQ0EsSUFBQTNlLEVBQUEzSyxLQUFBc29CLGNBRUF0b0IsS0FBQTRuQiw4QkFBQXBDLEdBRUE3YSxJQUFBM0ssS0FBQXFwQixhQUNBMWUsRUFBQTJlLDJCQUdBdHBCLEtBQUErbkIsb0JBS0E1bEIsRUFBQWdCLEtBQUEsQ0FDQW9tQixRQUFBLEVBQ0FDLFNBQUEsRUFDQUMsWUFBQSxFQUNBQyxnQkFBQSxFQUNBQyxTQUFBLEVBQ0FDLFFBQUEsRUFDQUMsWUFBQSxFQUNBQyxTQUFBLEVBQ0FDLE9BQUEsRUFDQUMsT0FBQSxFQUNBQyxVQUFBLEVBQ0FDLE1BQUEsRUFDQUMsTUFBQSxFQUNBQyxVQUFBLEVBQ0FwdEIsS0FBQSxFQUNBcXRCLFNBQUEsRUFDQXZXLFFBQUEsRUFDQXdXLFNBQUEsRUFDQUMsU0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFNBQUEsRUFDQUMsU0FBQSxFQUNBQyxXQUFBLEVBQ0FDLGFBQUEsRUFDQUMsU0FBQSxFQUNBQyxTQUFBLEVBQ0FDLGVBQUEsRUFDQUMsV0FBQSxFQUNBQyxTQUFBLEVBRUFDLE1BQUEsU0FBQW5GLEdBQ0EsSUFBQWpTLEVBQUFpUyxFQUFBalMsT0FHQSxhQUFBaVMsRUFBQW1GLE9BQUE3RixHQUFBM1osS0FBQXFhLEVBQUEza0IsTUFDQSxNQUFBMmtCLEVBQUFxRSxTQUFBckUsRUFBQXFFLFNBQUFyRSxFQUFBc0UsU0FJQXRFLEVBQUFtRixZQUFBMW1CLElBQUFzUCxHQUFBd1IsR0FBQTVaLEtBQUFxYSxFQUFBM2tCLE1BQ0EsRUFBQTBTLEVBQ0EsRUFHQSxFQUFBQSxFQUNBLEVBR0EsRUFBQUEsRUFDQSxFQUdBLEVBR0FpUyxFQUFBbUYsUUFFQy9vQixFQUFBNGpCLE1BQUFvQyxTQVVEaG1CLEVBQUFnQixLQUFBLENBQ0Fnb0IsV0FBQSxZQUNBQyxXQUFBLFdBQ0FDLGFBQUEsY0FDQUMsYUFBQSxjQUNDLFNBQUFDLEVBQUFoRSxHQUNEcGxCLEVBQUE0akIsTUFBQWhKLFFBQUF3TyxHQUFBLENBQ0EzRSxhQUFBVyxFQUNBVixTQUFBVSxFQUVBZCxPQUFBLFNBQUFWLEdBQ0EsSUFBQS9pQixFQUVBd29CLEVBQUF6RixFQUFBbUQsY0FDQTlDLEVBQUFMLEVBQUFLLFVBU0EsT0FMQW9GLFFBTkF4ckIsTUFNQW1DLEVBQUE2RSxTQU5BaEgsS0FNQXdyQixNQUNBekYsRUFBQTNrQixLQUFBZ2xCLEVBQUFHLFNBQ0F2akIsRUFBQW9qQixFQUFBelosUUFBQXJKLE1BQUF0RCxLQUFBYixXQUNBNG1CLEVBQUEza0IsS0FBQW1tQixHQUVBdmtCLE1BS0FiLEVBQUFHLEdBQUF5QixPQUFBLENBRUE0aEIsR0FBQSxTQUFBQyxFQUFBeGpCLEVBQUE0ZCxFQUFBMWQsR0FDQSxPQUFBcWpCLEdBQUEzbEIsS0FBQTRsQixFQUFBeGpCLEVBQUE0ZCxFQUFBMWQsSUFFQXVqQixJQUFBLFNBQUFELEVBQUF4akIsRUFBQTRkLEVBQUExZCxHQUNBLE9BQUFxakIsR0FBQTNsQixLQUFBNGxCLEVBQUF4akIsRUFBQTRkLEVBQUExZCxFQUFBLElBRUEwakIsSUFBQSxTQUFBSixFQUFBeGpCLEVBQUFFLEdBQ0EsSUFBQThqQixFQUFBaGxCLEVBQ0EsR0FBQXdrQixLQUFBa0MsZ0JBQUFsQyxFQUFBUSxVQVdBLE9BUkFBLEVBQUFSLEVBQUFRLFVBQ0Fqa0IsRUFBQXlqQixFQUFBNEIsZ0JBQUF4QixJQUNBSSxFQUFBVSxVQUNBVixFQUFBRyxTQUFBLElBQUFILEVBQUFVLFVBQ0FWLEVBQUFHLFNBQ0FILEVBQUFoa0IsU0FDQWdrQixFQUFBelosU0FFQTNNLEtBRUEsb0JBQUE0bEIsRUFBQSxDQUdBLElBQUF4a0IsS0FBQXdrQixFQUNBNWxCLEtBQUFnbUIsSUFBQTVrQixFQUFBZ0IsRUFBQXdqQixFQUFBeGtCLElBRUEsT0FBQXBCLEtBV0EsT0FUQSxJQUFBb0MsR0FBQSxtQkFBQUEsSUFHQUUsRUFBQUYsRUFDQUEsT0FBQW9DLElBRUEsSUFBQWxDLElBQ0FBLEVBQUFtakIsSUFFQXpsQixLQUFBbUQsS0FBQSxXQUNBaEIsRUFBQTRqQixNQUFBdkssT0FBQXhiLEtBQUE0bEIsRUFBQXRqQixFQUFBRixRQU1BLElBS0FxcEIsR0FBQSw4RkFPQUMsR0FBQSx3QkFHQUMsR0FBQSxvQ0FDQUMsR0FBQSwyQ0FHQSxTQUFBQyxHQUFBeG9CLEVBQUF3VyxHQUNBLE9BQUFsTyxFQUFBdEksRUFBQSxVQUNBc0ksRUFBQSxLQUFBa08sRUFBQTVZLFNBQUE0WSxJQUFBdkosV0FBQSxPQUVBbk8sRUFBQWtCLEdBQUF3VixTQUFBLGFBR0F4VixFQUlBLFNBQUF5b0IsR0FBQXpvQixHQUVBLE9BREFBLEVBQUFqQyxNQUFBLE9BQUFpQyxFQUFBdUksYUFBQSxhQUFBdkksRUFBQWpDLEtBQ0FpQyxFQUVBLFNBQUEwb0IsR0FBQTFvQixHQU9BLE1BTkEsV0FBQUEsRUFBQWpDLE1BQUEsSUFBQWYsTUFBQSxLQUNBZ0QsRUFBQWpDLEtBQUFpQyxFQUFBakMsS0FBQWYsTUFBQSxHQUVBZ0QsRUFBQTZJLGdCQUFBLFFBR0E3SSxFQUdBLFNBQUEyb0IsR0FBQTNxQixFQUFBNHFCLEdBQ0EsSUFBQXh3QixFQUFBQyxFQUFBMEYsRUFBQThxQixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBbEcsRUFFQSxPQUFBOEYsRUFBQWhyQixTQUFBLENBS0EsR0FBQWtmLEVBQUFELFFBQUE3ZSxLQUNBNnFCLEVBQUEvTCxFQUFBckIsT0FBQXpkLEdBQ0E4cUIsRUFBQWhNLEVBQUFKLElBQUFrTSxFQUFBQyxHQUNBL0YsRUFBQStGLEVBQUEvRixRQU1BLElBQUEva0IsWUFIQStxQixFQUFBMUYsT0FDQTBGLEVBQUFoRyxPQUFBLEdBRUFBLEVBQ0EsSUFBQTFxQixFQUFBLEVBQUFDLEVBQUF5cUIsRUFBQS9rQixHQUFBaEMsT0FBMkMzRCxFQUFBQyxFQUFPRCxJQUNsRDBHLEVBQUE0akIsTUFBQTFNLElBQUE0UyxFQUFBN3FCLEVBQUEra0IsRUFBQS9rQixHQUFBM0YsSUFPQTJrQixFQUFBRixRQUFBN2UsS0FDQStxQixFQUFBaE0sRUFBQXRCLE9BQUF6ZCxHQUNBZ3JCLEVBQUFscUIsRUFBQTRCLE9BQUEsR0FBOEJxb0IsR0FFOUJoTSxFQUFBTCxJQUFBa00sRUFBQUksS0FrQkEsU0FBQUMsR0FBQUMsRUFBQWxhLEVBQUFqUCxFQUFBdWhCLEdBR0F0UyxFQUFBL1IsRUFBQWdELE1BQUEsR0FBQStPLEdBRUEsSUFBQXdTLEVBQUF0aEIsRUFBQWtoQixFQUFBK0gsRUFBQTlxQixFQUFBRCxFQUNBaEcsRUFBQSxFQUNBQyxFQUFBNndCLEVBQUFudEIsT0FDQXF0QixFQUFBL3dCLEVBQUEsRUFDQWdCLEVBQUEyVixFQUFBLEdBQ0FxYSxFQUFBM3JCLEVBQUFyRSxHQUdBLEdBQUFnd0IsR0FDQWh4QixFQUFBLG9CQUFBZ0IsSUFDQW9FLEVBQUFva0IsWUFBQXlHLEdBQUFqZ0IsS0FBQWhQLEdBQ0EsT0FBQTZ2QixFQUFBcHBCLEtBQUEsU0FBQWdXLEdBQ0EsSUFBQVosRUFBQWdVLEVBQUEvb0IsR0FBQTJWLEdBQ0F1VCxJQUNBcmEsRUFBQSxHQUFBM1YsRUFBQWQsS0FBQW9FLEtBQUFtWixFQUFBWixFQUFBb1UsU0FFQUwsR0FBQS9ULEVBQUFsRyxFQUFBalAsRUFBQXVoQixLQUlBLEdBQUFqcEIsSUFFQTZILEdBREFzaEIsRUFBQUwsR0FBQW5TLEVBQUFrYSxFQUFBLEdBQUFwaEIsZUFBQSxFQUFBb2hCLEVBQUE1SCxJQUNBclUsV0FFQSxJQUFBdVUsRUFBQW5hLFdBQUF0TCxTQUNBeWxCLEVBQUF0aEIsR0FJQUEsR0FBQW9oQixHQUFBLENBT0EsSUFMQTZILEdBREEvSCxFQUFBdGlCLEVBQUFqRSxJQUFBMmxCLEdBQUFnQixFQUFBLFVBQUFpSCxLQUNBMXNCLE9BS1UzRCxFQUFBQyxFQUFPRCxJQUNqQmlHLEVBQUFtakIsRUFFQXBwQixJQUFBZ3hCLElBQ0EvcUIsRUFBQVMsRUFBQWdDLE1BQUF6QyxHQUFBLE1BR0E4cUIsR0FJQXJxQixFQUFBYyxNQUFBd2hCLEVBQUFaLEdBQUFuaUIsRUFBQSxZQUlBMEIsRUFBQXhILEtBQUEyd0IsRUFBQTl3QixHQUFBaUcsRUFBQWpHLEdBR0EsR0FBQSt3QixFQU9BLElBTkEvcUIsRUFBQWdqQixJQUFBcmxCLE9BQUEsR0FBQStMLGNBR0FoSixFQUFBakUsSUFBQXVtQixFQUFBc0gsSUFHQXR3QixFQUFBLEVBQWdCQSxFQUFBK3dCLEVBQWdCL3dCLElBQ2hDaUcsRUFBQStpQixFQUFBaHBCLEdBQ0E0bkIsR0FBQTNYLEtBQUFoSyxFQUFBTixNQUFBLE1BQ0ErZSxFQUFBckIsT0FBQXBkLEVBQUEsZUFDQVMsRUFBQTZFLFNBQUF2RixFQUFBQyxLQUVBQSxFQUFBTCxLQUFBLFlBQUFLLEVBQUFOLE1BQUEsSUFBQTRFLGNBR0E3RCxFQUFBeXFCLFVBQ0F6cUIsRUFBQXlxQixTQUFBbHJCLEVBQUFMLEtBR0FFLEVBQUFHLEVBQUEyTyxZQUFBekwsUUFBQWduQixHQUFBLElBQUFucUIsRUFBQUMsSUFRQSxPQUFBNnFCLEVBR0EsU0FBQS9RLEdBQUFuWSxFQUFBakIsRUFBQXlxQixHQUtBLElBSkEsSUFBQW5yQixFQUNBcWpCLEVBQUEzaUIsRUFBQUQsRUFBQWlNLE9BQUFoTSxFQUFBaUIsS0FDQTVILEVBQUEsRUFFUSxPQUFBaUcsRUFBQXFqQixFQUFBdHBCLElBQStCQSxJQUN2Q294QixHQUFBLElBQUFuckIsRUFBQVQsVUFDQWtCLEVBQUEycUIsVUFBQWpKLEdBQUFuaUIsSUFHQUEsRUFBQU0sYUFDQTZxQixHQUFBMXFCLEVBQUE2RSxTQUFBdEYsRUFBQXlKLGNBQUF6SixJQUNBb2lCLEdBQUFELEdBQUFuaUIsRUFBQSxXQUVBQSxFQUFBTSxXQUFBQyxZQUFBUCxJQUlBLE9BQUEyQixFQUdBbEIsRUFBQTRCLE9BQUEsQ0FDQWloQixjQUFBLFNBQUEySCxHQUNBLE9BQUFBLEVBQUEvbkIsUUFBQTZtQixHQUFBLGNBR0F0bkIsTUFBQSxTQUFBZCxFQUFBMHBCLEVBQUFDLEdBQ0EsSUFBQXZ4QixFQUFBQyxFQUFBdXhCLEVBQUFDLEVBbElBN3JCLEVBQUE0cUIsRUFDQXRnQixFQWtJQXhILEVBQUFkLEVBQUE4aEIsV0FBQSxHQUNBZ0ksRUFBQWhyQixFQUFBNkUsU0FBQTNELEVBQUE4SCxjQUFBOUgsR0FHQSxLQUFBdkMsRUFBQXNrQixnQkFBQSxJQUFBL2hCLEVBQUFwQyxVQUFBLEtBQUFvQyxFQUFBcEMsVUFDQWtCLEVBQUEwVixTQUFBeFUsSUFNQSxJQUhBNnBCLEVBQUFySixHQUFBMWYsR0FHQTFJLEVBQUEsRUFBQUMsR0FGQXV4QixFQUFBcEosR0FBQXhnQixJQUVBakUsT0FBdUMzRCxFQUFBQyxFQUFPRCxJQTlJOUM0RixFQStJQTRyQixFQUFBeHhCLEdBL0lBd3dCLEVBK0lBaUIsRUFBQXp4QixHQTlJQWtRLFNBR0EsV0FIQUEsRUFBQXNnQixFQUFBdGdCLFNBQUEzRixnQkFHQW1kLEdBQUF6WCxLQUFBckssRUFBQUQsTUFDQTZxQixFQUFBeFksUUFBQXBTLEVBQUFvUyxRQUdFLFVBQUE5SCxHQUFBLGFBQUFBLElBQ0ZzZ0IsRUFBQXRVLGFBQUF0VyxFQUFBc1csY0EySUEsR0FBQW9WLEVBQ0EsR0FBQUMsRUFJQSxJQUhBQyxLQUFBcEosR0FBQXhnQixHQUNBNnBCLEtBQUFySixHQUFBMWYsR0FFQTFJLEVBQUEsRUFBQUMsRUFBQXV4QixFQUFBN3RCLE9BQXdDM0QsRUFBQUMsRUFBT0QsSUFDL0N1d0IsR0FBQWlCLEVBQUF4eEIsR0FBQXl4QixFQUFBenhCLFNBR0F1d0IsR0FBQTNvQixFQUFBYyxHQVdBLE9BTkErb0IsRUFBQXJKLEdBQUExZixFQUFBLFdBQ0EvRSxPQUFBLEdBQ0Ewa0IsR0FBQW9KLEdBQUFDLEdBQUF0SixHQUFBeGdCLEVBQUEsV0FJQWMsR0FHQTJvQixVQUFBLFNBQUEvcEIsR0FLQSxJQUpBLElBQUFpZCxFQUFBM2MsRUFBQWpDLEVBQ0EyYixFQUFBNWEsRUFBQTRqQixNQUFBaEosUUFDQXRoQixFQUFBLE9BRVMrSSxLQUFBbkIsRUFBQU4sRUFBQXRILElBQXFDQSxJQUM5QyxHQUFBaWtCLEVBQUFyYyxHQUFBLENBQ0EsR0FBQTJjLEVBQUEzYyxFQUFBOGMsRUFBQTFiLFNBQUEsQ0FDQSxHQUFBdWIsRUFBQW1HLE9BQ0EsSUFBQS9rQixLQUFBNGUsRUFBQW1HLE9BQ0FwSixFQUFBM2IsR0FDQWUsRUFBQTRqQixNQUFBdkssT0FBQW5ZLEVBQUFqQyxHQUlBZSxFQUFBaWxCLFlBQUEvakIsRUFBQWpDLEVBQUE0ZSxFQUFBeUcsUUFPQXBqQixFQUFBOGMsRUFBQTFiLGNBQUFELEVBRUFuQixFQUFBK2MsRUFBQTNiLFdBSUFwQixFQUFBK2MsRUFBQTNiLGNBQUFELE9BT0FyQyxFQUFBRyxHQUFBeUIsT0FBQSxDQUNBcXBCLE9BQUEsU0FBQWhyQixHQUNBLE9BQUFvWixHQUFBeGIsS0FBQW9DLEdBQUEsSUFHQW9aLE9BQUEsU0FBQXBaLEdBQ0EsT0FBQW9aLEdBQUF4YixLQUFBb0MsSUFHQVAsS0FBQSxTQUFBbkYsR0FDQSxPQUFBb2lCLEVBQUE5ZSxLQUFBLFNBQUF0RCxHQUNBLFlBQUE4SCxJQUFBOUgsRUFDQXlGLEVBQUFOLEtBQUE3QixNQUNBQSxLQUFBNFQsUUFBQXpRLEtBQUEsV0FDQSxJQUFBbkQsS0FBQWlCLFVBQUEsS0FBQWpCLEtBQUFpQixVQUFBLElBQUFqQixLQUFBaUIsV0FDQWpCLEtBQUFxUSxZQUFBM1QsTUFHRyxLQUFBQSxFQUFBeUMsVUFBQUMsU0FHSGl1QixPQUFBLFdBQ0EsT0FBQWYsR0FBQXRzQixLQUFBYixVQUFBLFNBQUFrRSxHQUNBLElBQUFyRCxLQUFBaUIsVUFBQSxLQUFBakIsS0FBQWlCLFVBQUEsSUFBQWpCLEtBQUFpQixVQUNBNHFCLEdBQUE3ckIsS0FBQXFELEdBQ0F0QixZQUFBc0IsTUFLQWlxQixRQUFBLFdBQ0EsT0FBQWhCLEdBQUF0c0IsS0FBQWIsVUFBQSxTQUFBa0UsR0FDQSxPQUFBckQsS0FBQWlCLFVBQUEsS0FBQWpCLEtBQUFpQixVQUFBLElBQUFqQixLQUFBaUIsU0FBQSxDQUNBLElBQUF0QyxFQUFBa3RCLEdBQUE3ckIsS0FBQXFELEdBQ0ExRSxFQUFBNHVCLGFBQUFscUIsRUFBQTFFLEVBQUEyUixnQkFLQWtkLE9BQUEsV0FDQSxPQUFBbEIsR0FBQXRzQixLQUFBYixVQUFBLFNBQUFrRSxHQUNBckQsS0FBQWdDLFlBQ0FoQyxLQUFBZ0MsV0FBQXVyQixhQUFBbHFCLEVBQUFyRCxTQUtBeXRCLE1BQUEsV0FDQSxPQUFBbkIsR0FBQXRzQixLQUFBYixVQUFBLFNBQUFrRSxHQUNBckQsS0FBQWdDLFlBQ0FoQyxLQUFBZ0MsV0FBQXVyQixhQUFBbHFCLEVBQUFyRCxLQUFBaU4sZ0JBS0EyRyxNQUFBLFdBSUEsSUFIQSxJQUFBdlEsRUFDQTVILEVBQUEsRUFFUyxPQUFBNEgsRUFBQXJELEtBQUF2RSxJQUE4QkEsSUFDdkMsSUFBQTRILEVBQUFwQyxXQUdBa0IsRUFBQTJxQixVQUFBakosR0FBQXhnQixHQUFBLElBR0FBLEVBQUFnTixZQUFBLElBSUEsT0FBQXJRLE1BR0FtRSxNQUFBLFNBQUE0b0IsRUFBQUMsR0FJQSxPQUhBRCxFQUFBLE1BQUFBLEtBQ0FDLEVBQUEsTUFBQUEsRUFBQUQsRUFBQUMsRUFFQWh0QixLQUFBOUIsSUFBQSxXQUNBLE9BQUFpRSxFQUFBZ0MsTUFBQW5FLEtBQUErc0IsRUFBQUMsTUFJQUwsS0FBQSxTQUFBandCLEdBQ0EsT0FBQW9pQixFQUFBOWUsS0FBQSxTQUFBdEQsR0FDQSxJQUFBMkcsRUFBQXJELEtBQUEsT0FDQXZFLEVBQUEsRUFDQUMsRUFBQXNFLEtBQUFaLE9BRUEsUUFBQW9GLElBQUE5SCxHQUFBLElBQUEyRyxFQUFBcEMsU0FDQSxPQUFBb0MsRUFBQXFMLFVBSUEsb0JBQUFoUyxJQUFBZ3ZCLEdBQUFoZ0IsS0FBQWhQLEtBQ0E0bUIsSUFBQUYsR0FBQWhZLEtBQUExTyxJQUFBLFlBQUFzSixlQUFBLENBRUF0SixFQUFBeUYsRUFBQTZpQixjQUFBdG9CLEdBRUEsSUFDQSxLQUFZakIsRUFBQUMsRUFBT0QsSUFJbkIsS0FIQTRILEVBQUFyRCxLQUFBdkUsSUFBQSxJQUdBd0YsV0FDQWtCLEVBQUEycUIsVUFBQWpKLEdBQUF4Z0IsR0FBQSxJQUNBQSxFQUFBcUwsVUFBQWhTLEdBSUEyRyxFQUFBLEVBR0ssTUFBQXNILEtBR0x0SCxHQUNBckQsS0FBQTRULFFBQUF5WixPQUFBM3dCLElBRUcsS0FBQUEsRUFBQXlDLFVBQUFDLFNBR0hzdUIsWUFBQSxXQUNBLElBQUEvSSxFQUFBLEdBR0EsT0FBQTJILEdBQUF0c0IsS0FBQWIsVUFBQSxTQUFBa0UsR0FDQSxJQUFBMk8sRUFBQWhTLEtBQUFnQyxXQUVBRyxFQUFBb0QsUUFBQXZGLEtBQUEya0IsR0FBQSxJQUNBeGlCLEVBQUEycUIsVUFBQWpKLEdBQUE3akIsT0FDQWdTLEdBQ0FBLEVBQUEyYixhQUFBdHFCLEVBQUFyRCxRQUtHMmtCLE1BSUh4aUIsRUFBQWdCLEtBQUEsQ0FDQXlxQixTQUFBLFNBQ0FDLFVBQUEsVUFDQU4sYUFBQSxTQUNBTyxZQUFBLFFBQ0FDLFdBQUEsZUFDQyxTQUFBL3hCLEVBQUFneUIsR0FDRDdyQixFQUFBRyxHQUFBdEcsR0FBQSxTQUFBb0csR0FPQSxJQU5BLElBQUFXLEVBQ0FDLEVBQUEsR0FDQWlyQixFQUFBOXJCLEVBQUFDLEdBQ0FxQixFQUFBd3FCLEVBQUE3dUIsT0FBQSxFQUNBM0QsRUFBQSxFQUVTQSxHQUFBZ0ksRUFBV2hJLElBQ3BCc0gsRUFBQXRILElBQUFnSSxFQUFBekQsVUFBQW1FLE9BQUEsR0FDQWhDLEVBQUE4ckIsRUFBQXh5QixJQUFBdXlCLEdBQUFqckIsR0FJQXhDLEVBQUErQyxNQUFBTixFQUFBRCxFQUFBekcsT0FHQSxPQUFBMEQsS0FBQThDLFVBQUFFLE1BR0EsSUFBQWtyQixHQUFBLElBQUE3bEIsT0FBQSxLQUFBa1osR0FBQSx1QkFFQTRNLEdBQUEsU0FBQTlxQixHQUtBLElBQUE2bUIsRUFBQTdtQixFQUFBOEgsY0FBQXlDLFlBTUEsT0FKQXNjLEtBQUFrRSxTQUNBbEUsRUFBQW5xQixHQUdBbXFCLEVBQUFtRSxpQkFBQWhyQixJQUdBaXJCLEdBQUEsSUFBQWptQixPQUFBb1osR0FBQXRqQixLQUFBLFVBK0ZBLFNBQUFvd0IsR0FBQWxyQixFQUFBckgsRUFBQXd5QixHQUNBLElBQUFDLEVBQUFDLEVBQUFDLEVBQUEzckIsRUFNQTJlLEVBQUF0ZSxFQUFBc2UsTUFxQ0EsT0FuQ0E2TSxLQUFBTCxHQUFBOXFCLE1BUUEsTUFGQUwsRUFBQXdyQixFQUFBSSxpQkFBQTV5QixJQUFBd3lCLEVBQUF4eUIsS0FFQW1HLEVBQUE2RSxTQUFBM0QsRUFBQThILGNBQUE5SCxLQUNBTCxFQUFBYixFQUFBd2YsTUFBQXRlLEVBQUFySCxLQVFBOEUsRUFBQSt0QixrQkFBQVgsR0FBQXhpQixLQUFBMUksSUFBQXNyQixHQUFBNWlCLEtBQUExUCxLQUdBeXlCLEVBQUE5TSxFQUFBOE0sTUFDQUMsRUFBQS9NLEVBQUErTSxTQUNBQyxFQUFBaE4sRUFBQWdOLFNBR0FoTixFQUFBK00sU0FBQS9NLEVBQUFnTixTQUFBaE4sRUFBQThNLE1BQUF6ckIsRUFDQUEsRUFBQXdyQixFQUFBQyxNQUdBOU0sRUFBQThNLFFBQ0E5TSxFQUFBK00sV0FDQS9NLEVBQUFnTixrQkFJQW5xQixJQUFBeEIsRUFJQUEsRUFBQSxHQUNBQSxFQUlBLFNBQUE4ckIsR0FBQUMsRUFBQUMsR0FHQSxPQUNBMXlCLElBQUEsV0FDQSxJQUFBeXlCLElBU0EsT0FBQS91QixLQUFBMUQsSUFBQTB5QixHQUFBMXJCLE1BQUF0RCxLQUFBYixrQkFMQWEsS0FBQTFELE9BekpBLFdBSUEsU0FBQTJ5QixJQUdBLEdBQUEzSyxFQUFBLENBSUE0SyxFQUFBdk4sTUFBQXdOLFFBQUEsK0VBRUE3SyxFQUFBM0MsTUFBQXdOLFFBQ0EsNEhBR0ExaEIsR0FBQTFMLFlBQUFtdEIsR0FBQW50QixZQUFBdWlCLEdBRUEsSUFBQThLLEVBQUFydkIsRUFBQXN1QixpQkFBQS9KLEdBQ0ErSyxFQUFBLE9BQUFELEVBQUF2aEIsSUFHQXloQixFQUFBLEtBQUFDLEVBQUFILEVBQUFJLFlBSUFsTCxFQUFBM0MsTUFBQThOLE1BQUEsTUFDQUMsRUFBQSxLQUFBSCxFQUFBSCxFQUFBSyxPQUlBRSxFQUFBLEtBQUFKLEVBQUFILEVBQUFYLE9BSUFuSyxFQUFBM0MsTUFBQWlPLFNBQUEsV0FDQUMsRUFBQSxLQUFBdkwsRUFBQXdMLGFBQUEsV0FFQXJpQixHQUFBeEwsWUFBQWl0QixHQUlBNUssRUFBQSxNQUdBLFNBQUFpTCxFQUFBUSxHQUNBLE9BQUFyckIsS0FBQXNyQixNQUFBQyxXQUFBRixJQUdBLElBQUFWLEVBQUFNLEVBQUFFLEVBQUFILEVBQ0FKLEVBQ0FKLEVBQUF0dkIsRUFBQWdDLGNBQUEsT0FDQTBpQixFQUFBMWtCLEVBQUFnQyxjQUFBLE9BR0EwaUIsRUFBQTNDLFFBTUEyQyxFQUFBM0MsTUFBQXVPLGVBQUEsY0FDQTVMLEVBQUFhLFdBQUEsR0FBQXhELE1BQUF1TyxlQUFBLEdBQ0FwdkIsRUFBQXF2QixnQkFBQSxnQkFBQTdMLEVBQUEzQyxNQUFBdU8sZUFFQS90QixFQUFBNEIsT0FBQWpELEVBQUEsQ0FDQXN2QixrQkFBQSxXQUVBLE9BREFuQixJQUNBVSxHQUVBZCxlQUFBLFdBRUEsT0FEQUksSUFDQVMsR0FFQVcsY0FBQSxXQUVBLE9BREFwQixJQUNBSSxHQUVBaUIsbUJBQUEsV0FFQSxPQURBckIsSUFDQUssR0FFQWlCLGNBQUEsV0FFQSxPQURBdEIsSUFDQVksTUFyRkEsR0FvS0EsSUFLQVcsR0FBQSw0QkFDQUMsR0FBQSxNQUNBQyxHQUFBLENBQVlkLFNBQUEsV0FBQWUsV0FBQSxTQUFBL08sUUFBQSxTQUNaZ1AsR0FBQSxDQUNBQyxjQUFBLElBQ0FDLFdBQUEsT0FHQUMsR0FBQSxzQkFDQUMsR0FBQXB4QixFQUFBZ0MsY0FBQSxPQUFBK2YsTUF3QkEsU0FBQXNQLEdBQUFqMUIsR0FDQSxJQUFBZ0gsRUFBQWIsRUFBQSt1QixTQUFBbDFCLEdBSUEsT0FIQWdILElBQ0FBLEVBQUFiLEVBQUErdUIsU0FBQWwxQixHQXhCQSxTQUFBQSxHQUdBLEdBQUFBLEtBQUFnMUIsR0FDQSxPQUFBaDFCLEVBT0EsSUFIQSxJQUFBbTFCLEVBQUFuMUIsRUFBQSxHQUFBdWpCLGNBQUF2akIsRUFBQXFFLE1BQUEsR0FDQTVFLEVBQUFzMUIsR0FBQTN4QixPQUVBM0QsS0FFQSxJQURBTyxFQUFBKzBCLEdBQUF0MUIsR0FBQTAxQixLQUNBSCxHQUNBLE9BQUFoMUIsRUFVQW8xQixDQUFBcDFCLE9BRUFnSCxFQUdBLFNBQUFxdUIsR0FBQWh1QixFQUFBM0csRUFBQTQwQixHQUlBLElBQUEzckIsRUFBQTZiLEdBQUFwVyxLQUFBMU8sR0FDQSxPQUFBaUosRUFHQWpCLEtBQUE2c0IsSUFBQSxFQUFBNXJCLEVBQUEsSUFBQTJyQixHQUFBLEtBQUEzckIsRUFBQSxVQUNBakosRUFHQSxTQUFBODBCLEdBQUFudUIsRUFBQW91QixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLElBQUFwMkIsRUFBQSxVQUFBZzJCLEVBQUEsSUFDQUssRUFBQSxFQUNBQyxFQUFBLEVBR0EsR0FBQUwsS0FBQUMsRUFBQSxvQkFDQSxTQUdBLEtBQVFsMkIsRUFBQSxFQUFPQSxHQUFBLEVBR2YsV0FBQWkyQixJQUNBSyxHQUFBNXZCLEVBQUEwZixJQUFBeGUsRUFBQXF1QixFQUFBalEsR0FBQWhtQixJQUFBLEVBQUFtMkIsSUFJQUQsR0FtQkEsWUFBQUQsSUFDQUssR0FBQTV2QixFQUFBMGYsSUFBQXhlLEVBQUEsVUFBQW9lLEdBQUFobUIsSUFBQSxFQUFBbTJCLElBSUEsV0FBQUYsSUFDQUssR0FBQTV2QixFQUFBMGYsSUFBQXhlLEVBQUEsU0FBQW9lLEdBQUFobUIsR0FBQSxXQUFBbTJCLE1BdEJBRyxHQUFBNXZCLEVBQUEwZixJQUFBeGUsRUFBQSxVQUFBb2UsR0FBQWhtQixJQUFBLEVBQUFtMkIsR0FHQSxZQUFBRixFQUNBSyxHQUFBNXZCLEVBQUEwZixJQUFBeGUsRUFBQSxTQUFBb2UsR0FBQWhtQixHQUFBLFdBQUFtMkIsR0FJQUUsR0FBQTN2QixFQUFBMGYsSUFBQXhlLEVBQUEsU0FBQW9lLEdBQUFobUIsR0FBQSxXQUFBbTJCLElBaUNBLE9BYkFELEdBQUFFLEdBQUEsSUFJQUUsR0FBQXJ0QixLQUFBNnNCLElBQUEsRUFBQTdzQixLQUFBc3RCLEtBQ0EzdUIsRUFBQSxTQUFBb3VCLEVBQUEsR0FBQWxTLGNBQUFrUyxFQUFBcHhCLE1BQUEsSUFDQXd4QixFQUNBRSxFQUNBRCxFQUNBLE1BSUFDLEVBR0EsU0FBQUUsR0FBQTV1QixFQUFBb3VCLEVBQUFLLEdBR0EsSUFBQUYsRUFBQXpELEdBQUE5cUIsR0FDQXJFLEVBQUF1dkIsR0FBQWxyQixFQUFBb3VCLEVBQUFHLEdBQ0FELEVBQUEsZUFBQXh2QixFQUFBMGYsSUFBQXhlLEVBQUEsZUFBQXV1QixHQUNBTSxFQUFBUCxFQUlBLEdBQUF6RCxHQUFBeGlCLEtBQUExTSxHQUFBLENBQ0EsSUFBQTh5QixFQUNBLE9BQUE5eUIsRUFFQUEsRUFBQSxPQXlCQSxPQXBCQWt6QixNQUNBcHhCLEVBQUFzdkIscUJBQUFweEIsSUFBQXFFLEVBQUFzZSxNQUFBOFAsS0FNQSxTQUFBenlCLElBQ0FpeEIsV0FBQWp4QixJQUFBLFdBQUFtRCxFQUFBMGYsSUFBQXhlLEVBQUEsYUFBQXV1QixNQUVBNXlCLEVBQUFxRSxFQUFBLFNBQUFvdUIsRUFBQSxHQUFBbFMsY0FBQWtTLEVBQUFweEIsTUFBQSxJQUdBNnhCLEdBQUEsSUFJQWx6QixFQUFBaXhCLFdBQUFqeEIsSUFBQSxHQUlBd3lCLEdBQ0FudUIsRUFDQW91QixFQUNBSyxJQUFBSCxFQUFBLG9CQUNBTyxFQUNBTixFQUdBNXlCLEdBRUEsS0EyUkEsU0FBQW16QixHQUFBOXVCLEVBQUFXLEVBQUFpYyxFQUFBcmMsRUFBQXd1QixHQUNBLFdBQUFELEdBQUE5MEIsVUFBQWtGLEtBQUFjLEVBQUFXLEVBQUFpYyxFQUFBcmMsRUFBQXd1QixHQXpSQWp3QixFQUFBNEIsT0FBQSxDQUlBc3VCLFNBQUEsQ0FDQUMsUUFBQSxDQUNBaDJCLElBQUEsU0FBQStHLEVBQUFtckIsR0FDQSxHQUFBQSxFQUFBLENBR0EsSUFBQXhyQixFQUFBdXJCLEdBQUFsckIsRUFBQSxXQUNBLFdBQUFMLEVBQUEsSUFBQUEsTUFPQXlmLFVBQUEsQ0FDQThQLHlCQUFBLEVBQ0FDLGFBQUEsRUFDQUMsYUFBQSxFQUNBQyxVQUFBLEVBQ0FDLFlBQUEsRUFDQTdCLFlBQUEsRUFDQThCLFlBQUEsRUFDQU4sU0FBQSxFQUNBTyxPQUFBLEVBQ0FDLFNBQUEsRUFDQUMsUUFBQSxFQUNBQyxRQUFBLEVBQ0FDLE1BQUEsR0FLQS9CLFNBQUEsR0FHQXZQLE1BQUEsU0FBQXRlLEVBQUFySCxFQUFBVSxFQUFBbzFCLEdBR0EsR0FBQXp1QixHQUFBLElBQUFBLEVBQUFwQyxVQUFBLElBQUFvQyxFQUFBcEMsVUFBQW9DLEVBQUFzZSxNQUFBLENBS0EsSUFBQTNlLEVBQUE1QixFQUFBNGYsRUFDQWtTLEVBQUExVCxFQUFBeGpCLEdBQ0FtM0IsRUFBQTFDLEdBQUEva0IsS0FBQTFQLEdBQ0EybEIsRUFBQXRlLEVBQUFzZSxNQWFBLEdBUkF3UixJQUNBbjNCLEVBQUFpMUIsR0FBQWlDLElBSUFsUyxFQUFBN2UsRUFBQWt3QixTQUFBcjJCLElBQUFtRyxFQUFBa3dCLFNBQUFhLFFBR0ExdUIsSUFBQTlILEVBd0NBLE9BQUFza0IsR0FBQSxRQUFBQSxRQUNBeGMsS0FBQXhCLEVBQUFnZSxFQUFBMWtCLElBQUErRyxHQUFBLEVBQUF5dUIsSUFFQTl1QixFQUlBMmUsRUFBQTNsQixHQTNDQSxZQUhBb0YsU0FBQTFFLEtBR0FzRyxFQUFBd2UsR0FBQXBXLEtBQUExTyxLQUFBc0csRUFBQSxLQUNBdEcsRUFBQXNsQixHQUFBM2UsRUFBQXJILEVBQUFnSCxHQUdBNUIsRUFBQSxVQUlBLE1BQUExRSxVQUtBLFdBQUEwRSxJQUNBMUUsR0FBQXNHLEtBQUEsS0FBQWIsRUFBQXNnQixVQUFBeVEsR0FBQSxVQUlBcHlCLEVBQUFxdkIsaUJBQUEsS0FBQXp6QixHQUFBLElBQUFWLEVBQUF3RSxRQUFBLGdCQUNBbWhCLEVBQUEzbEIsR0FBQSxXQUlBZ2xCLEdBQUEsUUFBQUEsUUFDQXhjLEtBQUE5SCxFQUFBc2tCLEVBQUFqQixJQUFBMWMsRUFBQTNHLEVBQUFvMUIsTUFFQXFCLEVBQ0F4UixFQUFBeVIsWUFBQXAzQixFQUFBVSxHQUVBaWxCLEVBQUEzbEIsR0FBQVUsTUFrQkFtbEIsSUFBQSxTQUFBeGUsRUFBQXJILEVBQUE4MUIsRUFBQUYsR0FDQSxJQUFBNXlCLEVBQUE2RCxFQUFBbWUsRUFDQWtTLEVBQUExVCxFQUFBeGpCLEdBNkJBLE9BNUJBeTBCLEdBQUEva0IsS0FBQTFQLEtBTUFBLEVBQUFpMUIsR0FBQWlDLEtBSUFsUyxFQUFBN2UsRUFBQWt3QixTQUFBcjJCLElBQUFtRyxFQUFBa3dCLFNBQUFhLEtBR0EsUUFBQWxTLElBQ0FoaUIsRUFBQWdpQixFQUFBMWtCLElBQUErRyxHQUFBLEVBQUF5dUIsU0FJQXR0QixJQUFBeEYsSUFDQUEsRUFBQXV2QixHQUFBbHJCLEVBQUFySCxFQUFBNDFCLElBSUEsV0FBQTV5QixHQUFBaEQsS0FBQTQwQixLQUNBNXhCLEVBQUE0eEIsR0FBQTUwQixJQUlBLEtBQUE4MUIsTUFDQWp2QixFQUFBb3RCLFdBQUFqeEIsSUFDQSxJQUFBOHlCLEdBQUF1QixTQUFBeHdCLE1BQUEsRUFBQTdELEdBR0FBLEtBSUFtRCxFQUFBZ0IsS0FBQSw0QkFBQTFILEVBQUFnMkIsR0FDQXR2QixFQUFBa3dCLFNBQUFaLEdBQUEsQ0FDQW4xQixJQUFBLFNBQUErRyxFQUFBbXJCLEVBQUFzRCxHQUNBLEdBQUF0RCxFQUlBLE9BQUFnQyxHQUFBOWtCLEtBQUF2SixFQUFBMGYsSUFBQXhlLEVBQUEsYUFRQUEsRUFBQWl3QixpQkFBQWwwQixRQUFBaUUsRUFBQWt3Qix3QkFBQTlFLE1BSUF3RCxHQUFBNXVCLEVBQUFvdUIsRUFBQUssR0FIQWhRLEdBQUF6ZSxFQUFBcXRCLEdBQUEsV0FDQSxPQUFBdUIsR0FBQTV1QixFQUFBb3VCLEVBQUFLLE1BTUEvUixJQUFBLFNBQUExYyxFQUFBM0csRUFBQW8xQixHQUNBLElBQUFuc0IsRUFDQWlzQixFQUFBekQsR0FBQTlxQixHQUNBc3VCLEVBQUEsZUFBQXh2QixFQUFBMGYsSUFBQXhlLEVBQUEsZUFBQXV1QixHQUNBTixFQUFBUSxHQUFBTixHQUNBbnVCLEVBQ0FvdUIsRUFDQUssRUFDQUgsRUFDQUMsR0FzQkEsT0FqQkFELEdBQUE3d0IsRUFBQXl2QixrQkFBQXFCLEVBQUFoQyxXQUNBMEIsR0FBQTVzQixLQUFBc3RCLEtBQ0EzdUIsRUFBQSxTQUFBb3VCLEVBQUEsR0FBQWxTLGNBQUFrUyxFQUFBcHhCLE1BQUEsSUFDQTR2QixXQUFBMkIsRUFBQUgsSUFDQUQsR0FBQW51QixFQUFBb3VCLEVBQUEsWUFBQUcsR0FDQSxLQUtBTixJQUFBM3JCLEVBQUE2YixHQUFBcFcsS0FBQTFPLEtBQ0EsUUFBQWlKLEVBQUEsWUFFQXRDLEVBQUFzZSxNQUFBOFAsR0FBQS8wQixFQUNBQSxFQUFBeUYsRUFBQTBmLElBQUF4ZSxFQUFBb3VCLElBR0FKLEdBQUFodUIsRUFBQTNHLEVBQUE0MEIsT0FLQW52QixFQUFBa3dCLFNBQUE3QyxXQUFBVixHQUFBaHVCLEVBQUF3dkIsbUJBQ0EsU0FBQWp0QixFQUFBbXJCLEdBQ0EsR0FBQUEsRUFDQSxPQUFBeUIsV0FBQTFCLEdBQUFsckIsRUFBQSxnQkFDQUEsRUFBQWt3Qix3QkFBQUMsS0FDQTFSLEdBQUF6ZSxFQUFBLENBQWtCbXNCLFdBQUEsR0FBZ0IsV0FDbEMsT0FBQW5zQixFQUFBa3dCLHdCQUFBQyxRQUVBLE9BTUFyeEIsRUFBQWdCLEtBQUEsQ0FDQXN3QixPQUFBLEdBQ0FDLFFBQUEsR0FDQUMsT0FBQSxTQUNDLFNBQUFDLEVBQUFDLEdBQ0QxeEIsRUFBQWt3QixTQUFBdUIsRUFBQUMsR0FBQSxDQUNBQyxPQUFBLFNBQUFwM0IsR0FPQSxJQU5BLElBQUFqQixFQUFBLEVBQ0FzNEIsRUFBQSxHQUdBQyxFQUFBLGlCQUFBdDNCLElBQUEyQixNQUFBLE1BQUEzQixHQUVVakIsRUFBQSxFQUFPQSxJQUNqQnM0QixFQUFBSCxFQUFBblMsR0FBQWhtQixHQUFBbzRCLEdBQ0FHLEVBQUF2NEIsSUFBQXU0QixFQUFBdjRCLEVBQUEsSUFBQXU0QixFQUFBLEdBR0EsT0FBQUQsSUFJQSxXQUFBSCxJQUNBenhCLEVBQUFrd0IsU0FBQXVCLEVBQUFDLEdBQUE5VCxJQUFBc1IsTUFJQWx2QixFQUFBRyxHQUFBeUIsT0FBQSxDQUNBOGQsSUFBQSxTQUFBN2xCLEVBQUFVLEdBQ0EsT0FBQW9pQixFQUFBOWUsS0FBQSxTQUFBcUQsRUFBQXJILEVBQUFVLEdBQ0EsSUFBQWsxQixFQUFBbHVCLEVBQ0F4RixFQUFBLEdBQ0F6QyxFQUFBLEVBRUEsR0FBQTZJLE1BQUFDLFFBQUF2SSxHQUFBLENBSUEsSUFIQTQxQixFQUFBekQsR0FBQTlxQixHQUNBSyxFQUFBMUgsRUFBQW9ELE9BRVczRCxFQUFBaUksRUFBU2pJLElBQ3BCeUMsRUFBQWxDLEVBQUFQLElBQUEwRyxFQUFBMGYsSUFBQXhlLEVBQUFySCxFQUFBUCxJQUFBLEVBQUFtMkIsR0FHQSxPQUFBMXpCLEVBR0EsWUFBQXNHLElBQUE5SCxFQUNBeUYsRUFBQXdmLE1BQUF0ZSxFQUFBckgsRUFBQVUsR0FDQXlGLEVBQUEwZixJQUFBeGUsRUFBQXJILElBQ0dBLEVBQUFVLEVBQUF5QyxVQUFBQyxPQUFBLE1BUUgrQyxFQUFBZ3dCLFNBRUFBLEdBQUE5MEIsVUFBQSxDQUNBc0YsWUFBQXd2QixHQUNBNXZCLEtBQUEsU0FBQWMsRUFBQVcsRUFBQWljLEVBQUFyYyxFQUFBd3VCLEVBQUE1UCxHQUNBeGlCLEtBQUFxRCxPQUNBckQsS0FBQWlnQixPQUNBamdCLEtBQUFveUIsVUFBQWp3QixFQUFBaXdCLE9BQUF4TyxTQUNBNWpCLEtBQUFnRSxVQUNBaEUsS0FBQStSLE1BQUEvUixLQUFBb3BCLElBQUFwcEIsS0FBQThNLE1BQ0E5TSxLQUFBNEQsTUFDQTVELEtBQUF3aUIsU0FBQXJnQixFQUFBc2dCLFVBQUF4QyxHQUFBLFVBRUFuVCxJQUFBLFdBQ0EsSUFBQWtVLEVBQUFtUixHQUFBOEIsVUFBQWowQixLQUFBaWdCLE1BRUEsT0FBQWUsS0FBQTFrQixJQUNBMGtCLEVBQUExa0IsSUFBQTBELE1BQ0FteUIsR0FBQThCLFVBQUFyUSxTQUFBdG5CLElBQUEwRCxPQUVBazBCLElBQUEsU0FBQUMsR0FDQSxJQUFBQyxFQUNBcFQsRUFBQW1SLEdBQUE4QixVQUFBajBCLEtBQUFpZ0IsTUFvQkEsT0FsQkFqZ0IsS0FBQWdFLFFBQUFxd0IsU0FDQXIwQixLQUFBczBCLElBQUFGLEVBQUFqeUIsRUFBQWl3QixPQUFBcHlCLEtBQUFveUIsUUFDQStCLEVBQUFuMEIsS0FBQWdFLFFBQUFxd0IsU0FBQUYsRUFBQSxJQUFBbjBCLEtBQUFnRSxRQUFBcXdCLFVBR0FyMEIsS0FBQXMwQixJQUFBRixFQUFBRCxFQUVBbjBCLEtBQUFvcEIsS0FBQXBwQixLQUFBNEQsSUFBQTVELEtBQUErUixPQUFBcWlCLEVBQUFwMEIsS0FBQStSLE1BRUEvUixLQUFBZ0UsUUFBQXV3QixNQUNBdjBCLEtBQUFnRSxRQUFBdXdCLEtBQUEzNEIsS0FBQW9FLEtBQUFxRCxLQUFBckQsS0FBQW9wQixJQUFBcHBCLE1BR0FnaEIsS0FBQWpCLElBQ0FpQixFQUFBakIsSUFBQS9mLE1BRUFteUIsR0FBQThCLFVBQUFyUSxTQUFBN0QsSUFBQS9mLE1BRUFBLE9BSUFteUIsR0FBQTkwQixVQUFBa0YsS0FBQWxGLFVBQUE4MEIsR0FBQTkwQixVQUVBODBCLEdBQUE4QixVQUFBLENBQ0FyUSxTQUFBLENBQ0F0bkIsSUFBQSxTQUFBNGxCLEdBQ0EsSUFBQTVRLEVBSUEsV0FBQTRRLEVBQUE3ZSxLQUFBcEMsVUFDQSxNQUFBaWhCLEVBQUE3ZSxLQUFBNmUsRUFBQWpDLE9BQUEsTUFBQWlDLEVBQUE3ZSxLQUFBc2UsTUFBQU8sRUFBQWpDLE1BQ0FpQyxFQUFBN2UsS0FBQTZlLEVBQUFqQyxPQU9BM08sRUFBQW5QLEVBQUEwZixJQUFBSyxFQUFBN2UsS0FBQTZlLEVBQUFqQyxLQUFBLE1BR0EsU0FBQTNPLElBQUEsR0FFQXlPLElBQUEsU0FBQW1DLEdBS0EvZixFQUFBcXlCLEdBQUFELEtBQUFyUyxFQUFBakMsTUFDQTlkLEVBQUFxeUIsR0FBQUQsS0FBQXJTLEVBQUFqQyxNQUFBaUMsR0FDSSxJQUFBQSxFQUFBN2UsS0FBQXBDLFVBQ0osTUFBQWloQixFQUFBN2UsS0FBQXNlLE1BQUF4ZixFQUFBK3VCLFNBQUFoUCxFQUFBakMsU0FDQTlkLEVBQUFrd0IsU0FBQW5RLEVBQUFqQyxNQUdBaUMsRUFBQTdlLEtBQUE2ZSxFQUFBakMsTUFBQWlDLEVBQUFrSCxJQUZBam5CLEVBQUF3ZixNQUFBTyxFQUFBN2UsS0FBQTZlLEVBQUFqQyxLQUFBaUMsRUFBQWtILElBQUFsSCxFQUFBTSxTQVVBMlAsR0FBQThCLFVBQUFRLFVBQUF0QyxHQUFBOEIsVUFBQVMsV0FBQSxDQUNBM1UsSUFBQSxTQUFBbUMsR0FDQUEsRUFBQTdlLEtBQUFwQyxVQUFBaWhCLEVBQUE3ZSxLQUFBckIsYUFDQWtnQixFQUFBN2UsS0FBQTZlLEVBQUFqQyxNQUFBaUMsRUFBQWtILE9BS0FqbkIsRUFBQWl3QixPQUFBLENBQ0F1QyxPQUFBLFNBQUFwM0IsR0FDQSxPQUFBQSxHQUVBcTNCLE1BQUEsU0FBQXIzQixHQUNBLFNBQUFtSCxLQUFBbXdCLElBQUF0M0IsRUFBQW1ILEtBQUFvd0IsSUFBQSxHQUVBbFIsU0FBQSxTQUdBemhCLEVBQUFxeUIsR0FBQXJDLEdBQUE5MEIsVUFBQWtGLEtBR0FKLEVBQUFxeUIsR0FBQUQsS0FBQSxHQUtBLElBQ0FRLEdBQUFDLEdBQ0FDLEdBQUEseUJBQ0FDLEdBQUEsY0FFQSxTQUFBQyxLQUNBSCxNQUNBLElBQUFwMUIsRUFBQXcxQixRQUFBcjFCLEVBQUFzMUIsc0JBQ0F0MUIsRUFBQXMxQixzQkFBQUYsSUFFQXAxQixFQUFBMGQsV0FBQTBYLEdBQUFoekIsRUFBQXF5QixHQUFBYyxVQUdBbnpCLEVBQUFxeUIsR0FBQWUsUUFLQSxTQUFBQyxLQUlBLE9BSEF6MUIsRUFBQTBkLFdBQUEsV0FDQXNYLFFBQUF2d0IsSUFFQXV3QixHQUFBOXRCLEtBQUFtaUIsTUFJQSxTQUFBcU0sR0FBQXIwQixFQUFBczBCLEdBQ0EsSUFBQXhLLEVBQ0F6dkIsRUFBQSxFQUNBaVIsRUFBQSxDQUFXaXBCLE9BQUF2MEIsR0FLWCxJQURBczBCLElBQUEsSUFDUWo2QixFQUFBLEVBQU9BLEdBQUEsRUFBQWk2QixFQUVmaHBCLEVBQUEsVUFEQXdlLEVBQUF6SixHQUFBaG1CLEtBQ0FpUixFQUFBLFVBQUF3ZSxHQUFBOXBCLEVBT0EsT0FKQXMwQixJQUNBaHBCLEVBQUE0bEIsUUFBQTVsQixFQUFBK2hCLE1BQUFydEIsR0FHQXNMLEVBR0EsU0FBQWtwQixHQUFBbDVCLEVBQUF1akIsRUFBQTRWLEdBS0EsSUFKQSxJQUFBM1QsRUFDQXFLLEdBQUF1SixHQUFBQyxTQUFBOVYsSUFBQSxJQUFBM2YsT0FBQXcxQixHQUFBQyxTQUFBLE1BQ0E1YyxFQUFBLEVBQ0EvWixFQUFBbXRCLEVBQUFudEIsT0FDUStaLEVBQUEvWixFQUFnQitaLElBQ3hCLEdBQUErSSxFQUFBcUssRUFBQXBULEdBQUF2ZCxLQUFBaTZCLEVBQUE1VixFQUFBdmpCLEdBR0EsT0FBQXdsQixFQXNOQSxTQUFBNFQsR0FBQXp5QixFQUFBMnlCLEVBQUFoeUIsR0FDQSxJQUFBc04sRUFDQTJrQixFQUNBOWMsRUFBQSxFQUNBL1osRUFBQTAyQixHQUFBSSxXQUFBOTJCLE9BQ0E2YyxFQUFBOVosRUFBQXlaLFdBQUFJLE9BQUEsa0JBR0F1WixFQUFBbHlCLE9BRUFreUIsRUFBQSxXQUNBLEdBQUFVLEVBQ0EsU0FZQSxJQVZBLElBQUFFLEVBQUFwQixJQUFBUyxLQUNBM1gsRUFBQW5aLEtBQUE2c0IsSUFBQSxFQUFBc0UsRUFBQU8sVUFBQVAsRUFBQXhCLFNBQUE4QixHQUtBaEMsRUFBQSxHQURBdFcsRUFBQWdZLEVBQUF4QixVQUFBLEdBRUFsYixFQUFBLEVBQ0EvWixFQUFBeTJCLEVBQUFRLE9BQUFqM0IsT0FFVStaLEVBQUEvWixFQUFnQitaLElBQzFCMGMsRUFBQVEsT0FBQWxkLEdBQUErYSxJQUFBQyxHQU1BLE9BSEFsWSxFQUFBaUIsV0FBQTdaLEVBQUEsQ0FBQXd5QixFQUFBMUIsRUFBQXRXLElBR0FzVyxFQUFBLEdBQUEvMEIsRUFDQXllLEdBSUF6ZSxHQUNBNmMsRUFBQWlCLFdBQUE3WixFQUFBLENBQUF3eUIsRUFBQSxNQUlBNVosRUFBQWtCLFlBQUE5WixFQUFBLENBQUF3eUIsS0FDQSxJQUVBQSxFQUFBNVosRUFBQXhCLFFBQUEsQ0FDQXBYLE9BQ0EwbEIsTUFBQTVtQixFQUFBNEIsT0FBQSxHQUEyQml5QixHQUMzQk0sS0FBQW4wQixFQUFBNEIsUUFBQSxHQUNBd3lCLGNBQUEsR0FDQW5FLE9BQUFqd0IsRUFBQWl3QixPQUFBeE8sVUFDSTVmLEdBQ0p3eUIsbUJBQUFSLEVBQ0FTLGdCQUFBenlCLEVBQ0FveUIsVUFBQXJCLElBQUFTLEtBQ0FuQixTQUFBcndCLEVBQUFxd0IsU0FDQWdDLE9BQUEsR0FDQVQsWUFBQSxTQUFBM1YsRUFBQXJjLEdBQ0EsSUFBQXNlLEVBQUEvZixFQUFBZ3dCLE1BQUE5dUIsRUFBQXd5QixFQUFBUyxLQUFBclcsRUFBQXJjLEVBQ0FpeUIsRUFBQVMsS0FBQUMsY0FBQXRXLElBQUE0VixFQUFBUyxLQUFBbEUsUUFFQSxPQURBeUQsRUFBQVEsT0FBQTkxQixLQUFBMmhCLEdBQ0FBLEdBRUFoQixLQUFBLFNBQUF3VixHQUNBLElBQUF2ZCxFQUFBLEVBSUEvWixFQUFBczNCLEVBQUFiLEVBQUFRLE9BQUFqM0IsT0FBQSxFQUNBLEdBQUE2MkIsRUFDQSxPQUFBajJCLEtBR0EsSUFEQWkyQixHQUFBLEVBQ1c5YyxFQUFBL1osRUFBZ0IrWixJQUMzQjBjLEVBQUFRLE9BQUFsZCxHQUFBK2EsSUFBQSxHQVVBLE9BTkF3QyxHQUNBemEsRUFBQWlCLFdBQUE3WixFQUFBLENBQUF3eUIsRUFBQSxNQUNBNVosRUFBQWtCLFlBQUE5WixFQUFBLENBQUF3eUIsRUFBQWEsS0FFQXphLEVBQUFzQixXQUFBbGEsRUFBQSxDQUFBd3lCLEVBQUFhLElBRUExMkIsUUFHQStvQixFQUFBOE0sRUFBQTlNLE1BSUEsS0EvSEEsU0FBQUEsRUFBQXdOLEdBQ0EsSUFBQXBkLEVBQUFuZCxFQUFBbzJCLEVBQUExMUIsRUFBQXNrQixFQUdBLElBQUE3SCxLQUFBNFAsRUFlQSxHQWJBcUosRUFBQW1FLEVBREF2NkIsRUFBQXdqQixFQUFBckcsSUFFQXpjLEVBQUFxc0IsRUFBQTVQLEdBQ0E3VSxNQUFBQyxRQUFBN0gsS0FDQTAxQixFQUFBMTFCLEVBQUEsR0FDQUEsRUFBQXFzQixFQUFBNVAsR0FBQXpjLEVBQUEsSUFHQXljLElBQUFuZCxJQUNBK3NCLEVBQUEvc0IsR0FBQVUsU0FDQXFzQixFQUFBNVAsS0FHQTZILEVBQUE3ZSxFQUFBa3dCLFNBQUFyMkIsS0FDQSxXQUFBZ2xCLEVBTUEsSUFBQTdILEtBTEF6YyxFQUFBc2tCLEVBQUE4UyxPQUFBcDNCLFVBQ0Fxc0IsRUFBQS9zQixHQUlBVSxFQUNBeWMsS0FBQTRQLElBQ0FBLEVBQUE1UCxHQUFBemMsRUFBQXljLEdBQ0FvZCxFQUFBcGQsR0FBQWlaLFFBSUFtRSxFQUFBdjZCLEdBQUFvMkIsRUE2RkF1RSxDQUFBNU4sRUFBQThNLEVBQUFTLEtBQUFDLGVBRVFwZCxFQUFBL1osRUFBZ0IrWixJQUV4QixHQURBN0gsRUFBQXdrQixHQUFBSSxXQUFBL2MsR0FBQXZkLEtBQUFpNkIsRUFBQXh5QixFQUFBMGxCLEVBQUE4TSxFQUFBUyxNQU1BLE9BSkF2MUIsRUFBQXVRLEVBQUE0UCxRQUNBL2UsRUFBQThlLFlBQUE0VSxFQUFBeHlCLEtBQUF3eUIsRUFBQVMsS0FBQW5iLE9BQUErRixLQUNBNVAsRUFBQTRQLEtBQUFqa0IsS0FBQXFVLElBRUFBLEVBeUJBLE9BckJBblAsRUFBQWpFLElBQUE2cUIsRUFBQTZNLEdBQUFDLEdBRUE5MEIsRUFBQTgwQixFQUFBUyxLQUFBdmtCLFFBQ0E4akIsRUFBQVMsS0FBQXZrQixNQUFBblcsS0FBQXlILEVBQUF3eUIsR0FJQUEsRUFDQXJaLFNBQUFxWixFQUFBUyxLQUFBOVosVUFDQXBWLEtBQUF5dUIsRUFBQVMsS0FBQWx2QixLQUFBeXVCLEVBQUFTLEtBQUFNLFVBQ0FsYyxLQUFBbWIsRUFBQVMsS0FBQTViLE1BQ0FzQixPQUFBNlosRUFBQVMsS0FBQXRhLFFBRUE3WixFQUFBcXlCLEdBQUFxQyxNQUNBMTBCLEVBQUE0QixPQUFBd3hCLEVBQUEsQ0FDQWx5QixPQUNBeXpCLEtBQUFqQixFQUNBMWEsTUFBQTBhLEVBQUFTLEtBQUFuYixTQUlBMGEsRUFHQTF6QixFQUFBMnpCLFVBQUEzekIsRUFBQTRCLE9BQUEreEIsR0FBQSxDQUVBQyxTQUFBLENBQ0FnQixJQUFBLFVBQUE5VyxFQUFBdmpCLEdBQ0EsSUFBQXdsQixFQUFBbGlCLEtBQUE0MUIsWUFBQTNWLEVBQUF2akIsR0FFQSxPQURBc2xCLEdBQUFFLEVBQUE3ZSxLQUFBNGMsRUFBQXVCLEdBQUFwVyxLQUFBMU8sR0FBQXdsQixHQUNBQSxLQUlBOFUsUUFBQSxTQUFBak8sRUFBQTNsQixHQUNBckMsRUFBQWdvQixJQUNBM2xCLEVBQUEybEIsRUFDQUEsRUFBQSxPQUVBQSxJQUFBaGUsTUFBQWdQLEdBT0EsSUFKQSxJQUFBa0csRUFDQTlHLEVBQUEsRUFDQS9aLEVBQUEycEIsRUFBQTNwQixPQUVTK1osRUFBQS9aLEVBQWdCK1osSUFDekI4RyxFQUFBOEksRUFBQTVQLEdBQ0EyYyxHQUFBQyxTQUFBOVYsR0FBQTZWLEdBQUFDLFNBQUE5VixJQUFBLEdBQ0E2VixHQUFBQyxTQUFBOVYsR0FBQXZRLFFBQUF0TSxJQUlBOHlCLFdBQUEsQ0EzV0EsU0FBQTd5QixFQUFBMGxCLEVBQUF1TixHQUNBLElBQUFyVyxFQUFBdmpCLEVBQUF3bUIsRUFBQWxDLEVBQUFpVyxFQUFBQyxFQUFBQyxFQUFBdlYsRUFDQXdWLEVBQUEsVUFBQXJPLEdBQUEsV0FBQUEsRUFDQStOLEVBQUE5MkIsS0FDQXVyQixFQUFBLEdBQ0E1SixFQUFBdGUsRUFBQXNlLE1BQ0F5VCxFQUFBL3hCLEVBQUFwQyxVQUFBeWdCLEdBQUFyZSxHQUNBZzBCLEVBQUFsWCxFQUFBN2pCLElBQUErRyxFQUFBLFVBNkJBLElBQUE0YyxLQTFCQXFXLEVBQUFuYixRQUVBLE9BREE2RixFQUFBN2UsRUFBQThlLFlBQUE1ZCxFQUFBLE9BQ0FpMEIsV0FDQXRXLEVBQUFzVyxTQUFBLEVBQ0FMLEVBQUFqVyxFQUFBcE4sTUFBQXlILEtBQ0EyRixFQUFBcE4sTUFBQXlILEtBQUEsV0FDQTJGLEVBQUFzVyxVQUNBTCxNQUlBalcsRUFBQXNXLFdBRUFSLEVBQUE5YSxPQUFBLFdBR0E4YSxFQUFBOWEsT0FBQSxXQUNBZ0YsRUFBQXNXLFdBQ0FuMUIsRUFBQWdaLE1BQUE5WCxFQUFBLE1BQUFqRSxRQUNBNGhCLEVBQUFwTixNQUFBeUgsWUFPQTBOLEVBRUEsR0FEQXJzQixFQUFBcXNCLEVBQUE5SSxHQUNBZ1YsR0FBQXZwQixLQUFBaFAsR0FBQSxDQUdBLFVBRkFxc0IsRUFBQTlJLEdBQ0FpRCxLQUFBLFdBQUF4bUIsRUFDQUEsS0FBQTA0QixFQUFBLGdCQUlBLFlBQUExNEIsSUFBQTI2QixRQUFBN3lCLElBQUE2eUIsRUFBQXBYLEdBS0EsU0FKQW1WLEdBQUEsRUFPQTdKLEVBQUF0TCxHQUFBb1gsS0FBQXBYLElBQUE5ZCxFQUFBd2YsTUFBQXRlLEVBQUE0YyxHQU1BLElBREFpWCxHQUFBLzBCLEVBQUErQyxjQUFBNmpCLE1BQ0E1bUIsRUFBQStDLGNBQUFxbUIsR0E4REEsSUFBQXRMLEtBekRBbVgsR0FBQSxJQUFBL3pCLEVBQUFwQyxXQU1BcTFCLEVBQUFpQixTQUFBLENBQUE1VixFQUFBNFYsU0FBQTVWLEVBQUE2VixVQUFBN1YsRUFBQThWLFdBSUEsT0FEQU4sRUFBQUUsS0FBQXpWLFdBRUF1VixFQUFBaFgsRUFBQTdqQixJQUFBK0csRUFBQSxZQUdBLFVBREF1ZSxFQUFBemYsRUFBQTBmLElBQUF4ZSxFQUFBLGNBRUE4ekIsRUFDQXZWLEVBQUF1VixHQUlBclUsR0FBQSxDQUFBemYsSUFBQSxHQUNBOHpCLEVBQUE5ekIsRUFBQXNlLE1BQUFDLFNBQUF1VixFQUNBdlYsRUFBQXpmLEVBQUEwZixJQUFBeGUsRUFBQSxXQUNBeWYsR0FBQSxDQUFBemYsT0FLQSxXQUFBdWUsR0FBQSxpQkFBQUEsR0FBQSxNQUFBdVYsSUFDQSxTQUFBaDFCLEVBQUEwZixJQUFBeGUsRUFBQSxXQUdBNnpCLElBQ0FKLEVBQUExdkIsS0FBQSxXQUNBdWEsRUFBQUMsUUFBQXVWLElBRUEsTUFBQUEsSUFDQXZWLEVBQUFELEVBQUFDLFFBQ0F1VixFQUFBLFNBQUF2VixFQUFBLEdBQUFBLElBR0FELEVBQUFDLFFBQUEsaUJBS0EwVSxFQUFBaUIsV0FDQTVWLEVBQUE0VixTQUFBLFNBQ0FULEVBQUE5YSxPQUFBLFdBQ0EyRixFQUFBNFYsU0FBQWpCLEVBQUFpQixTQUFBLEdBQ0E1VixFQUFBNlYsVUFBQWxCLEVBQUFpQixTQUFBLEdBQ0E1VixFQUFBOFYsVUFBQW5CLEVBQUFpQixTQUFBLE1BS0FMLEdBQUEsRUFDQTNMLEVBR0EyTCxJQUNBRyxFQUNBLFdBQUFBLElBQ0FqQyxFQUFBaUMsRUFBQWpDLFFBR0FpQyxFQUFBbFgsRUFBQXJCLE9BQUF6YixFQUFBLFVBQWlEdWUsUUFBQXVWLElBSWpEalUsSUFDQW1VLEVBQUFqQyxXQUlBQSxHQUNBdFMsR0FBQSxDQUFBemYsSUFBQSxHQUtBeXpCLEVBQUExdkIsS0FBQSxXQVNBLElBQUE2WSxLQUpBbVYsR0FDQXRTLEdBQUEsQ0FBQXpmLElBRUE4YyxFQUFBM0UsT0FBQW5ZLEVBQUEsVUFDQWtvQixFQUNBcHBCLEVBQUF3ZixNQUFBdGUsRUFBQTRjLEVBQUFzTCxFQUFBdEwsT0FNQWlYLEVBQUF0QixHQUFBUixFQUFBaUMsRUFBQXBYLEdBQUEsRUFBQUEsRUFBQTZXLEdBQ0E3VyxLQUFBb1gsSUFDQUEsRUFBQXBYLEdBQUFpWCxFQUFBbmxCLE1BQ0FxakIsSUFDQThCLEVBQUF0ekIsSUFBQXN6QixFQUFBbmxCLE1BQ0FtbEIsRUFBQW5sQixNQUFBLE1BdU1BMmxCLFVBQUEsU0FBQXQwQixFQUFBa3FCLEdBQ0FBLEVBQ0F3SSxHQUFBSSxXQUFBeG1CLFFBQUF0TSxHQUVBMHlCLEdBQUFJLFdBQUEzMUIsS0FBQTZDLE1BS0FqQixFQUFBdzFCLE1BQUEsU0FBQUEsRUFBQXZGLEVBQUE5dkIsR0FDQSxJQUFBczFCLEVBQUFELEdBQUEsaUJBQUFBLEVBQUF4MUIsRUFBQTRCLE9BQUEsR0FBaUU0ekIsR0FBQSxDQUNqRWYsU0FBQXQwQixPQUFBOHZCLEdBQ0FyeEIsRUFBQTQyQixNQUNBdEQsU0FBQXNELEVBQ0F2RixPQUFBOXZCLEdBQUE4dkIsT0FBQXJ4QixFQUFBcXhCLE9Bb0NBLE9BaENBandCLEVBQUFxeUIsR0FBQXhPLElBQ0E0UixFQUFBdkQsU0FBQSxFQUdBLGlCQUFBdUQsRUFBQXZELFdBQ0F1RCxFQUFBdkQsWUFBQWx5QixFQUFBcXlCLEdBQUFxRCxPQUNBRCxFQUFBdkQsU0FBQWx5QixFQUFBcXlCLEdBQUFxRCxPQUFBRCxFQUFBdkQsVUFHQXVELEVBQUF2RCxTQUFBbHlCLEVBQUFxeUIsR0FBQXFELE9BQUFqVSxVQU1BLE1BQUFnVSxFQUFBemMsUUFBQSxJQUFBeWMsRUFBQXpjLFFBQ0F5YyxFQUFBemMsTUFBQSxNQUlBeWMsRUFBQTdWLElBQUE2VixFQUFBaEIsU0FFQWdCLEVBQUFoQixTQUFBLFdBQ0E3MUIsRUFBQTYyQixFQUFBN1YsTUFDQTZWLEVBQUE3VixJQUFBbm1CLEtBQUFvRSxNQUdBNDNCLEVBQUF6YyxPQUNBaFosRUFBQTJlLFFBQUE5Z0IsS0FBQTQzQixFQUFBemMsUUFJQXljLEdBR0F6MUIsRUFBQUcsR0FBQXlCLE9BQUEsQ0FDQSt6QixPQUFBLFNBQUFILEVBQUE1NEIsRUFBQXF6QixFQUFBaHZCLEdBR0EsT0FBQXBELEtBQUFvTyxPQUFBc1QsSUFBQUcsSUFBQSxhQUFBa0IsT0FHQW5mLE1BQUFtMEIsUUFBQSxDQUFvQnpGLFFBQUF2ekIsR0FBYzQ0QixFQUFBdkYsRUFBQWh2QixJQUVsQzIwQixRQUFBLFNBQUE5WCxFQUFBMFgsRUFBQXZGLEVBQUFodkIsR0FDQSxJQUFBd1EsRUFBQXpSLEVBQUErQyxjQUFBK2EsR0FDQStYLEVBQUE3MUIsRUFBQXcxQixRQUFBdkYsRUFBQWh2QixHQUNBNjBCLEVBQUEsV0FHQSxJQUFBbkIsRUFBQWhCLEdBQUE5MUIsS0FBQW1DLEVBQUE0QixPQUFBLEdBQWlEa2MsR0FBQStYLElBR2pEcGtCLEdBQUF1TSxFQUFBN2pCLElBQUEwRCxLQUFBLFlBQ0E4MkIsRUFBQTVWLE1BQUEsSUFLQSxPQUZBK1csRUFBQUMsT0FBQUQsRUFFQXJrQixJQUFBLElBQUFva0IsRUFBQTdjLE1BQ0FuYixLQUFBbUQsS0FBQTgwQixHQUNBajRCLEtBQUFtYixNQUFBNmMsRUFBQTdjLE1BQUE4YyxJQUVBL1csS0FBQSxTQUFBOWYsRUFBQWdnQixFQUFBc1YsR0FDQSxJQUFBeUIsRUFBQSxTQUFBblgsR0FDQSxJQUFBRSxFQUFBRixFQUFBRSxZQUNBRixFQUFBRSxLQUNBQSxFQUFBd1YsSUFZQSxNQVRBLGlCQUFBdDFCLElBQ0FzMUIsRUFBQXRWLEVBQ0FBLEVBQUFoZ0IsRUFDQUEsT0FBQW9ELEdBRUE0YyxJQUFBLElBQUFoZ0IsR0FDQXBCLEtBQUFtYixNQUFBL1osR0FBQSxTQUdBcEIsS0FBQW1ELEtBQUEsV0FDQSxJQUFBMmQsR0FBQSxFQUNBM0gsRUFBQSxNQUFBL1gsS0FBQSxhQUNBZzNCLEVBQUFqMkIsRUFBQWkyQixPQUNBcFksRUFBQUcsRUFBQTdqQixJQUFBMEQsTUFFQSxHQUFBbVosRUFDQTZHLEVBQUE3RyxJQUFBNkcsRUFBQTdHLEdBQUErSCxNQUNBaVgsRUFBQW5ZLEVBQUE3RyxTQUdBLElBQUFBLEtBQUE2RyxFQUNBQSxFQUFBN0csSUFBQTZHLEVBQUE3RyxHQUFBK0gsTUFBQWdVLEdBQUF4cEIsS0FBQXlOLElBQ0FnZixFQUFBblksRUFBQTdHLElBS0EsSUFBQUEsRUFBQWlmLEVBQUFoNUIsT0FBK0IrWixLQUMvQmlmLEVBQUFqZixHQUFBOVYsT0FBQXJELE1BQ0EsTUFBQW9CLEdBQUFnM0IsRUFBQWpmLEdBQUFnQyxRQUFBL1osSUFFQWczQixFQUFBamYsR0FBQTJkLEtBQUE1VixLQUFBd1YsR0FDQTVWLEdBQUEsRUFDQXNYLEVBQUF0MEIsT0FBQXFWLEVBQUEsS0FPQTJILEdBQUE0VixHQUNBdjBCLEVBQUEyZSxRQUFBOWdCLEtBQUFvQixNQUlBODJCLE9BQUEsU0FBQTkyQixHQUlBLE9BSEEsSUFBQUEsSUFDQUEsS0FBQSxNQUVBcEIsS0FBQW1ELEtBQUEsV0FDQSxJQUFBZ1csRUFDQTZHLEVBQUFHLEVBQUE3akIsSUFBQTBELE1BQ0FtYixFQUFBNkUsRUFBQTVlLEVBQUEsU0FDQTRmLEVBQUFoQixFQUFBNWUsRUFBQSxjQUNBZzNCLEVBQUFqMkIsRUFBQWkyQixPQUNBaDVCLEVBQUErYixJQUFBL2IsT0FBQSxFQWFBLElBVkE0Z0IsRUFBQWtZLFFBQUEsRUFHQS8xQixFQUFBZ1osTUFBQW5iLEtBQUFvQixFQUFBLElBRUE0ZixLQUFBRSxNQUNBRixFQUFBRSxLQUFBdGxCLEtBQUFvRSxNQUFBLEdBSUFtWixFQUFBaWYsRUFBQWg1QixPQUErQitaLEtBQy9CaWYsRUFBQWpmLEdBQUE5VixPQUFBckQsTUFBQW80QixFQUFBamYsR0FBQWdDLFFBQUEvWixJQUNBZzNCLEVBQUFqZixHQUFBMmQsS0FBQTVWLE1BQUEsR0FDQWtYLEVBQUF0MEIsT0FBQXFWLEVBQUEsSUFLQSxJQUFBQSxFQUFBLEVBQW1CQSxFQUFBL1osRUFBZ0IrWixJQUNuQ2dDLEVBQUFoQyxJQUFBZ0MsRUFBQWhDLEdBQUErZSxRQUNBL2MsRUFBQWhDLEdBQUErZSxPQUFBdDhCLEtBQUFvRSxhQUtBZ2dCLEVBQUFrWSxZQUtBLzFCLEVBQUFnQixLQUFBLGtDQUFBMUgsRUFBQU8sR0FDQSxJQUFBcThCLEVBQUFsMkIsRUFBQUcsR0FBQXRHLEdBQ0FtRyxFQUFBRyxHQUFBdEcsR0FBQSxTQUFBMjdCLEVBQUF2RixFQUFBaHZCLEdBQ0EsYUFBQXUwQixHQUFBLGtCQUFBQSxFQUNBVSxFQUFBLzBCLE1BQUF0RCxLQUFBYixXQUNBYSxLQUFBKzNCLFFBQUF0QyxHQUFBejVCLEdBQUEsR0FBQTI3QixFQUFBdkYsRUFBQWh2QixNQUtBakIsRUFBQWdCLEtBQUEsQ0FDQW0xQixVQUFBN0MsR0FBQSxRQUNBOEMsUUFBQTlDLEdBQUEsUUFDQStDLFlBQUEvQyxHQUFBLFVBQ0FnRCxPQUFBLENBQVVuRyxRQUFBLFFBQ1ZvRyxRQUFBLENBQVdwRyxRQUFBLFFBQ1hxRyxXQUFBLENBQWNyRyxRQUFBLFdBQ2IsU0FBQXQyQixFQUFBK3NCLEdBQ0Q1bUIsRUFBQUcsR0FBQXRHLEdBQUEsU0FBQTI3QixFQUFBdkYsRUFBQWh2QixHQUNBLE9BQUFwRCxLQUFBKzNCLFFBQUFoUCxFQUFBNE8sRUFBQXZGLEVBQUFodkIsTUFJQWpCLEVBQUFpMkIsT0FBQSxHQUNBajJCLEVBQUFxeUIsR0FBQWUsS0FBQSxXQUNBLElBQUFzQixFQUNBcDdCLEVBQUEsRUFDQTI4QixFQUFBajJCLEVBQUFpMkIsT0FJQSxJQUZBckQsR0FBQTl0QixLQUFBbWlCLE1BRVEzdEIsRUFBQTI4QixFQUFBaDVCLE9BQW1CM0QsS0FDM0JvN0IsRUFBQXVCLEVBQUEzOEIsT0FHQTI4QixFQUFBMzhCLEtBQUFvN0IsR0FDQXVCLEVBQUF0MEIsT0FBQXJJLElBQUEsR0FJQTI4QixFQUFBaDVCLFFBQ0ErQyxFQUFBcXlCLEdBQUF0VCxPQUVBNlQsUUFBQXZ3QixHQUdBckMsRUFBQXF5QixHQUFBcUMsTUFBQSxTQUFBQSxHQUNBMTBCLEVBQUFpMkIsT0FBQTczQixLQUFBczJCLEdBQ0ExMEIsRUFBQXF5QixHQUFBemlCLFNBR0E1UCxFQUFBcXlCLEdBQUFjLFNBQUEsR0FDQW56QixFQUFBcXlCLEdBQUF6aUIsTUFBQSxXQUNBaWpCLEtBSUFBLElBQUEsRUFDQUcsT0FHQWh6QixFQUFBcXlCLEdBQUF0VCxLQUFBLFdBQ0E4VCxHQUFBLE1BR0E3eUIsRUFBQXF5QixHQUFBcUQsT0FBQSxDQUNBZSxLQUFBLElBQ0FDLEtBQUEsSUFHQWpWLFNBQUEsS0FNQXpoQixFQUFBRyxHQUFBdzJCLE1BQUEsU0FBQUMsRUFBQTMzQixHQUlBLE9BSEEyM0IsRUFBQTUyQixFQUFBcXlCLElBQUFyeUIsRUFBQXF5QixHQUFBcUQsT0FBQWtCLE1BQ0EzM0IsS0FBQSxLQUVBcEIsS0FBQW1iLE1BQUEvWixFQUFBLFNBQUFxSixFQUFBdVcsR0FDQSxJQUFBZ1ksRUFBQWo1QixFQUFBMGQsV0FBQWhULEVBQUFzdUIsR0FDQS9YLEVBQUFFLEtBQUEsV0FDQW5oQixFQUFBazVCLGFBQUFELE9BTUEsV0FDQSxJQUFBcnFCLEVBQUEvTyxFQUFBZ0MsY0FBQSxTQUVBZzJCLEVBREFoNEIsRUFBQWdDLGNBQUEsVUFDQUcsWUFBQW5DLEVBQUFnQyxjQUFBLFdBRUErTSxFQUFBdk4sS0FBQSxXQUlBTixFQUFBbzRCLFFBQUEsS0FBQXZxQixFQUFBalMsTUFJQW9FLEVBQUFxNEIsWUFBQXZCLEVBQUFsa0IsVUFJQS9FLEVBQUEvTyxFQUFBZ0MsY0FBQSxVQUNBbEYsTUFBQSxJQUNBaVMsRUFBQXZOLEtBQUEsUUFDQU4sRUFBQXM0QixXQUFBLE1BQUF6cUIsRUFBQWpTLE1BcEJBLEdBd0JBLElBQUEyOEIsR0FDQXpzQixHQUFBekssRUFBQXdOLEtBQUEvQyxXQUVBekssRUFBQUcsR0FBQXlCLE9BQUEsQ0FDQThMLEtBQUEsU0FBQTdULEVBQUFVLEdBQ0EsT0FBQW9pQixFQUFBOWUsS0FBQW1DLEVBQUEwTixLQUFBN1QsRUFBQVUsRUFBQXlDLFVBQUFDLE9BQUEsSUFHQWs2QixXQUFBLFNBQUF0OUIsR0FDQSxPQUFBZ0UsS0FBQW1ELEtBQUEsV0FDQWhCLEVBQUFtM0IsV0FBQXQ1QixLQUFBaEUsUUFLQW1HLEVBQUE0QixPQUFBLENBQ0E4TCxLQUFBLFNBQUF4TSxFQUFBckgsRUFBQVUsR0FDQSxJQUFBc0csRUFBQWdlLEVBQ0F1WSxFQUFBbDJCLEVBQUFwQyxTQUdBLE9BQUFzNEIsR0FBQSxJQUFBQSxHQUFBLElBQUFBLEVBS0EsZ0JBQUFsMkIsRUFBQXVJLGFBQ0F6SixFQUFBOGQsS0FBQTVjLEVBQUFySCxFQUFBVSxJQUtBLElBQUE2OEIsR0FBQXAzQixFQUFBMFYsU0FBQXhVLEtBQ0EyZCxFQUFBN2UsRUFBQXEzQixVQUFBeDlCLEVBQUFnSyxpQkFDQTdELEVBQUF3TixLQUFBNUUsTUFBQTdCLEtBQUF3QyxLQUFBMVAsR0FBQXE5QixRQUFBNzBCLFNBR0FBLElBQUE5SCxFQUNBLE9BQUFBLE9BQ0F5RixFQUFBbTNCLFdBQUFqMkIsRUFBQXJILEdBSUFnbEIsR0FBQSxRQUFBQSxRQUNBeGMsS0FBQXhCLEVBQUFnZSxFQUFBakIsSUFBQTFjLEVBQUEzRyxFQUFBVixJQUNBZ0gsR0FHQUssRUFBQXdJLGFBQUE3UCxFQUFBVSxFQUFBLElBQ0FBLEdBR0Fza0IsR0FBQSxRQUFBQSxHQUFBLFFBQUFoZSxFQUFBZ2UsRUFBQTFrQixJQUFBK0csRUFBQXJILElBQ0FnSCxFQU1BLE9BSEFBLEVBQUFiLEVBQUFtTSxLQUFBdUIsS0FBQXhNLEVBQUFySCxTQUdBd0ksRUFBQXhCLElBR0F3MkIsVUFBQSxDQUNBcDRCLEtBQUEsQ0FDQTJlLElBQUEsU0FBQTFjLEVBQUEzRyxHQUNBLElBQUFvRSxFQUFBczRCLFlBQUEsVUFBQTE4QixHQUNBaVAsRUFBQXRJLEVBQUEsVUFDQSxJQUFBckUsRUFBQXFFLEVBQUEzRyxNQUtBLE9BSkEyRyxFQUFBd0ksYUFBQSxPQUFBblAsR0FDQXNDLElBQ0FxRSxFQUFBM0csTUFBQXNDLEdBRUF0QyxNQU1BNDhCLFdBQUEsU0FBQWoyQixFQUFBM0csR0FDQSxJQUFBVixFQUNBUCxFQUFBLEVBSUFnK0IsRUFBQS84QixLQUFBcU8sTUFBQWdQLEdBRUEsR0FBQTBmLEdBQUEsSUFBQXAyQixFQUFBcEMsU0FDQSxLQUFBakYsRUFBQXk5QixFQUFBaCtCLE1BQ0E0SCxFQUFBNkksZ0JBQUFsUSxNQU9BcTlCLEdBQUEsQ0FDQXRaLElBQUEsU0FBQTFjLEVBQUEzRyxFQUFBVixHQVFBLE9BUEEsSUFBQVUsRUFHQXlGLEVBQUFtM0IsV0FBQWoyQixFQUFBckgsR0FFQXFILEVBQUF3SSxhQUFBN1AsS0FFQUEsSUFJQW1HLEVBQUFnQixLQUFBaEIsRUFBQXdOLEtBQUE1RSxNQUFBN0IsS0FBQXRLLE9BQUFtTSxNQUFBLGlCQUFBdFAsRUFBQU8sR0FDQSxJQUFBQyxFQUFBMlEsR0FBQTVRLElBQUFtRyxFQUFBbU0sS0FBQXVCLEtBRUFqRCxHQUFBNVEsR0FBQSxTQUFBcUgsRUFBQXJILEVBQUFvSyxHQUNBLElBQUFwRCxFQUFBeWpCLEVBQ0FpVCxFQUFBMTlCLEVBQUFnSyxjQVlBLE9BVkFJLElBR0FxZ0IsRUFBQTdaLEdBQUE4c0IsR0FDQTlzQixHQUFBOHNCLEdBQUExMkIsRUFDQUEsRUFBQSxNQUFBL0csRUFBQW9ILEVBQUFySCxFQUFBb0ssR0FDQXN6QixFQUNBLEtBQ0E5c0IsR0FBQThzQixHQUFBalQsR0FFQXpqQixLQU9BLElBQUEyMkIsR0FBQSxzQ0FDQUMsR0FBQSxnQkF5SUEsU0FBQUMsR0FBQW45QixHQUVBLE9BREFBLEVBQUFxTyxNQUFBZ1AsSUFBQSxJQUNBNWIsS0FBQSxLQUlBLFNBQUEyN0IsR0FBQXoyQixHQUNBLE9BQUFBLEVBQUF1SSxjQUFBdkksRUFBQXVJLGFBQUEsYUFHQSxTQUFBbXVCLEdBQUFyOUIsR0FDQSxPQUFBNEgsTUFBQUMsUUFBQTdILEdBQ0FBLEVBRUEsaUJBQUFBLEdBQ0FBLEVBQUFxTyxNQUFBZ1AsSUFFQSxHQXhKQTVYLEVBQUFHLEdBQUF5QixPQUFBLENBQ0FrYyxLQUFBLFNBQUFqa0IsRUFBQVUsR0FDQSxPQUFBb2lCLEVBQUE5ZSxLQUFBbUMsRUFBQThkLEtBQUFqa0IsRUFBQVUsRUFBQXlDLFVBQUFDLE9BQUEsSUFHQTQ2QixXQUFBLFNBQUFoK0IsR0FDQSxPQUFBZ0UsS0FBQW1ELEtBQUEsa0JBQ0FuRCxLQUFBbUMsRUFBQTgzQixRQUFBaitCLFlBS0FtRyxFQUFBNEIsT0FBQSxDQUNBa2MsS0FBQSxTQUFBNWMsRUFBQXJILEVBQUFVLEdBQ0EsSUFBQXNHLEVBQUFnZSxFQUNBdVksRUFBQWwyQixFQUFBcEMsU0FHQSxPQUFBczRCLEdBQUEsSUFBQUEsR0FBQSxJQUFBQSxFQVdBLE9BUEEsSUFBQUEsR0FBQXAzQixFQUFBMFYsU0FBQXhVLEtBR0FySCxFQUFBbUcsRUFBQTgzQixRQUFBaitCLE1BQ0FnbEIsRUFBQTdlLEVBQUE4eEIsVUFBQWo0QixTQUdBd0ksSUFBQTlILEVBQ0Fza0IsR0FBQSxRQUFBQSxRQUNBeGMsS0FBQXhCLEVBQUFnZSxFQUFBakIsSUFBQTFjLEVBQUEzRyxFQUFBVixJQUNBZ0gsRUFHQUssRUFBQXJILEdBQUFVLEVBR0Fza0IsR0FBQSxRQUFBQSxHQUFBLFFBQUFoZSxFQUFBZ2UsRUFBQTFrQixJQUFBK0csRUFBQXJILElBQ0FnSCxFQUdBSyxFQUFBckgsSUFHQWk0QixVQUFBLENBQ0ExZ0IsU0FBQSxDQUNBalgsSUFBQSxTQUFBK0csR0FPQSxJQUFBNjJCLEVBQUEvM0IsRUFBQW1NLEtBQUF1QixLQUFBeE0sRUFBQSxZQUVBLE9BQUE2MkIsRUFDQUMsU0FBQUQsRUFBQSxJQUlBUCxHQUFBanVCLEtBQUFySSxFQUFBc0ksV0FDQWl1QixHQUFBbHVCLEtBQUFySSxFQUFBc0ksV0FDQXRJLEVBQUFpUSxLQUVBLEdBR0EsS0FLQTJtQixRQUFBLENBQ0FHLElBQUEsVUFDQUMsTUFBQSxlQVlBdjVCLEVBQUFxNEIsY0FDQWgzQixFQUFBOHhCLFVBQUF2Z0IsU0FBQSxDQUNBcFgsSUFBQSxTQUFBK0csR0FJQSxJQUFBMk8sRUFBQTNPLEVBQUFyQixXQUlBLE9BSEFnUSxLQUFBaFEsWUFDQWdRLEVBQUFoUSxXQUFBMlIsY0FFQSxNQUVBb00sSUFBQSxTQUFBMWMsR0FJQSxJQUFBMk8sRUFBQTNPLEVBQUFyQixXQUNBZ1EsSUFDQUEsRUFBQTJCLGNBRUEzQixFQUFBaFEsWUFDQWdRLEVBQUFoUSxXQUFBMlIsa0JBT0F4UixFQUFBZ0IsS0FBQSxDQUNBLFdBQ0EsV0FDQSxZQUNBLGNBQ0EsY0FDQSxVQUNBLFVBQ0EsU0FDQSxjQUNBLG1CQUNBLFdBQ0FoQixFQUFBODNCLFFBQUFqNkIsS0FBQWdHLGVBQUFoRyxPQTRCQW1DLEVBQUFHLEdBQUF5QixPQUFBLENBQ0F1MkIsU0FBQSxTQUFBNTlCLEdBQ0EsSUFBQTY5QixFQUFBbDNCLEVBQUF5SixFQUFBMHRCLEVBQUFDLEVBQUE5MkIsRUFBQSsyQixFQUNBai9CLEVBQUEsRUFFQSxHQUFBc0YsRUFBQXJFLEdBQ0EsT0FBQXNELEtBQUFtRCxLQUFBLFNBQUFRLEdBQ0F4QixFQUFBbkMsTUFBQXM2QixTQUFBNTlCLEVBQUFkLEtBQUFvRSxLQUFBMkQsRUFBQW0yQixHQUFBOTVCLFVBTUEsSUFGQXU2QixFQUFBUixHQUFBcjlCLElBRUEwQyxPQUNBLEtBQUFpRSxFQUFBckQsS0FBQXZFLE1BSUEsR0FIQSsrQixFQUFBVixHQUFBejJCLEdBQ0F5SixFQUFBLElBQUF6SixFQUFBcEMsVUFBQSxJQUFBNDRCLEdBQUFXLEdBQUEsSUFFQSxDQUVBLElBREE3MkIsRUFBQSxFQUNBODJCLEVBQUFGLEVBQUE1MkIsTUFDQW1KLEVBQUF0TSxRQUFBLElBQUFpNkIsRUFBQSxTQUNBM3RCLEdBQUEydEIsRUFBQSxLQU1BRCxLQURBRSxFQUFBYixHQUFBL3NCLEtBRUF6SixFQUFBd0ksYUFBQSxRQUFBNnVCLEdBTUEsT0FBQTE2QixNQUdBMjZCLFlBQUEsU0FBQWorQixHQUNBLElBQUE2OUIsRUFBQWwzQixFQUFBeUosRUFBQTB0QixFQUFBQyxFQUFBOTJCLEVBQUErMkIsRUFDQWovQixFQUFBLEVBRUEsR0FBQXNGLEVBQUFyRSxHQUNBLE9BQUFzRCxLQUFBbUQsS0FBQSxTQUFBUSxHQUNBeEIsRUFBQW5DLE1BQUEyNkIsWUFBQWorQixFQUFBZCxLQUFBb0UsS0FBQTJELEVBQUFtMkIsR0FBQTk1QixVQUlBLElBQUFiLFVBQUFDLE9BQ0EsT0FBQVksS0FBQTZQLEtBQUEsWUFLQSxJQUZBMHFCLEVBQUFSLEdBQUFyOUIsSUFFQTBDLE9BQ0EsS0FBQWlFLEVBQUFyRCxLQUFBdkUsTUFNQSxHQUxBKytCLEVBQUFWLEdBQUF6MkIsR0FHQXlKLEVBQUEsSUFBQXpKLEVBQUFwQyxVQUFBLElBQUE0NEIsR0FBQVcsR0FBQSxJQUVBLENBRUEsSUFEQTcyQixFQUFBLEVBQ0E4MkIsRUFBQUYsRUFBQTUyQixNQUdBLEtBQUFtSixFQUFBdE0sUUFBQSxJQUFBaTZCLEVBQUEsU0FDQTN0QixJQUFBbEksUUFBQSxJQUFBNjFCLEVBQUEsU0FNQUQsS0FEQUUsRUFBQWIsR0FBQS9zQixLQUVBekosRUFBQXdJLGFBQUEsUUFBQTZ1QixHQU1BLE9BQUExNkIsTUFHQTQ2QixZQUFBLFNBQUFsK0IsRUFBQW0rQixHQUNBLElBQUF6NUIsU0FBQTFFLEVBQ0FvK0IsRUFBQSxXQUFBMTVCLEdBQUFrRCxNQUFBQyxRQUFBN0gsR0FFQSx3QkFBQW0rQixHQUFBQyxFQUNBRCxFQUFBNzZCLEtBQUFzNkIsU0FBQTU5QixHQUFBc0QsS0FBQTI2QixZQUFBaitCLEdBR0FxRSxFQUFBckUsR0FDQXNELEtBQUFtRCxLQUFBLFNBQUExSCxHQUNBMEcsRUFBQW5DLE1BQUE0NkIsWUFDQWwrQixFQUFBZCxLQUFBb0UsS0FBQXZFLEVBQUFxK0IsR0FBQTk1QixNQUFBNjZCLEdBQ0FBLEtBS0E3NkIsS0FBQW1ELEtBQUEsV0FDQSxJQUFBNkssRUFBQXZTLEVBQUE4YyxFQUFBd2lCLEVBRUEsR0FBQUQsRUFPQSxJQUpBci9CLEVBQUEsRUFDQThjLEVBQUFwVyxFQUFBbkMsTUFDQSs2QixFQUFBaEIsR0FBQXI5QixHQUVBc1IsRUFBQStzQixFQUFBdC9CLE1BR0E4YyxFQUFBeWlCLFNBQUFodEIsR0FDQXVLLEVBQUFvaUIsWUFBQTNzQixHQUVBdUssRUFBQStoQixTQUFBdHNCLGFBS0l4SixJQUFBOUgsR0FBQSxZQUFBMEUsS0FDSjRNLEVBQUE4ckIsR0FBQTk1QixRQUlBbWdCLEVBQUFKLElBQUEvZixLQUFBLGdCQUFBZ08sR0FPQWhPLEtBQUE2TCxjQUNBN0wsS0FBQTZMLGFBQUEsUUFDQW1DLElBQUEsSUFBQXRSLEVBQ0EsR0FDQXlqQixFQUFBN2pCLElBQUEwRCxLQUFBLDBCQU9BZzdCLFNBQUEsU0FBQTU0QixHQUNBLElBQUE0TCxFQUFBM0ssRUFDQTVILEVBQUEsRUFHQSxJQURBdVMsRUFBQSxJQUFBNUwsRUFBQSxJQUNBaUIsRUFBQXJELEtBQUF2RSxNQUNBLE9BQUE0SCxFQUFBcEMsV0FDQSxJQUFBNDRCLEdBQUFDLEdBQUF6MkIsSUFBQSxLQUFBN0MsUUFBQXdOLElBQUEsRUFDQSxTQUlBLFlBT0EsSUFBQWl0QixHQUFBLE1BRUE5NEIsRUFBQUcsR0FBQXlCLE9BQUEsQ0FDQS9FLElBQUEsU0FBQXRDLEdBQ0EsSUFBQXNrQixFQUFBaGUsRUFBQTBwQixFQUNBcnBCLEVBQUFyRCxLQUFBLEdBRUEsT0FBQWIsVUFBQUMsUUEwQkFzdEIsRUFBQTNyQixFQUFBckUsR0FFQXNELEtBQUFtRCxLQUFBLFNBQUExSCxHQUNBLElBQUF1RCxFQUVBLElBQUFnQixLQUFBaUIsV0FXQSxPQU5BakMsRUFEQTB0QixFQUNBaHdCLEVBQUFkLEtBQUFvRSxLQUFBdkUsRUFBQTBHLEVBQUFuQyxNQUFBaEIsT0FFQXRDLEdBS0FzQyxFQUFBLEdBRUksaUJBQUFBLEVBQ0pBLEdBQUEsR0FFSXNGLE1BQUFDLFFBQUF2RixLQUNKQSxFQUFBbUQsRUFBQWpFLElBQUFjLEVBQUEsU0FBQXRDLEdBQ0EsYUFBQUEsRUFBQSxHQUFBQSxFQUFBLE9BSUFza0IsRUFBQTdlLEVBQUErNEIsU0FBQWw3QixLQUFBb0IsT0FBQWUsRUFBQSs0QixTQUFBbDdCLEtBQUEyTCxTQUFBM0YsaUJBR0EsUUFBQWdiLFFBQUF4YyxJQUFBd2MsRUFBQWpCLElBQUEvZixLQUFBaEIsRUFBQSxXQUNBZ0IsS0FBQXRELE1BQUFzQyxPQXpEQXFFLEdBQ0EyZCxFQUFBN2UsRUFBQSs0QixTQUFBNzNCLEVBQUFqQyxPQUNBZSxFQUFBKzRCLFNBQUE3M0IsRUFBQXNJLFNBQUEzRixpQkFHQSxRQUFBZ2IsUUFDQXhjLEtBQUF4QixFQUFBZ2UsRUFBQTFrQixJQUFBK0csRUFBQSxVQUVBTCxFQU1BLGlCQUhBQSxFQUFBSyxFQUFBM0csT0FJQXNHLEVBQUE0QixRQUFBcTJCLEdBQUEsSUFJQSxNQUFBajRCLEVBQUEsR0FBQUEsT0FHQSxLQXlDQWIsRUFBQTRCLE9BQUEsQ0FDQW0zQixTQUFBLENBQ0EzWCxPQUFBLENBQ0FqbkIsSUFBQSxTQUFBK0csR0FFQSxJQUFBckUsRUFBQW1ELEVBQUFtTSxLQUFBdUIsS0FBQXhNLEVBQUEsU0FDQSxhQUFBckUsRUFDQUEsRUFNQTY2QixHQUFBMTNCLEVBQUFOLEtBQUF3QixNQUdBa0QsT0FBQSxDQUNBakssSUFBQSxTQUFBK0csR0FDQSxJQUFBM0csRUFBQTZtQixFQUFBOW5CLEVBQ0F1SSxFQUFBWCxFQUFBVyxRQUNBbVYsRUFBQTlWLEVBQUFzUSxjQUNBa1MsRUFBQSxlQUFBeGlCLEVBQUFqQyxLQUNBNGhCLEVBQUE2QyxFQUFBLFFBQ0EwTCxFQUFBMUwsRUFBQTFNLEVBQUEsRUFBQW5WLEVBQUE1RSxPQVVBLElBUEEzRCxFQURBMGQsRUFBQSxFQUNBb1ksRUFHQTFMLEVBQUExTSxFQUFBLEVBSVcxZCxFQUFBODFCLEVBQVM5MUIsSUFLcEIsS0FKQThuQixFQUFBdmYsRUFBQXZJLElBSUFpWSxVQUFBalksSUFBQTBkLEtBR0FvSyxFQUFBaFosWUFDQWdaLEVBQUF2aEIsV0FBQXVJLFdBQ0FvQixFQUFBNFgsRUFBQXZoQixXQUFBLGNBTUEsR0FIQXRGLEVBQUF5RixFQUFBb2hCLEdBQUF2a0IsTUFHQTZtQixFQUNBLE9BQUFucEIsRUFJQXNtQixFQUFBemlCLEtBQUE3RCxHQUlBLE9BQUFzbUIsR0FHQWpELElBQUEsU0FBQTFjLEVBQUEzRyxHQU1BLElBTEEsSUFBQXkrQixFQUFBNVgsRUFDQXZmLEVBQUFYLEVBQUFXLFFBQ0FnZixFQUFBN2dCLEVBQUFrRCxVQUFBM0ksR0FDQWpCLEVBQUF1SSxFQUFBNUUsT0FFQTNELE9BQ0E4bkIsRUFBQXZmLEVBQUF2SSxJQUlBaVksU0FDQXZSLEVBQUFvRCxRQUFBcEQsRUFBQSs0QixTQUFBM1gsT0FBQWpuQixJQUFBaW5CLEdBQUFQLElBQUEsS0FFQW1ZLEdBQUEsR0FVQSxPQUhBQSxJQUNBOTNCLEVBQUFzUSxlQUFBLEdBRUFxUCxPQU9BN2dCLEVBQUFnQixLQUFBLGdDQUNBaEIsRUFBQSs0QixTQUFBbDdCLE1BQUEsQ0FDQStmLElBQUEsU0FBQTFjLEVBQUEzRyxHQUNBLEdBQUE0SCxNQUFBQyxRQUFBN0gsR0FDQSxPQUFBMkcsRUFBQW9RLFFBQUF0UixFQUFBb0QsUUFBQXBELEVBQUFrQixHQUFBckUsTUFBQXRDLElBQUEsSUFJQW9FLEVBQUFvNEIsVUFDQS8yQixFQUFBKzRCLFNBQUFsN0IsTUFBQTFELElBQUEsU0FBQStHLEdBQ0EsY0FBQUEsRUFBQXVJLGFBQUEsY0FBQXZJLEVBQUEzRyxVQVdBb0UsRUFBQXM2QixRQUFBLGNBQUFyN0IsRUFHQSxJQUFBczdCLEdBQUEsa0NBQ0FDLEdBQUEsU0FBQTN3QixHQUNBQSxFQUFBb2QsbUJBR0E1bEIsRUFBQTRCLE9BQUE1QixFQUFBNGpCLE1BQUEsQ0FFQTJDLFFBQUEsU0FBQTNDLEVBQUEvRixFQUFBM2MsRUFBQWs0QixHQUVBLElBQUE5L0IsRUFBQXFSLEVBQUEyQixFQUFBK3NCLEVBQUFDLEVBQUFoVixFQUFBMUosRUFBQTJlLEVBQ0FDLEVBQUEsQ0FBQXQ0QixHQUFBekQsR0FDQXdCLEVBQUFULEVBQUEvRSxLQUFBbXFCLEVBQUEsUUFBQUEsRUFBQTNrQixLQUFBMmtCLEVBQ0FPLEVBQUEzbEIsRUFBQS9FLEtBQUFtcUIsRUFBQSxhQUFBQSxFQUFBZSxVQUFBem9CLE1BQUEsUUFLQSxHQUhBeU8sRUFBQTR1QixFQUFBanRCLEVBQUFwTCxLQUFBekQsRUFHQSxJQUFBeUQsRUFBQXBDLFVBQUEsSUFBQW9DLEVBQUFwQyxXQUtBbzZCLEdBQUEzdkIsS0FBQXRLLEVBQUFlLEVBQUE0akIsTUFBQVcsYUFJQXRsQixFQUFBWixRQUFBLFVBR0E4bEIsRUFBQWxsQixFQUFBL0MsTUFBQSxLQUNBK0MsRUFBQWtsQixFQUFBamEsUUFDQWlhLEVBQUF6aUIsUUFFQTQzQixFQUFBcjZCLEVBQUFaLFFBQUEsYUFBQVksR0FHQTJrQixJQUFBNWpCLEVBQUFzQyxTQUNBc2hCLEVBQ0EsSUFBQTVqQixFQUFBa21CLE1BQUFqbkIsRUFBQSxpQkFBQTJrQixPQUdBNlYsVUFBQUwsRUFBQSxJQUNBeFYsRUFBQWUsVUFBQVIsRUFBQW5vQixLQUFBLEtBQ0E0bkIsRUFBQThCLFdBQUE5QixFQUFBZSxVQUNBLElBQUF6ZSxPQUFBLFVBQUFpZSxFQUFBbm9CLEtBQUEsNEJBQ0EsS0FHQTRuQixFQUFBelUsWUFBQTlNLEVBQ0F1aEIsRUFBQXBuQixTQUNBb25CLEVBQUFwbkIsT0FBQTBFLEdBSUEyYyxFQUFBLE1BQUFBLEVBQ0EsQ0FBQStGLEdBQ0E1akIsRUFBQWtELFVBQUEyYSxFQUFBLENBQUErRixJQUdBaEosRUFBQTVhLEVBQUE0akIsTUFBQWhKLFFBQUEzYixJQUFBLEdBQ0FtNkIsSUFBQXhlLEVBQUEyTCxVQUFBLElBQUEzTCxFQUFBMkwsUUFBQXBsQixNQUFBRCxFQUFBMmMsSUFBQSxDQU1BLElBQUF1YixJQUFBeGUsRUFBQTBMLFdBQUF2bkIsRUFBQW1DLEdBQUEsQ0FNQSxJQUpBbTRCLEVBQUF6ZSxFQUFBNkosY0FBQXhsQixFQUNBaTZCLEdBQUEzdkIsS0FBQTh2QixFQUFBcDZCLEtBQ0EwTCxJQUFBOUssWUFFVThLLEVBQUtBLElBQUE5SyxXQUNmMjVCLEVBQUFwN0IsS0FBQXVNLEdBQ0EyQixFQUFBM0IsRUFJQTJCLEtBQUFwTCxFQUFBOEgsZUFBQXZMLElBQ0ErN0IsRUFBQXA3QixLQUFBa08sRUFBQWIsYUFBQWEsRUFBQW90QixjQUFBOTdCLEdBTUEsSUFEQXRFLEVBQUEsR0FDQXFSLEVBQUE2dUIsRUFBQWxnQyxRQUFBc3FCLEVBQUEyQix3QkFDQWdVLEVBQUE1dUIsRUFDQWlaLEVBQUEza0IsS0FBQTNGLEVBQUEsRUFDQSsvQixFQUNBemUsRUFBQThKLFVBQUF6bEIsR0FHQXFsQixHQUFBdEcsRUFBQTdqQixJQUFBd1EsRUFBQSxlQUFpRGlaLEVBQUEza0IsT0FDakQrZSxFQUFBN2pCLElBQUF3USxFQUFBLFlBRUEyWixFQUFBbmpCLE1BQUF3SixFQUFBa1QsSUFJQXlHLEVBQUFnVixHQUFBM3VCLEVBQUEydUIsS0FDQWhWLEVBQUFuakIsT0FBQW9jLEVBQUE1UyxLQUNBaVosRUFBQXpVLE9BQUFtVixFQUFBbmpCLE1BQUF3SixFQUFBa1QsSUFDQSxJQUFBK0YsRUFBQXpVLFFBQ0F5VSxFQUFBK0Isa0JBOENBLE9BMUNBL0IsRUFBQTNrQixPQUdBbTZCLEdBQUF4VixFQUFBaUQsc0JBRUFqTSxFQUFBNkcsV0FDQSxJQUFBN0csRUFBQTZHLFNBQUF0Z0IsTUFBQXE0QixFQUFBL3pCLE1BQUFvWSxLQUNBTixFQUFBcmMsSUFJQW80QixHQUFBMTZCLEVBQUFzQyxFQUFBakMsTUFBQUYsRUFBQW1DLE1BR0FvTCxFQUFBcEwsRUFBQW80QixNQUdBcDRCLEVBQUFvNEIsR0FBQSxNQUlBdDVCLEVBQUE0akIsTUFBQVcsVUFBQXRsQixFQUVBMmtCLEVBQUEyQix3QkFDQWdVLEVBQUE1dEIsaUJBQUExTSxFQUFBazZCLElBR0FqNEIsRUFBQWpDLEtBRUEya0IsRUFBQTJCLHdCQUNBZ1UsRUFBQWpkLG9CQUFBcmQsRUFBQWs2QixJQUdBbjVCLEVBQUE0akIsTUFBQVcsZUFBQWxpQixFQUVBaUssSUFDQXBMLEVBQUFvNEIsR0FBQWh0QixJQU1Bc1gsRUFBQXpVLFNBS0F3cUIsU0FBQSxTQUFBMTZCLEVBQUFpQyxFQUFBMGlCLEdBQ0EsSUFBQXBiLEVBQUF4SSxFQUFBNEIsT0FDQSxJQUFBNUIsRUFBQWttQixNQUNBdEMsRUFDQSxDQUNBM2tCLE9BQ0Fpb0IsYUFBQSxJQUlBbG5CLEVBQUE0akIsTUFBQTJDLFFBQUEvZCxFQUFBLEtBQUF0SCxNQUtBbEIsRUFBQUcsR0FBQXlCLE9BQUEsQ0FFQTJrQixRQUFBLFNBQUF0bkIsRUFBQTRlLEdBQ0EsT0FBQWhnQixLQUFBbUQsS0FBQSxXQUNBaEIsRUFBQTRqQixNQUFBMkMsUUFBQXRuQixFQUFBNGUsRUFBQWhnQixTQUdBKzdCLGVBQUEsU0FBQTM2QixFQUFBNGUsR0FDQSxJQUFBM2MsRUFBQXJELEtBQUEsR0FDQSxHQUFBcUQsRUFDQSxPQUFBbEIsRUFBQTRqQixNQUFBMkMsUUFBQXRuQixFQUFBNGUsRUFBQTNjLEdBQUEsTUFjQXZDLEVBQUFzNkIsU0FDQWo1QixFQUFBZ0IsS0FBQSxDQUFlZ1EsTUFBQSxVQUFBd1YsS0FBQSxZQUFxQyxTQUFBNEMsRUFBQWhFLEdBR3BELElBQUE1YSxFQUFBLFNBQUFvWixHQUNBNWpCLEVBQUE0akIsTUFBQStWLFNBQUF2VSxFQUFBeEIsRUFBQXBuQixPQUFBd0QsRUFBQTRqQixNQUFBd0IsSUFBQXhCLEtBR0E1akIsRUFBQTRqQixNQUFBaEosUUFBQXdLLEdBQUEsQ0FDQVAsTUFBQSxXQUNBLElBQUF2bEIsRUFBQXpCLEtBQUFtTCxlQUFBbkwsS0FDQWc4QixFQUFBN2IsRUFBQXJCLE9BQUFyZCxFQUFBOGxCLEdBRUF5VSxHQUNBdjZCLEVBQUFxTSxpQkFBQXlkLEVBQUE1ZSxHQUFBLEdBRUF3VCxFQUFBckIsT0FBQXJkLEVBQUE4bEIsR0FBQXlVLEdBQUEsT0FFQTdVLFNBQUEsV0FDQSxJQUFBMWxCLEVBQUF6QixLQUFBbUwsZUFBQW5MLEtBQ0FnOEIsRUFBQTdiLEVBQUFyQixPQUFBcmQsRUFBQThsQixHQUFBLEVBRUF5VSxFQUtBN2IsRUFBQXJCLE9BQUFyZCxFQUFBOGxCLEVBQUF5VSxJQUpBdjZCLEVBQUFnZCxvQkFBQThNLEVBQUE1ZSxHQUFBLEdBQ0F3VCxFQUFBM0UsT0FBQS9aLEVBQUE4bEIsUUFTQSxJQUFBdFUsR0FBQWxULEVBQUFrVCxTQUVBZ3BCLEdBQUFoMUIsS0FBQW1pQixNQUVBOFMsR0FBQSxLQUtBLzVCLEVBQUFnNkIsU0FBQSxTQUFBbmMsR0FDQSxJQUFBck8sRUFDQSxJQUFBcU8sR0FBQSxpQkFBQUEsRUFDQSxZQUtBLElBQ0FyTyxHQUFBLElBQUE1UixFQUFBcThCLFdBQUFDLGdCQUFBcmMsRUFBQSxZQUNFLE1BQUFyVixHQUNGZ0gsT0FBQW5OLEVBTUEsT0FIQW1OLE1BQUFwRyxxQkFBQSxlQUFBbk0sUUFDQStDLEVBQUEzQyxNQUFBLGdCQUFBd2dCLEdBRUFyTyxHQUlBLElBQ0EycUIsR0FBQSxRQUNBQyxHQUFBLFNBQ0FDLEdBQUEsd0NBQ0FDLEdBQUEscUNBRUEsU0FBQUMsR0FBQTlJLEVBQUE1eUIsRUFBQTI3QixFQUFBdGpCLEdBQ0EsSUFBQXJkLEVBRUEsR0FBQXNJLE1BQUFDLFFBQUF2RCxHQUdBbUIsRUFBQWdCLEtBQUFuQyxFQUFBLFNBQUF2RixFQUFBd2UsR0FDQTBpQixHQUFBTCxHQUFBNXdCLEtBQUFrb0IsR0FHQXZhLEVBQUF1YSxFQUFBM1osR0FLQXlpQixHQUNBOUksRUFBQSxzQkFBQTNaLEdBQUEsTUFBQUEsRUFBQXhlLEVBQUEsUUFDQXdlLEVBQ0EwaUIsRUFDQXRqQixVQUtFLEdBQUFzakIsR0FBQSxXQUFBejZCLEVBQUFsQixHQVVGcVksRUFBQXVhLEVBQUE1eUIsUUFQQSxJQUFBaEYsS0FBQWdGLEVBQ0EwN0IsR0FBQTlJLEVBQUEsSUFBQTUzQixFQUFBLElBQUFnRixFQUFBaEYsR0FBQTJnQyxFQUFBdGpCLEdBWUFsWCxFQUFBeTZCLE1BQUEsU0FBQWwxQixFQUFBaTFCLEdBQ0EsSUFBQS9JLEVBQ0FwMkIsRUFBQSxHQUNBNmIsRUFBQSxTQUFBcmMsRUFBQTYvQixHQUdBLElBQUFuZ0MsRUFBQXFFLEVBQUE4N0IsR0FDQUEsSUFDQUEsRUFFQXIvQixJQUFBNEIsUUFBQTA5QixtQkFBQTkvQixHQUFBLElBQ0E4L0IsbUJBQUEsTUFBQXBnQyxFQUFBLEdBQUFBLElBSUEsR0FBQTRILE1BQUFDLFFBQUFtRCxNQUFBaEYsU0FBQVAsRUFBQWtDLGNBQUFxRCxHQUdBdkYsRUFBQWdCLEtBQUF1RSxFQUFBLFdBQ0EyUixFQUFBclosS0FBQWhFLEtBQUFnRSxLQUFBdEQsY0FPQSxJQUFBazNCLEtBQUFsc0IsRUFDQWcxQixHQUFBOUksRUFBQWxzQixFQUFBa3NCLEdBQUErSSxFQUFBdGpCLEdBS0EsT0FBQTdiLEVBQUFXLEtBQUEsTUFHQWdFLEVBQUFHLEdBQUF5QixPQUFBLENBQ0FnNUIsVUFBQSxXQUNBLE9BQUE1NkIsRUFBQXk2QixNQUFBNThCLEtBQUFnOUIsbUJBRUFBLGVBQUEsV0FDQSxPQUFBaDlCLEtBQUE5QixJQUFBLFdBR0EsSUFBQTBSLEVBQUF6TixFQUFBOGQsS0FBQWpnQixLQUFBLFlBQ0EsT0FBQTRQLEVBQUF6TixFQUFBa0QsVUFBQXVLLEdBQUE1UCxPQUVBb08sT0FBQSxXQUNBLElBQUFoTixFQUFBcEIsS0FBQW9CLEtBR0EsT0FBQXBCLEtBQUFoRSxPQUFBbUcsRUFBQW5DLE1BQUFpWSxHQUFBLGNBQ0F3a0IsR0FBQS93QixLQUFBMUwsS0FBQTJMLFlBQUE2d0IsR0FBQTl3QixLQUFBdEssS0FDQXBCLEtBQUF5VCxVQUFBMFAsR0FBQXpYLEtBQUF0SyxNQUVBbEQsSUFBQSxTQUFBekMsRUFBQTRILEdBQ0EsSUFBQXJFLEVBQUFtRCxFQUFBbkMsTUFBQWhCLE1BRUEsYUFBQUEsRUFDQSxLQUdBc0YsTUFBQUMsUUFBQXZGLEdBQ0FtRCxFQUFBakUsSUFBQWMsRUFBQSxTQUFBQSxHQUNBLE9BQWFoRCxLQUFBcUgsRUFBQXJILEtBQUFVLE1BQUFzQyxFQUFBNEYsUUFBQTIzQixHQUFBLFdBSWIsQ0FBV3ZnQyxLQUFBcUgsRUFBQXJILEtBQUFVLE1BQUFzQyxFQUFBNEYsUUFBQTIzQixHQUFBLFdBQ1JqZ0MsU0FLSCxJQUNBMmdDLEdBQUEsT0FDQUMsR0FBQSxPQUNBQyxHQUFBLGdCQUNBQyxHQUFBLDZCQUlBQyxHQUFBLGlCQUNBQyxHQUFBLFFBV0FwSCxHQUFBLEdBT0FxSCxHQUFBLEdBR0FDLEdBQUEsS0FBQWw5QixPQUFBLEtBR0FtOUIsR0FBQTc5QixFQUFBZ0MsY0FBQSxLQUlBLFNBQUE4N0IsR0FBQUMsR0FHQSxnQkFBQUMsRUFBQS9oQixHQUVBLGlCQUFBK2hCLElBQ0EvaEIsRUFBQStoQixFQUNBQSxFQUFBLEtBR0EsSUFBQUMsRUFDQXBpQyxFQUFBLEVBQ0FxaUMsRUFBQUYsRUFBQTUzQixjQUFBK0UsTUFBQWdQLElBQUEsR0FFQSxHQUFBaFosRUFBQThhLEdBR0EsS0FBQWdpQixFQUFBQyxFQUFBcmlDLE1BR0EsTUFBQW9pQyxFQUFBLElBQ0FBLElBQUF4OUIsTUFBQSxTQUNBczlCLEVBQUFFLEdBQUFGLEVBQUFFLElBQUEsSUFBQW51QixRQUFBbU0sS0FJQThoQixFQUFBRSxHQUFBRixFQUFBRSxJQUFBLElBQUF0OUIsS0FBQXNiLElBUUEsU0FBQWtpQixHQUFBSixFQUFBMzVCLEVBQUF5eUIsRUFBQXVILEdBRUEsSUFBQUMsRUFBQSxHQUNBQyxFQUFBUCxJQUFBSixHQUVBLFNBQUFZLEVBQUFOLEdBQ0EsSUFBQW5xQixFQWNBLE9BYkF1cUIsRUFBQUosSUFBQSxFQUNBMTdCLEVBQUFnQixLQUFBdzZCLEVBQUFFLElBQUEsWUFBQWwwQixFQUFBeTBCLEdBQ0EsSUFBQUMsRUFBQUQsRUFBQXA2QixFQUFBeXlCLEVBQUF1SCxHQUNBLHVCQUFBSyxHQUNBSCxHQUFBRCxFQUFBSSxHQUtJSCxJQUNKeHFCLEVBQUEycUIsUUFESSxHQUhKcjZCLEVBQUE4NUIsVUFBQXB1QixRQUFBMnVCLEdBQ0FGLEVBQUFFLElBQ0EsS0FLQTNxQixFQUdBLE9BQUF5cUIsRUFBQW42QixFQUFBODVCLFVBQUEsTUFBQUcsRUFBQSxNQUFBRSxFQUFBLEtBTUEsU0FBQUcsR0FBQTMvQixFQUFBMEMsR0FDQSxJQUFBckUsRUFBQW9ILEVBQ0FtNkIsRUFBQXA4QixFQUFBcThCLGFBQUFELGFBQUEsR0FFQSxJQUFBdmhDLEtBQUFxRSxPQUNBbUQsSUFBQW5ELEVBQUFyRSxNQUNBdWhDLEVBQUF2aEMsR0FBQTJCLEVBQUF5RixNQUFBLEtBQXdEcEgsR0FBQXFFLEVBQUFyRSxJQU94RCxPQUpBb0gsR0FDQWpDLEVBQUE0QixRQUFBLEVBQUFwRixFQUFBeUYsR0FHQXpGLEVBL0VBOCtCLEdBQUFucUIsS0FBQUwsR0FBQUssS0FnUEFuUixFQUFBNEIsT0FBQSxDQUdBMDZCLE9BQUEsRUFHQUMsYUFBQSxHQUNBQyxLQUFBLEdBRUFILGFBQUEsQ0FDQUksSUFBQTNyQixHQUFBSyxLQUNBbFMsS0FBQSxNQUNBeTlCLFFBdlJBLDREQXVSQW56QixLQUFBdUgsR0FBQTZyQixVQUNBcC9CLFFBQUEsRUFDQXEvQixhQUFBLEVBQ0FDLE9BQUEsRUFDQUMsWUFBQSxtREFjQUMsUUFBQSxDQUNBbkksSUFBQXlHLEdBQ0EzN0IsS0FBQSxhQUNBOHFCLEtBQUEsWUFDQWhiLElBQUEsNEJBQ0F3dEIsS0FBQSxxQ0FHQXJtQixTQUFBLENBQ0FuSCxJQUFBLFVBQ0FnYixLQUFBLFNBQ0F3UyxLQUFBLFlBR0FDLGVBQUEsQ0FDQXp0QixJQUFBLGNBQ0E5UCxLQUFBLGVBQ0FzOUIsS0FBQSxnQkFLQUUsV0FBQSxDQUdBQyxTQUFBeGhDLE9BR0F5aEMsYUFBQSxFQUdBQyxZQUFBaGYsS0FBQUMsTUFHQWdmLFdBQUF0OUIsRUFBQWc2QixVQU9Bb0MsWUFBQSxDQUNBSyxLQUFBLEVBQ0F2OEIsU0FBQSxJQU9BcTlCLFVBQUEsU0FBQS9nQyxFQUFBZ2hDLEdBQ0EsT0FBQUEsRUFHQXJCLE1BQUEzL0IsRUFBQXdELEVBQUFxOEIsY0FBQW1CLEdBR0FyQixHQUFBbjhCLEVBQUFxOEIsYUFBQTcvQixJQUdBaWhDLGNBQUFsQyxHQUFBeEgsSUFDQTJKLGNBQUFuQyxHQUFBSCxJQUdBdUMsS0FBQSxTQUFBbEIsRUFBQTU2QixHQUdBLGlCQUFBNDZCLElBQ0E1NkIsRUFBQTQ2QixFQUNBQSxPQUFBcDZCLEdBSUFSLEtBQUEsR0FFQSxJQUFBKzdCLEVBR0FDLEVBR0FDLEVBQ0FDLEVBR0FDLEVBR0FDLEVBR0E1aEIsRUFHQTZoQixFQUdBNWtDLEVBR0E2a0MsRUFHQTlpQyxFQUFBMkUsRUFBQXU5QixVQUFBLEdBQTJCMTdCLEdBRzNCdThCLEVBQUEvaUMsRUFBQTZFLFNBQUE3RSxFQUdBZ2pDLEVBQUFoakMsRUFBQTZFLFVBQ0FrK0IsRUFBQXQvQixVQUFBcy9CLEVBQUE3OUIsUUFDQVAsRUFBQW8rQixHQUNBcCtCLEVBQUE0akIsTUFHQTlKLEVBQUE5WixFQUFBeVosV0FDQTZrQixFQUFBdCtCLEVBQUF5WSxVQUFBLGVBR0E4bEIsRUFBQWxqQyxFQUFBa2pDLFlBQUEsR0FHQUMsRUFBQSxHQUNBQyxFQUFBLEdBR0FDLEVBQUEsV0FHQTdDLEVBQUEsQ0FDQXBmLFdBQUEsRUFHQWtpQixrQkFBQSxTQUFBOWpDLEdBQ0EsSUFBQStOLEVBQ0EsR0FBQXlULEVBQUEsQ0FDQSxJQUFBMGhCLEVBRUEsSUFEQUEsRUFBQSxHQUNBbjFCLEVBQUFxeUIsR0FBQWh5QixLQUFBNjBCLElBQ0FDLEVBQUFuMUIsRUFBQSxHQUFBL0UsZUFBQStFLEVBQUEsR0FHQUEsRUFBQW0xQixFQUFBbGpDLEVBQUFnSixlQUVBLGFBQUErRSxFQUFBLEtBQUFBLEdBSUFnMkIsc0JBQUEsV0FDQSxPQUFBdmlCLEVBQUF5aEIsRUFBQSxNQUlBZSxpQkFBQSxTQUFBaGxDLEVBQUFVLEdBTUEsT0FMQSxNQUFBOGhCLElBQ0F4aUIsRUFBQTRrQyxFQUFBNWtDLEVBQUFnSyxlQUNBNDZCLEVBQUE1a0MsRUFBQWdLLGdCQUFBaEssRUFDQTJrQyxFQUFBM2tDLEdBQUFVLEdBRUFzRCxNQUlBaWhDLGlCQUFBLFNBQUE3L0IsR0FJQSxPQUhBLE1BQUFvZCxJQUNBaGhCLEVBQUEwakMsU0FBQTkvQixHQUVBcEIsTUFJQTBnQyxXQUFBLFNBQUF4aUMsR0FDQSxJQUFBc0QsRUFDQSxHQUFBdEQsRUFDQSxHQUFBc2dCLEVBR0F3ZixFQUFBaGlCLE9BQUE5ZCxFQUFBOC9CLEVBQUFtRCxjQUlBLElBQUEzL0IsS0FBQXRELEVBQ0F3aUMsRUFBQWwvQixHQUFBLENBQUFrL0IsRUFBQWwvQixHQUFBdEQsRUFBQXNELElBSUEsT0FBQXhCLE1BSUFvaEMsTUFBQSxTQUFBQyxHQUNBLElBQUFDLEVBQUFELEdBQUFSLEVBS0EsT0FKQWQsR0FDQUEsRUFBQXFCLE1BQUFFLEdBRUFsNkIsRUFBQSxFQUFBazZCLEdBQ0F0aEMsT0FvQkEsR0FmQWljLEVBQUF4QixRQUFBdWpCLEdBS0F4Z0MsRUFBQW9oQyxTQUFBcGhDLEVBQUFvaEMsS0FBQTNyQixHQUFBSyxNQUFBLElBQ0ExTyxRQUFBMDRCLEdBQUFycUIsR0FBQTZyQixTQUFBLE1BR0F0aEMsRUFBQTRELEtBQUE0QyxFQUFBd1csUUFBQXhXLEVBQUE1QyxNQUFBNUQsRUFBQWdkLFFBQUFoZCxFQUFBNEQsS0FHQTVELEVBQUFzZ0MsV0FBQXRnQyxFQUFBcWdDLFVBQUEsS0FBQTczQixjQUFBK0UsTUFBQWdQLElBQUEsS0FHQSxNQUFBdmMsRUFBQStqQyxZQUFBLENBQ0FuQixFQUFBeGdDLEVBQUFnQyxjQUFBLEtBS0EsSUFDQXcrQixFQUFBOXNCLEtBQUE5VixFQUFBb2hDLElBSUF3QixFQUFBOXNCLEtBQUE4c0IsRUFBQTlzQixLQUNBOVYsRUFBQStqQyxZQUFBOUQsR0FBQXFCLFNBQUEsS0FBQXJCLEdBQUErRCxNQUNBcEIsRUFBQXRCLFNBQUEsS0FBQXNCLEVBQUFvQixLQUNJLE1BQUE3MkIsR0FJSm5OLEVBQUErakMsYUFBQSxHQWFBLEdBUkEvakMsRUFBQXdpQixNQUFBeGlCLEVBQUF1aEMsYUFBQSxpQkFBQXZoQyxFQUFBd2lCLE9BQ0F4aUIsRUFBQXdpQixLQUFBN2QsRUFBQXk2QixNQUFBcC9CLEVBQUF3aUIsS0FBQXhpQixFQUFBbS9CLGNBSUFvQixHQUFBN0gsR0FBQTE0QixFQUFBd0csRUFBQWc2QixHQUdBeGYsRUFDQSxPQUFBd2YsRUE2RUEsSUFBQXZpQyxLQXhFQTRrQyxFQUFBbCtCLEVBQUE0akIsT0FBQXZvQixFQUFBa0MsU0FHQSxHQUFBeUMsRUFBQXM4QixVQUNBdDhCLEVBQUE0akIsTUFBQTJDLFFBQUEsYUFJQWxyQixFQUFBNEQsS0FBQTVELEVBQUE0RCxLQUFBbWUsY0FHQS9oQixFQUFBaWtDLFlBQUFwRSxHQUFBM3hCLEtBQUFsTyxFQUFBNEQsTUFLQTQrQixFQUFBeGlDLEVBQUFvaEMsSUFBQWg2QixRQUFBczRCLEdBQUEsSUFHQTEvQixFQUFBaWtDLFdBdUJHamtDLEVBQUF3aUIsTUFBQXhpQixFQUFBdWhDLGFBQ0gsS0FBQXZoQyxFQUFBeWhDLGFBQUEsSUFBQXorQixRQUFBLHVDQUNBaEQsRUFBQXdpQixLQUFBeGlCLEVBQUF3aUIsS0FBQXBiLFFBQUFxNEIsR0FBQSxPQXRCQXFELEVBQUE5aUMsRUFBQW9oQyxJQUFBditCLE1BQUEyL0IsRUFBQTVnQyxRQUdBNUIsRUFBQXdpQixPQUFBeGlCLEVBQUF1aEMsYUFBQSxpQkFBQXZoQyxFQUFBd2lCLFFBQ0FnZ0IsSUFBQTlELEdBQUF4d0IsS0FBQXMwQixHQUFBLFNBQUF4aUMsRUFBQXdpQixZQUdBeGlCLEVBQUF3aUIsT0FJQSxJQUFBeGlCLEVBQUEyTyxRQUNBNnpCLElBQUFwN0IsUUFBQXU0QixHQUFBLE1BQ0FtRCxHQUFBcEUsR0FBQXh3QixLQUFBczBCLEdBQUEsY0FBQS9ELEtBQUFxRSxHQUlBOWlDLEVBQUFvaEMsSUFBQW9CLEVBQUFNLEdBU0E5aUMsRUFBQWtrQyxhQUNBdi9CLEVBQUF1OEIsYUFBQXNCLElBQ0FoQyxFQUFBZ0QsaUJBQUEsb0JBQUE3K0IsRUFBQXU4QixhQUFBc0IsSUFFQTc5QixFQUFBdzhCLEtBQUFxQixJQUNBaEMsRUFBQWdELGlCQUFBLGdCQUFBNytCLEVBQUF3OEIsS0FBQXFCLE1BS0F4aUMsRUFBQXdpQixNQUFBeGlCLEVBQUFpa0MsYUFBQSxJQUFBamtDLEVBQUF5aEMsYUFBQWo3QixFQUFBaTdCLGNBQ0FqQixFQUFBZ0QsaUJBQUEsZUFBQXhqQyxFQUFBeWhDLGFBSUFqQixFQUFBZ0QsaUJBQ0EsU0FDQXhqQyxFQUFBc2dDLFVBQUEsSUFBQXRnQyxFQUFBMGhDLFFBQUExaEMsRUFBQXNnQyxVQUFBLElBQ0F0Z0MsRUFBQTBoQyxRQUFBMWhDLEVBQUFzZ0MsVUFBQSxLQUNBLE1BQUF0Z0MsRUFBQXNnQyxVQUFBLFFBQUFOLEdBQUEsV0FBc0QsSUFDdERoZ0MsRUFBQTBoQyxRQUFBLE1BSUExaEMsRUFBQW1rQyxRQUNBM0QsRUFBQWdELGlCQUFBdmxDLEVBQUErQixFQUFBbWtDLFFBQUFsbUMsSUFJQSxHQUFBK0IsRUFBQW9rQyxjQUNBLElBQUFwa0MsRUFBQW9rQyxXQUFBaG1DLEtBQUEya0MsRUFBQXZDLEVBQUF4Z0MsSUFBQWdoQixHQUdBLE9BQUF3ZixFQUFBb0QsUUFlQSxHQVhBUCxFQUFBLFFBR0FKLEVBQUFwbkIsSUFBQTdiLEVBQUFvNUIsVUFDQW9ILEVBQUE1MkIsS0FBQTVKLEVBQUFxa0MsU0FDQTdELEVBQUF0akIsS0FBQWxkLEVBQUFnQyxPQUdBdWdDLEVBQUFoQyxHQUFBUixHQUFBLy9CLEVBQUF3RyxFQUFBZzZCLEdBS0csQ0FTSCxHQVJBQSxFQUFBcGYsV0FBQSxFQUdBeWhCLEdBQ0FHLEVBQUE5WCxRQUFBLFlBQUFzVixFQUFBeGdDLElBSUFnaEIsRUFDQSxPQUFBd2YsRUFJQXhnQyxFQUFBd2hDLE9BQUF4aEMsRUFBQXc3QixRQUFBLElBQ0FtSCxFQUFBcGdDLEVBQUEwZCxXQUFBLFdBQ0F1Z0IsRUFBQW9ELE1BQUEsWUFDSzVqQyxFQUFBdzdCLFVBR0wsSUFDQXhhLEdBQUEsRUFDQXVoQixFQUFBK0IsS0FBQW5CLEVBQUF2NUIsR0FDSSxNQUFBdUQsR0FHSixHQUFBNlQsRUFDQSxNQUFBN1QsRUFJQXZELEdBQUEsRUFBQXVELFNBaENBdkQsR0FBQSxrQkFxQ0EsU0FBQUEsRUFBQSs1QixFQUFBWSxFQUFBQyxFQUFBTCxHQUNBLElBQUFNLEVBQUFKLEVBQUFyaUMsRUFBQTBpQyxFQUFBQyxFQUNBZCxFQUFBVSxFQUdBdmpCLElBSUFBLEdBQUEsRUFHQTJoQixHQUNBcGdDLEVBQUFrNUIsYUFBQWtILEdBS0FKLE9BQUF2N0IsRUFHQXk3QixFQUFBMEIsR0FBQSxHQUdBM0QsRUFBQXBmLFdBQUF1aUIsRUFBQSxNQUdBYyxFQUFBZCxHQUFBLEtBQUFBLEVBQUEsV0FBQUEsRUFHQWEsSUFDQUUsRUExbEJBLFNBQUExa0MsRUFBQXdnQyxFQUFBZ0UsR0FPQSxJQUxBLElBQUFJLEVBQUFoaEMsRUFBQWloQyxFQUFBQyxFQUNBeHBCLEVBQUF0YixFQUFBc2IsU0FDQWdsQixFQUFBdGdDLEVBQUFzZ0MsVUFHQSxNQUFBQSxFQUFBLElBQ0FBLEVBQUF6eEIsYUFDQTdILElBQUE0OUIsSUFDQUEsRUFBQTVrQyxFQUFBMGpDLFVBQUFsRCxFQUFBOEMsa0JBQUEsaUJBS0EsR0FBQXNCLEVBQ0EsSUFBQWhoQyxLQUFBMFgsRUFDQSxHQUFBQSxFQUFBMVgsSUFBQTBYLEVBQUExWCxHQUFBc0ssS0FBQTAyQixHQUFBLENBQ0F0RSxFQUFBcHVCLFFBQUF0TyxHQUNBLE1BTUEsR0FBQTA4QixFQUFBLEtBQUFrRSxFQUNBSyxFQUFBdkUsRUFBQSxPQUNFLENBR0YsSUFBQTE4QixLQUFBNGdDLEVBQUEsQ0FDQSxJQUFBbEUsRUFBQSxJQUFBdGdDLEVBQUE2aEMsV0FBQWorQixFQUFBLElBQUEwOEIsRUFBQSxLQUNBdUUsRUFBQWpoQyxFQUNBLE1BRUFraEMsSUFDQUEsRUFBQWxoQyxHQUtBaWhDLEtBQUFDLEVBTUEsR0FBQUQsRUFJQSxPQUhBQSxJQUFBdkUsRUFBQSxJQUNBQSxFQUFBcHVCLFFBQUEyeUIsR0FFQUwsRUFBQUssR0F1aUJBRSxDQUFBL2tDLEVBQUF3Z0MsRUFBQWdFLElBSUFFLEVBcGlCQSxTQUFBMWtDLEVBQUEwa0MsRUFBQWxFLEVBQUFpRSxHQUNBLElBQUFPLEVBQUFDLEVBQUFDLEVBQUFqMEIsRUFBQXNLLEVBQ0FzbUIsRUFBQSxHQUdBdkIsRUFBQXRnQyxFQUFBc2dDLFVBQUF6OUIsUUFHQSxHQUFBeTlCLEVBQUEsR0FDQSxJQUFBNEUsS0FBQWxsQyxFQUFBNmhDLFdBQ0FBLEVBQUFxRCxFQUFBMThCLGVBQUF4SSxFQUFBNmhDLFdBQUFxRCxHQU9BLElBSEFELEVBQUEzRSxFQUFBenhCLFFBR0FvMkIsR0FjQSxHQVpBamxDLEVBQUE0aEMsZUFBQXFELEtBQ0F6RSxFQUFBeGdDLEVBQUE0aEMsZUFBQXFELElBQUFQLElBSUFucEIsR0FBQWtwQixHQUFBemtDLEVBQUFtbEMsYUFDQVQsRUFBQTFrQyxFQUFBbWxDLFdBQUFULEVBQUExa0MsRUFBQXFnQyxXQUdBOWtCLEVBQUEwcEIsRUFDQUEsRUFBQTNFLEVBQUF6eEIsUUFLQSxTQUFBbzJCLEVBRUFBLEVBQUExcEIsT0FHSSxTQUFBQSxPQUFBMHBCLEVBQUEsQ0FNSixLQUhBQyxFQUFBckQsRUFBQXRtQixFQUFBLElBQUEwcEIsSUFBQXBELEVBQUEsS0FBQW9ELElBSUEsSUFBQUQsS0FBQW5ELEVBSUEsSUFEQTV3QixFQUFBK3pCLEVBQUFua0MsTUFBQSxNQUNBLEtBQUFva0MsSUFHQUMsRUFBQXJELEVBQUF0bUIsRUFBQSxJQUFBdEssRUFBQSxLQUNBNHdCLEVBQUEsS0FBQTV3QixFQUFBLEtBQ0EsRUFHQSxJQUFBaTBCLEVBQ0FBLEVBQUFyRCxFQUFBbUQsSUFHUyxJQUFBbkQsRUFBQW1ELEtBQ1RDLEVBQUFoMEIsRUFBQSxHQUNBcXZCLEVBQUFwdUIsUUFBQWpCLEVBQUEsS0FFQSxNQU9BLFFBQUFpMEIsRUFHQSxHQUFBQSxHQUFBbGxDLEVBQUFvbEMsT0FDQVYsRUFBQVEsRUFBQVIsUUFFQSxJQUNBQSxFQUFBUSxFQUFBUixHQUNPLE1BQUF2M0IsR0FDUCxPQUNBb1IsTUFBQSxjQUNBdmMsTUFBQWtqQyxFQUFBLzNCLEVBQUEsc0JBQUFvTyxFQUFBLE9BQUEwcEIsSUFTQSxPQUFTMW1CLE1BQUEsVUFBQWlFLEtBQUFraUIsR0F1Y1RXLENBQUFybEMsRUFBQTBrQyxFQUFBbEUsRUFBQWlFLEdBR0FBLEdBR0F6a0MsRUFBQWtrQyxjQUNBUyxFQUFBbkUsRUFBQThDLGtCQUFBLG9CQUVBMytCLEVBQUF1OEIsYUFBQXNCLEdBQUFtQyxJQUVBQSxFQUFBbkUsRUFBQThDLGtCQUFBLFdBRUEzK0IsRUFBQXc4QixLQUFBcUIsR0FBQW1DLElBS0EsTUFBQWhCLEdBQUEsU0FBQTNqQyxFQUFBNEQsS0FDQWlnQyxFQUFBLFlBR0ssTUFBQUYsRUFDTEUsRUFBQSxlQUlBQSxFQUFBYSxFQUFBbm1CLE1BQ0E4bEIsRUFBQUssRUFBQWxpQixLQUVBaWlCLElBREF6aUMsRUFBQTBpQyxFQUFBMWlDLFVBTUFBLEVBQUE2aEMsR0FDQUYsR0FBQUUsSUFDQUEsRUFBQSxRQUNBRixFQUFBLElBQ0FBLEVBQUEsS0FNQW5ELEVBQUFtRCxTQUNBbkQsRUFBQXFELFlBQUFVLEdBQUFWLEdBQUEsR0FHQVksRUFDQWhtQixFQUFBa0IsWUFBQW9qQixFQUFBLENBQUFzQixFQUFBUixFQUFBckQsSUFFQS9oQixFQUFBc0IsV0FBQWdqQixFQUFBLENBQUF2QyxFQUFBcUQsRUFBQTdoQyxJQUlBdytCLEVBQUEwQyxjQUNBQSxPQUFBbDhCLEVBRUE2N0IsR0FDQUcsRUFBQTlYLFFBQUF1WixFQUFBLDBCQUNBLENBQUFqRSxFQUFBeGdDLEVBQUF5a0MsRUFBQUosRUFBQXJpQyxJQUlBaWhDLEVBQUE5a0IsU0FBQTRrQixFQUFBLENBQUF2QyxFQUFBcUQsSUFFQWhCLElBQ0FHLEVBQUE5WCxRQUFBLGdCQUFBc1YsRUFBQXhnQyxNQUdBMkUsRUFBQXM4QixRQUNBdDhCLEVBQUE0akIsTUFBQTJDLFFBQUEsY0FLQSxPQUFBc1YsR0FHQThFLFFBQUEsU0FBQWxFLEVBQUE1ZSxFQUFBNWMsR0FDQSxPQUFBakIsRUFBQTdGLElBQUFzaUMsRUFBQTVlLEVBQUE1YyxFQUFBLFNBR0EyL0IsVUFBQSxTQUFBbkUsRUFBQXg3QixHQUNBLE9BQUFqQixFQUFBN0YsSUFBQXNpQyxPQUFBcDZCLEVBQUFwQixFQUFBLGFBSUFqQixFQUFBZ0IsS0FBQSx3QkFBQTFILEVBQUErZSxHQUNBclksRUFBQXFZLEdBQUEsU0FBQW9rQixFQUFBNWUsRUFBQTVjLEVBQUFoQyxHQVVBLE9BUEFMLEVBQUFpZixLQUNBNWUsS0FBQWdDLEVBQ0FBLEVBQUE0YyxFQUNBQSxPQUFBeGIsR0FJQXJDLEVBQUEyOUIsS0FBQTM5QixFQUFBNEIsT0FBQSxDQUNBNjZCLE1BQ0F4OUIsS0FBQW9aLEVBQ0FxakIsU0FBQXo4QixFQUNBNGUsT0FDQTZoQixRQUFBeitCLEdBQ0dqQixFQUFBa0MsY0FBQXU2QixXQUtIejhCLEVBQUF5cUIsU0FBQSxTQUFBZ1MsR0FDQSxPQUFBejhCLEVBQUEyOUIsS0FBQSxDQUNBbEIsTUFHQXg5QixLQUFBLE1BQ0F5OEIsU0FBQSxTQUNBMXhCLE9BQUEsRUFDQTZ5QixPQUFBLEVBQ0F0L0IsUUFBQSxFQUNBa2pDLFFBQUEsS0FLQXpnQyxFQUFBRyxHQUFBeUIsT0FBQSxDQUNBaS9CLFFBQUEsU0FBQXJXLEdBQ0EsSUFBQS9ILEVBeUJBLE9BdkJBNWtCLEtBQUEsS0FDQWUsRUFBQTRyQixLQUNBQSxJQUFBL3dCLEtBQUFvRSxLQUFBLEtBSUE0a0IsRUFBQXppQixFQUFBd3FCLEVBQUEzc0IsS0FBQSxHQUFBbUwsZUFBQTNILEdBQUEsR0FBQVcsT0FBQSxHQUVBbkUsS0FBQSxHQUFBZ0MsWUFDQTRpQixFQUFBMkksYUFBQXZ0QixLQUFBLElBR0E0a0IsRUFBQTFtQixJQUFBLFdBR0EsSUFGQSxJQUFBbUYsRUFBQXJELEtBRUFxRCxFQUFBNC9CLG1CQUNBNS9CLElBQUE0L0Isa0JBR0EsT0FBQTUvQixJQUNJZ3FCLE9BQUFydEIsT0FHSkEsTUFHQWtqQyxVQUFBLFNBQUF2VyxHQUNBLE9BQUE1ckIsRUFBQTRyQixHQUNBM3NCLEtBQUFtRCxLQUFBLFNBQUExSCxHQUNBMEcsRUFBQW5DLE1BQUFrakMsVUFBQXZXLEVBQUEvd0IsS0FBQW9FLEtBQUF2RSxNQUlBdUUsS0FBQW1ELEtBQUEsV0FDQSxJQUFBb1YsRUFBQXBXLEVBQUFuQyxNQUNBOFksRUFBQVAsRUFBQU8sV0FFQUEsRUFBQTFaLE9BQ0EwWixFQUFBa3FCLFFBQUFyVyxHQUdBcFUsRUFBQThVLE9BQUFWLE1BS0EvSCxLQUFBLFNBQUErSCxHQUNBLElBQUF3VyxFQUFBcGlDLEVBQUE0ckIsR0FFQSxPQUFBM3NCLEtBQUFtRCxLQUFBLFNBQUExSCxHQUNBMEcsRUFBQW5DLE1BQUFnakMsUUFBQUcsRUFBQXhXLEVBQUEvd0IsS0FBQW9FLEtBQUF2RSxHQUFBa3hCLE1BSUF5VyxPQUFBLFNBQUFoaEMsR0FJQSxPQUhBcEMsS0FBQWdTLE9BQUE1UCxHQUFBcVEsSUFBQSxRQUFBdFAsS0FBQSxXQUNBaEIsRUFBQW5DLE1BQUEwdEIsWUFBQTF0QixLQUFBMEssY0FFQTFLLFFBS0FtQyxFQUFBd04sS0FBQXhILFFBQUFpdEIsT0FBQSxTQUFBL3hCLEdBQ0EsT0FBQWxCLEVBQUF3TixLQUFBeEgsUUFBQWs3QixRQUFBaGdDLElBRUFsQixFQUFBd04sS0FBQXhILFFBQUFrN0IsUUFBQSxTQUFBaGdDLEdBQ0EsU0FBQUEsRUFBQXlzQixhQUFBenNCLEVBQUFpZ0MsY0FBQWpnQyxFQUFBaXdCLGlCQUFBbDBCLFNBTUErQyxFQUFBcThCLGFBQUErRSxJQUFBLFdBQ0EsSUFDQSxXQUFBeGpDLEVBQUF5akMsZUFDRSxNQUFBNzRCLE1BR0YsSUFBQTg0QixHQUFBLENBR0FDLEVBQUEsSUFJQUMsS0FBQSxLQUVBQyxHQUFBemhDLEVBQUFxOEIsYUFBQStFLE1BRUF6aUMsRUFBQStpQyxPQUFBRCxJQUFBLG9CQUFBQSxHQUNBOWlDLEVBQUFnL0IsS0FBQThELFFBRUF6aEMsRUFBQTA5QixjQUFBLFNBQUE3N0IsR0FDQSxJQUFBWixFQUFBMGdDLEVBR0EsR0FBQWhqQyxFQUFBK2lDLE1BQUFELEtBQUE1L0IsRUFBQXU5QixZQUNBLE9BQ0FPLEtBQUEsU0FBQUgsRUFBQS9LLEdBQ0EsSUFBQW43QixFQUNBOG5DLEVBQUF2L0IsRUFBQXUvQixNQVdBLEdBVEFBLEVBQUFRLEtBQ0EvL0IsRUFBQTVDLEtBQ0E0QyxFQUFBNDZCLElBQ0E1NkIsRUFBQWc3QixNQUNBaDdCLEVBQUFnZ0MsU0FDQWhnQyxFQUFBc1EsVUFJQXRRLEVBQUFpZ0MsVUFDQSxJQUFBeG9DLEtBQUF1SSxFQUFBaWdDLFVBQ0FWLEVBQUE5bkMsR0FBQXVJLEVBQUFpZ0MsVUFBQXhvQyxHQW1CQSxJQUFBQSxLQWRBdUksRUFBQWs5QixVQUFBcUMsRUFBQXRDLGtCQUNBc0MsRUFBQXRDLGlCQUFBajlCLEVBQUFrOUIsVUFRQWw5QixFQUFBdTlCLGFBQUFJLEVBQUEsc0JBQ0FBLEVBQUEsc0NBSUFBLEVBQ0E0QixFQUFBdkMsaUJBQUF2bEMsRUFBQWttQyxFQUFBbG1DLElBSUEySCxFQUFBLFNBQUFoQyxHQUNBLGtCQUNBZ0MsSUFDQUEsRUFBQTBnQyxFQUFBUCxFQUFBVyxPQUNBWCxFQUFBWSxRQUFBWixFQUFBYSxRQUFBYixFQUFBYyxVQUNBZCxFQUFBZSxtQkFBQSxLQUVBLFVBQUFsakMsRUFDQW1pQyxFQUFBbkMsUUFDUSxVQUFBaGdDLEVBS1IsaUJBQUFtaUMsRUFBQXBDLE9BQ0F2SyxFQUFBLFdBRUFBLEVBR0EyTSxFQUFBcEMsT0FDQW9DLEVBQUFsQyxZQUlBekssRUFDQTZNLEdBQUFGLEVBQUFwQyxTQUFBb0MsRUFBQXBDLE9BQ0FvQyxFQUFBbEMsV0FLQSxVQUFBa0MsRUFBQWdCLGNBQUEsU0FDQSxpQkFBQWhCLEVBQUFpQixhQUNBLENBQVdDLE9BQUFsQixFQUFBckIsVUFDWCxDQUFXcmdDLEtBQUEwaEMsRUFBQWlCLGNBQ1hqQixFQUFBeEMsNEJBUUF3QyxFQUFBVyxPQUFBOWdDLElBQ0EwZ0MsRUFBQVAsRUFBQVksUUFBQVosRUFBQWMsVUFBQWpoQyxFQUFBLGNBS0FvQixJQUFBKytCLEVBQUFhLFFBQ0FiLEVBQUFhLFFBQUFOLEVBRUFQLEVBQUFlLG1CQUFBLFdBR0EsSUFBQWYsRUFBQTNrQixZQU1BN2UsRUFBQTBkLFdBQUEsV0FDQXJhLEdBQ0EwZ0MsT0FRQTFnQyxJQUFBLFNBRUEsSUFHQW1nQyxFQUFBekIsS0FBQTk5QixFQUFBeTlCLFlBQUF6OUIsRUFBQWdjLE1BQUEsTUFDSyxNQUFBclYsR0FHTCxHQUFBdkgsRUFDQSxNQUFBdUgsSUFLQXkyQixNQUFBLFdBQ0FoK0IsR0FDQUEsUUFXQWpCLEVBQUF5OUIsY0FBQSxTQUFBcGlDLEdBQ0FBLEVBQUErakMsY0FDQS9qQyxFQUFBc2IsU0FBQW5YLFFBQUEsS0FLQVEsRUFBQXU5QixVQUFBLENBQ0FSLFFBQUEsQ0FDQXY5QixPQUFBLDZGQUdBbVgsU0FBQSxDQUNBblgsT0FBQSwyQkFFQTA5QixXQUFBLENBQ0FxRixjQUFBLFNBQUE3aUMsR0FFQSxPQURBTSxFQUFBZ0QsV0FBQXRELEdBQ0FBLE1BTUFNLEVBQUF5OUIsY0FBQSxrQkFBQXBpQyxRQUNBZ0gsSUFBQWhILEVBQUEyTyxRQUNBM08sRUFBQTJPLE9BQUEsR0FFQTNPLEVBQUErakMsY0FDQS9qQyxFQUFBNEQsS0FBQSxTQUtBZSxFQUFBMDlCLGNBQUEsa0JBQUFyaUMsR0FJQSxJQUFBbUUsRUFBQXlCLEVBREEsR0FBQTVGLEVBQUErakMsWUFFQSxPQUNBTyxLQUFBLFNBQUFuNEIsRUFBQWl0QixHQUNBajFCLEVBQUFRLEVBQUEsWUFBQThkLEtBQUEsQ0FDQTBrQixRQUFBbm5DLEVBQUFvbkMsY0FDQXZqQyxJQUFBN0QsRUFBQW9oQyxNQUNLalosR0FDTCxhQUNBdmlCLEVBQUEsU0FBQXloQyxHQUNBbGpDLEVBQUE2WixTQUNBcFksRUFBQSxLQUNBeWhDLEdBQ0FqTyxFQUFBLFVBQUFpTyxFQUFBempDLEtBQUEsUUFBQXlqQyxFQUFBempDLFFBTUF4QixFQUFBa0MsS0FBQUMsWUFBQUosRUFBQSxLQUVBeS9CLE1BQUEsV0FDQWgrQixHQUNBQSxRQVVBLElBcUdBeWYsR0FyR0FpaUIsR0FBQSxHQUNBQyxHQUFBLG9CQUdBNWlDLEVBQUF1OUIsVUFBQSxDQUNBc0YsTUFBQSxXQUNBQyxjQUFBLFdBQ0EsSUFBQTdoQyxFQUFBMGhDLEdBQUFsOUIsT0FBQXpGLEVBQUFzQyxRQUFBLElBQUF3M0IsS0FFQSxPQURBajhCLEtBQUFvRCxJQUFBLEVBQ0FBLEtBS0FqQixFQUFBeTlCLGNBQUEsc0JBQUFwaUMsRUFBQTBuQyxFQUFBbEgsR0FFQSxJQUFBbUgsRUFBQUMsRUFBQUMsRUFDQUMsR0FBQSxJQUFBOW5DLEVBQUF3bkMsUUFBQUQsR0FBQXI1QixLQUFBbE8sRUFBQW9oQyxLQUNBLE1BQ0EsaUJBQUFwaEMsRUFBQXdpQixNQUVBLEtBREF4aUIsRUFBQXloQyxhQUFBLElBQ0F6K0IsUUFBQSxzQ0FDQXVrQyxHQUFBcjVCLEtBQUFsTyxFQUFBd2lCLE9BQUEsUUFJQSxHQUFBc2xCLEdBQUEsVUFBQTluQyxFQUFBc2dDLFVBQUEsR0E4REEsT0EzREFxSCxFQUFBM25DLEVBQUF5bkMsY0FBQWxrQyxFQUFBdkQsRUFBQXluQyxlQUNBem5DLEVBQUF5bkMsZ0JBQ0F6bkMsRUFBQXluQyxjQUdBSyxFQUNBOW5DLEVBQUE4bkMsR0FBQTluQyxFQUFBOG5DLEdBQUExZ0MsUUFBQW1nQyxHQUFBLEtBQUFJLElBQ0csSUFBQTNuQyxFQUFBd25DLFFBQ0h4bkMsRUFBQW9oQyxNQUFBMUMsR0FBQXh3QixLQUFBbE8sRUFBQW9oQyxLQUFBLFNBQUFwaEMsRUFBQXduQyxNQUFBLElBQUFHLEdBSUEzbkMsRUFBQTZoQyxXQUFBLDBCQUlBLE9BSEFnRyxHQUNBbGpDLEVBQUEzQyxNQUFBMmxDLEVBQUEsbUJBRUFFLEVBQUEsSUFJQTduQyxFQUFBc2dDLFVBQUEsVUFHQXNILEVBQUFybEMsRUFBQW9sQyxHQUNBcGxDLEVBQUFvbEMsR0FBQSxXQUNBRSxFQUFBbG1DLFdBSUE2K0IsRUFBQWhpQixPQUFBLGdCQUdBeFgsSUFBQTRnQyxFQUNBampDLEVBQUFwQyxHQUFBaTZCLFdBQUFtTCxHQUlBcGxDLEVBQUFvbEMsR0FBQUMsRUFJQTVuQyxFQUFBMm5DLEtBR0EzbkMsRUFBQXluQyxjQUFBQyxFQUFBRCxjQUdBSCxHQUFBdmtDLEtBQUE0a0MsSUFJQUUsR0FBQXRrQyxFQUFBcWtDLElBQ0FBLEVBQUFDLEVBQUEsSUFHQUEsRUFBQUQsT0FBQTVnQyxJQUlBLFdBWUExRCxFQUFBeWtDLHFCQUNBMWlCLEdBQUFqakIsRUFBQTRsQyxlQUFBRCxtQkFBQSxJQUFBMWlCLE1BQ0FuVSxVQUFBLDZCQUNBLElBQUFtVSxHQUFBblksV0FBQXRMLFFBUUErQyxFQUFBc1csVUFBQSxTQUFBdUgsRUFBQTNkLEVBQUFvakMsR0FDQSx1QkFBQXpsQixFQUNBLElBRUEsa0JBQUEzZCxJQUNBb2pDLEVBQUFwakMsRUFDQUEsR0FBQSxHQUtBQSxJQUlBdkIsRUFBQXlrQyxxQkFNQTN3QixHQUxBdlMsRUFBQXpDLEVBQUE0bEMsZUFBQUQsbUJBQUEsS0FLQTNqQyxjQUFBLFNBQ0EwUixLQUFBMVQsRUFBQXFULFNBQUFLLEtBQ0FqUixFQUFBUCxLQUFBQyxZQUFBNlMsSUFFQXZTLEVBQUF6QyxHQUtBNmtCLEdBQUFnaEIsR0FBQSxJQURBQyxFQUFBdHRCLEVBQUFoTixLQUFBNFUsSUFLQSxDQUFBM2QsRUFBQVQsY0FBQThqQyxFQUFBLE1BR0FBLEVBQUFsaEIsR0FBQSxDQUFBeEUsR0FBQTNkLEVBQUFvaUIsR0FFQUEsS0FBQXJsQixRQUNBK0MsRUFBQXNpQixHQUFBakosU0FHQXJaLEVBQUFjLE1BQUEsR0FBQXlpQyxFQUFBaDdCLGNBbENBLElBQUFrSyxFQUFBOHdCLEVBQUFqaEIsR0F5Q0F0aUIsRUFBQUcsR0FBQWttQixLQUFBLFNBQUFvVyxFQUFBK0csRUFBQXZpQyxHQUNBLElBQUFoQixFQUFBaEIsRUFBQThnQyxFQUNBM3BCLEVBQUF2WSxLQUNBZ21CLEVBQUE0WSxFQUFBcCtCLFFBQUEsS0FzREEsT0FwREF3bEIsR0FBQSxJQUNBNWpCLEVBQUF5M0IsR0FBQStFLEVBQUF2K0IsTUFBQTJsQixJQUNBNFksSUFBQXYrQixNQUFBLEVBQUEybEIsSUFJQWpsQixFQUFBNGtDLElBR0F2aUMsRUFBQXVpQyxFQUNBQSxPQUFBbmhDLEdBR0VtaEMsR0FBQSxpQkFBQUEsSUFDRnZrQyxFQUFBLFFBSUFtWCxFQUFBblosT0FBQSxHQUNBK0MsRUFBQTI5QixLQUFBLENBQ0FsQixNQUtBeDlCLFFBQUEsTUFDQXk4QixTQUFBLE9BQ0E3ZCxLQUFBMmxCLElBQ0d2K0IsS0FBQSxTQUFBbzlCLEdBR0h0QyxFQUFBL2lDLFVBRUFvWixFQUFBb1UsS0FBQXZxQixFQUlBRCxFQUFBLFNBQUFrckIsT0FBQWxyQixFQUFBc1csVUFBQStyQixJQUFBbDJCLEtBQUFsTSxHQUdBb2lDLEtBS0d4b0IsT0FBQTVZLEdBQUEsU0FBQTQ2QixFQUFBbUQsR0FDSDVvQixFQUFBcFYsS0FBQSxXQUNBQyxFQUFBRSxNQUFBdEQsS0FBQWtpQyxHQUFBLENBQUFsRSxFQUFBd0csYUFBQXJELEVBQUFuRCxRQUtBaCtCLE1BT0FtQyxFQUFBZ0IsS0FBQSxDQUNBLFlBQ0EsV0FDQSxlQUNBLFlBQ0EsY0FDQSxZQUNBLFNBQUExSCxFQUFBMkYsR0FDQWUsRUFBQUcsR0FBQWxCLEdBQUEsU0FBQWtCLEdBQ0EsT0FBQXRDLEtBQUEybEIsR0FBQXZrQixFQUFBa0IsTUFPQUgsRUFBQXdOLEtBQUF4SCxRQUFBeTlCLFNBQUEsU0FBQXZpQyxHQUNBLE9BQUFsQixFQUFBc0QsS0FBQXRELEVBQUFpMkIsT0FBQSxTQUFBOTFCLEdBQ0EsT0FBQWUsSUFBQWYsRUFBQWUsT0FDRWpFLFFBTUYrQyxFQUFBMGpDLE9BQUEsQ0FDQUMsVUFBQSxTQUFBemlDLEVBQUFXLEVBQUF2SSxHQUNBLElBQUFzcUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFDQXhXLEVBQUF6dEIsRUFBQTBmLElBQUF4ZSxFQUFBLFlBQ0FnakMsRUFBQWxrQyxFQUFBa0IsR0FDQTBsQixFQUFBLEdBR0EsV0FBQTZHLElBQ0F2c0IsRUFBQXNlLE1BQUFpTyxTQUFBLFlBR0F1VyxFQUFBRSxFQUFBUixTQUNBSSxFQUFBOWpDLEVBQUEwZixJQUFBeGUsRUFBQSxPQUNBK2lDLEVBQUFqa0MsRUFBQTBmLElBQUF4ZSxFQUFBLFNBQ0EsYUFBQXVzQixHQUFBLFVBQUFBLEtBQ0FxVyxFQUFBRyxHQUFBNWxDLFFBQUEsWUFNQTBsQyxHQURBSCxFQUFBTSxFQUFBelcsWUFDQS9oQixJQUNBbTRCLEVBQUFELEVBQUF2UyxPQUdBMFMsRUFBQWpXLFdBQUFnVyxJQUFBLEVBQ0FELEVBQUEvVixXQUFBbVcsSUFBQSxHQUdBcmxDLEVBQUFpRCxLQUdBQSxJQUFBcEksS0FBQXlILEVBQUE1SCxFQUFBMEcsRUFBQTRCLE9BQUEsR0FBcURvaUMsS0FHckQsTUFBQW5pQyxFQUFBNkosTUFDQWtiLEVBQUFsYixJQUFBN0osRUFBQTZKLElBQUFzNEIsRUFBQXQ0QixJQUFBcTRCLEdBRUEsTUFBQWxpQyxFQUFBd3ZCLE9BQ0F6SyxFQUFBeUssS0FBQXh2QixFQUFBd3ZCLEtBQUEyUyxFQUFBM1MsS0FBQXdTLEdBR0EsVUFBQWhpQyxFQUNBQSxFQUFBc2lDLE1BQUExcUMsS0FBQXlILEVBQUEwbEIsR0FHQXNkLEVBQUF4a0IsSUFBQWtILEtBS0E1bUIsRUFBQUcsR0FBQXlCLE9BQUEsQ0FHQThoQyxPQUFBLFNBQUE3aEMsR0FHQSxHQUFBN0UsVUFBQUMsT0FDQSxZQUFBb0YsSUFBQVIsRUFDQWhFLEtBQ0FBLEtBQUFtRCxLQUFBLFNBQUExSCxHQUNBMEcsRUFBQTBqQyxPQUFBQyxVQUFBOWxDLEtBQUFnRSxFQUFBdkksS0FJQSxJQUFBOHFDLEVBQUFDLEVBQ0FuakMsRUFBQXJELEtBQUEsR0FFQSxPQUFBcUQsRUFRQUEsRUFBQWl3QixpQkFBQWwwQixRQUtBbW5DLEVBQUFsakMsRUFBQWt3Qix3QkFDQWlULEVBQUFuakMsRUFBQThILGNBQUF5QyxZQUNBLENBQ0FDLElBQUEwNEIsRUFBQTE0QixJQUFBMjRCLEVBQUFDLFlBQ0FqVCxLQUFBK1MsRUFBQS9TLEtBQUFnVCxFQUFBRSxjQVJBLENBQVc3NEIsSUFBQSxFQUFBMmxCLEtBQUEsUUFUWCxHQXVCQTVELFNBQUEsV0FDQSxHQUFBNXZCLEtBQUEsSUFJQSxJQUFBMm1DLEVBQUFkLEVBQUFwa0MsRUFDQTRCLEVBQUFyRCxLQUFBLEdBQ0E0bUMsRUFBQSxDQUFtQi80QixJQUFBLEVBQUEybEIsS0FBQSxHQUduQixhQUFBcnhCLEVBQUEwZixJQUFBeGUsRUFBQSxZQUdBd2lDLEVBQUF4aUMsRUFBQWt3Qiw0QkFFRyxDQU9ILElBTkFzUyxFQUFBN2xDLEtBQUE2bEMsU0FJQXBrQyxFQUFBNEIsRUFBQThILGNBQ0F3N0IsRUFBQXRqQyxFQUFBc2pDLGNBQUFsbEMsRUFBQWdNLGdCQUNBazVCLElBQ0FBLElBQUFsbEMsRUFBQW9oQixNQUFBOGpCLElBQUFsbEMsRUFBQWdNLGtCQUNBLFdBQUF0TCxFQUFBMGYsSUFBQThrQixFQUFBLGFBRUFBLElBQUEza0MsV0FFQTJrQyxPQUFBdGpDLEdBQUEsSUFBQXNqQyxFQUFBMWxDLFlBR0EybEMsRUFBQXprQyxFQUFBd2tDLEdBQUFkLFVBQ0FoNEIsS0FBQTFMLEVBQUEwZixJQUFBOGtCLEVBQUEscUJBQ0FDLEVBQUFwVCxNQUFBcnhCLEVBQUEwZixJQUFBOGtCLEVBQUEsdUJBS0EsT0FDQTk0QixJQUFBZzRCLEVBQUFoNEIsSUFBQSs0QixFQUFBLzRCLElBQUExTCxFQUFBMGYsSUFBQXhlLEVBQUEsZ0JBQ0Ftd0IsS0FBQXFTLEVBQUFyUyxLQUFBb1QsRUFBQXBULEtBQUFyeEIsRUFBQTBmLElBQUF4ZSxFQUFBLG9CQWNBc2pDLGFBQUEsV0FDQSxPQUFBM21DLEtBQUE5QixJQUFBLFdBR0EsSUFGQSxJQUFBeW9DLEVBQUEzbUMsS0FBQTJtQyxhQUVBQSxHQUFBLFdBQUF4a0MsRUFBQTBmLElBQUE4a0IsRUFBQSxhQUNBQSxpQkFHQSxPQUFBQSxHQUFBbDVCLFFBTUF0TCxFQUFBZ0IsS0FBQSxDQUFjdXhCLFdBQUEsY0FBQUQsVUFBQSxlQUFzRCxTQUFBamEsRUFBQXlGLEdBQ3BFLElBQUFwUyxFQUFBLGdCQUFBb1MsRUFFQTlkLEVBQUFHLEdBQUFrWSxHQUFBLFNBQUF4YixHQUNBLE9BQUE4ZixFQUFBOWUsS0FBQSxTQUFBcUQsRUFBQW1YLEVBQUF4YixHQUdBLElBQUF3bkMsRUFPQSxHQU5BdGxDLEVBQUFtQyxHQUNBbWpDLEVBQUFuakMsRUFDSSxJQUFBQSxFQUFBcEMsV0FDSnVsQyxFQUFBbmpDLEVBQUF1SyxrQkFHQXBKLElBQUF4RixFQUNBLE9BQUF3bkMsSUFBQXZtQixHQUFBNWMsRUFBQW1YLEdBR0Fnc0IsRUFDQUEsRUFBQUssU0FDQWg1QixFQUFBMjRCLEVBQUFFLFlBQUExbkMsRUFDQTZPLEVBQUE3TyxFQUFBd25DLEVBQUFDLGFBSUFwakMsRUFBQW1YLEdBQUF4YixHQUVHd2IsRUFBQXhiLEVBQUFHLFVBQUFDLFdBVUgrQyxFQUFBZ0IsS0FBQSx3QkFBQTFILEVBQUF3a0IsR0FDQTlkLEVBQUFrd0IsU0FBQXBTLEdBQUE2TyxHQUFBaHVCLEVBQUF1dkIsY0FDQSxTQUFBaHRCLEVBQUFtckIsR0FDQSxHQUFBQSxFQUlBLE9BSEFBLEVBQUFELEdBQUFsckIsRUFBQTRjLEdBR0FpTyxHQUFBeGlCLEtBQUE4aUIsR0FDQXJzQixFQUFBa0IsR0FBQXVzQixXQUFBM1AsR0FBQSxLQUNBdU8sTUFRQXJzQixFQUFBZ0IsS0FBQSxDQUFjMmpDLE9BQUEsU0FBQUMsTUFBQSxTQUFtQyxTQUFBL3FDLEVBQUFvRixHQUNqRGUsRUFBQWdCLEtBQUEsQ0FBZXV3QixRQUFBLFFBQUExM0IsRUFBQTZkLFFBQUF6WSxFQUFBNGxDLEdBQUEsUUFBQWhyQyxHQUNmLFNBQUFpckMsRUFBQUMsR0FHQS9rQyxFQUFBRyxHQUFBNGtDLEdBQUEsU0FBQXpULEVBQUEvMkIsR0FDQSxJQUFBcWlCLEVBQUE1ZixVQUFBQyxTQUFBNm5DLEdBQUEsa0JBQUF4VCxHQUNBM0IsRUFBQW1WLEtBQUEsSUFBQXhULElBQUEsSUFBQS8yQixFQUFBLG1CQUVBLE9BQUFvaUIsRUFBQTllLEtBQUEsU0FBQXFELEVBQUFqQyxFQUFBMUUsR0FDQSxJQUFBK0UsRUFFQSxPQUFBUCxFQUFBbUMsR0FHQSxJQUFBNmpDLEVBQUExbUMsUUFBQSxTQUNBNkMsRUFBQSxRQUFBckgsR0FDQXFILEVBQUF6RCxTQUFBNk4sZ0JBQUEsU0FBQXpSLEdBSUEsSUFBQXFILEVBQUFwQyxVQUNBUSxFQUFBNEIsRUFBQW9LLGdCQUlBL0ksS0FBQTZzQixJQUNBbHVCLEVBQUF3ZixLQUFBLFNBQUE3bUIsR0FBQXlGLEVBQUEsU0FBQXpGLEdBQ0FxSCxFQUFBd2YsS0FBQSxTQUFBN21CLEdBQUF5RixFQUFBLFNBQUF6RixHQUNBeUYsRUFBQSxTQUFBekYsVUFJQXdJLElBQUE5SCxFQUdBeUYsRUFBQTBmLElBQUF4ZSxFQUFBakMsRUFBQTB3QixHQUdBM3ZCLEVBQUF3ZixNQUFBdGUsRUFBQWpDLEVBQUExRSxFQUFBbzFCLElBQ0kxd0IsRUFBQTJkLEVBQUEwVSxPQUFBanZCLEVBQUF1YSxRQU1KNWMsRUFBQWdCLEtBQUEsd0xBRUE5RSxNQUFBLEtBQ0EsU0FBQTVDLEVBQUFPLEdBR0FtRyxFQUFBRyxHQUFBdEcsR0FBQSxTQUFBZ2tCLEVBQUExZCxHQUNBLE9BQUFuRCxVQUFBQyxPQUFBLEVBQ0FZLEtBQUEybEIsR0FBQTNwQixFQUFBLEtBQUFna0IsRUFBQTFkLEdBQ0F0QyxLQUFBMG9CLFFBQUExc0IsTUFJQW1HLEVBQUFHLEdBQUF5QixPQUFBLENBQ0FvakMsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFybkMsS0FBQW1yQixXQUFBaWMsR0FBQWhjLFdBQUFpYyxHQUFBRCxNQU9BamxDLEVBQUFHLEdBQUF5QixPQUFBLENBRUE5RyxLQUFBLFNBQUEyb0IsRUFBQTVGLEVBQUExZCxHQUNBLE9BQUF0QyxLQUFBMmxCLEdBQUFDLEVBQUEsS0FBQTVGLEVBQUExZCxJQUVBZ2xDLE9BQUEsU0FBQTFoQixFQUFBdGpCLEdBQ0EsT0FBQXRDLEtBQUFnbUIsSUFBQUosRUFBQSxLQUFBdGpCLElBR0FpbEMsU0FBQSxTQUFBbmxDLEVBQUF3akIsRUFBQTVGLEVBQUExZCxHQUNBLE9BQUF0QyxLQUFBMmxCLEdBQUFDLEVBQUF4akIsRUFBQTRkLEVBQUExZCxJQUVBa2xDLFdBQUEsU0FBQXBsQyxFQUFBd2pCLEVBQUF0akIsR0FHQSxXQUFBbkQsVUFBQUMsT0FDQVksS0FBQWdtQixJQUFBNWpCLEVBQUEsTUFDQXBDLEtBQUFnbUIsSUFBQUosRUFBQXhqQixHQUFBLEtBQUFFLE1BUUFILEVBQUFzbEMsTUFBQSxTQUFBbmxDLEVBQUFELEdBQ0EsSUFBQW9NLEVBQUE0RCxFQUFBbzFCLEVBVUEsR0FSQSxpQkFBQXBsQyxJQUNBb00sRUFBQW5NLEVBQUFELEdBQ0FBLEVBQUFDLEVBQ0FBLEVBQUFtTSxHQUtBMU4sRUFBQXVCLEdBYUEsT0FSQStQLEVBQUFoUyxFQUFBekUsS0FBQXVELFVBQUEsSUFDQXNvQyxFQUFBLFdBQ0EsT0FBQW5sQyxFQUFBZ0IsTUFBQWpCLEdBQUFyQyxLQUFBcVMsRUFBQS9SLE9BQUFELEVBQUF6RSxLQUFBdUQsZUFJQTJHLEtBQUF4RCxFQUFBd0QsS0FBQXhELEVBQUF3RCxNQUFBM0QsRUFBQTJELE9BRUEyaEMsR0FHQXRsQyxFQUFBdWxDLFVBQUEsU0FBQUMsR0FDQUEsRUFDQXhsQyxFQUFBdWMsWUFFQXZjLEVBQUF1VyxPQUFBLElBR0F2VyxFQUFBb0MsUUFBQUQsTUFBQUMsUUFDQXBDLEVBQUF5bEMsVUFBQXBuQixLQUFBQyxNQUNBdGUsRUFBQXdKLFdBQ0F4SixFQUFBcEIsYUFDQW9CLEVBQUFqQixXQUNBaUIsRUFBQXFkLFlBQ0FyZCxFQUFBZixLQUFBYyxFQUVBQyxFQUFBaW5CLElBQUFuaUIsS0FBQW1pQixJQUVBam5CLEVBQUEwbEMsVUFBQSxTQUFBN21DLEdBS0EsSUFBQUksRUFBQWUsRUFBQWYsS0FBQUosR0FDQSxrQkFBQUksR0FBQSxXQUFBQSxLQUtBMG1DLE1BQUE5bUMsRUFBQWl2QixXQUFBanZCLFVBc0JFd0QsS0FGbUIvRSxFQUFBLFdBQ3JCLE9BQUEwQyxHQUNFbUIsTUFBQS9ILEVBRmlCLE9BRWpCQyxFQUFBRCxRQUFBa0UsR0FNRixJQUdBc29DLEdBQUFob0MsRUFBQW9DLE9BR0E2bEMsR0FBQWpvQyxFQUFBa29DLEVBd0JBLE9BdEJBOWxDLEVBQUErbEMsV0FBQSxTQUFBOWpDLEdBU0EsT0FSQXJFLEVBQUFrb0MsSUFBQTlsQyxJQUNBcEMsRUFBQWtvQyxFQUFBRCxJQUdBNWpDLEdBQUFyRSxFQUFBb0MsYUFDQXBDLEVBQUFvQyxPQUFBNGxDLElBR0E1bEMsR0FNQWxDLElBQ0FGLEVBQUFvQyxPQUFBcEMsRUFBQWtvQyxFQUFBOWxDLEdBTUFBOzs7Ozs7OztHQ2puVWEsSUFBQWdtQyxFQUFNOXNDLEVBQVEsR0FBZTZCLEVBQUEsbUJBQUFWLGVBQUE0OUIsSUFBQTc4QixFQUFBTCxFQUFBVixPQUFBNDlCLElBQUEsdUJBQUFnTyxFQUFBbHJDLEVBQUFWLE9BQUE0OUIsSUFBQSxzQkFBQTc5QixFQUFBVyxFQUFBVixPQUFBNDlCLElBQUEsd0JBQUF6OUIsRUFBQU8sRUFBQVYsT0FBQTQ5QixJQUFBLDJCQUFBaU8sRUFBQW5yQyxFQUFBVixPQUFBNDlCLElBQUEsd0JBQUFuZ0IsRUFBQS9jLEVBQUFWLE9BQUE0OUIsSUFBQSx3QkFBQXY2QixFQUFBM0MsRUFBQVYsT0FBQTQ5QixJQUFBLHVCQUFBa08sRUFBQXByQyxFQUFBVixPQUFBNDlCLElBQUEsK0JBQUFtTyxFQUFBcnJDLEVBQUFWLE9BQUE0OUIsSUFBQSwyQkFBQW9PLEVBQUF0ckMsRUFBQVYsT0FBQTQ5QixJQUFBLHdCQUFBcU8sRUFBQXZyQyxFQUFBVixPQUFBNDlCLElBQUEsY0FDMUMsTUFBQXNPLEVBQUF4ckMsRUFBQVYsT0FBQTQ5QixJQUFBLG9CQUFBdU8sRUFBQSxtQkFBQW5zQyxlQUFBdUosU0FDQSxTQUFBNmlDLEVBQUFsaEMsR0FBYyxRQUFBQyxFQUFBeEksVUFBQUMsT0FBQSxFQUFBdUwsRUFBQSx5REFBQWpELEVBQUE1TCxFQUFBLEVBQThGQSxFQUFBNkwsRUFBSTdMLElBQUE2TyxHQUFBLFdBQUFteUIsbUJBQUEzOUIsVUFBQXJELEVBQUEsS0FEekIsU0FBQTRMLEVBQUFDLEVBQUFnRCxFQUFBN08sRUFBQUMsRUFBQThzQyxFQUFBQyxFQUFBQyxHQUE2QixJQUFBcmhDLEVBQUEsQ0FBZ0IsR0FBVEEsT0FBQSxPQUFTLElBQUFDLEVBQUFELEVBQUE1SCxNQUFBLHFJQUF1SixDQUFLLElBQUFwRSxFQUFBLENBQUFpUCxFQUFBN08sRUFBQUMsRUFBQThzQyxFQUFBQyxFQUFBQyxHQUFBbHRDLEVBQUEsR0FBd0I2TCxFQUFBNUgsTUFBQTZILEVBQUEvQyxRQUFBLGlCQUFtQyxPQUFBbEosRUFBQUcsU0FBaUJHLEtBQUEsc0JBQTZDLE1BQWhCMEwsRUFBQXNoQyxZQUFBLEVBQWdCdGhDLEdBQ3BQdWhDLEVBQUEsMkJBQUF2aEMsRUFBQSw0SEFBbUNpRCxHQUE2SCxJQUFBdStCLEVBQUEsQ0FBT0MsVUFBQSxXQUFxQixVQUFTQyxtQkFBQSxhQUFnQ0Msb0JBQUEsYUFBaUNDLGdCQUFBLGNBQThCQyxFQUFBLEdBQ3pjLFNBQUFDLEVBQUE5aEMsRUFBQUMsRUFBQWdELEdBQWtCM0ssS0FBQStvQixNQUFBcmhCLEVBQWExSCxLQUFBcUMsUUFBQXNGLEVBQWUzSCxLQUFBeXBDLEtBQUFGLEVBQVl2cEMsS0FBQTBwQyxRQUFBLytCLEdBQUF1K0IsRUFBc1MsU0FBQVMsS0FBc0MsU0FBQUMsRUFBQWxpQyxFQUFBQyxFQUFBZ0QsR0FBa0IzSyxLQUFBK29CLE1BQUFyaEIsRUFBYTFILEtBQUFxQyxRQUFBc0YsRUFBZTNILEtBQUF5cEMsS0FBQUYsRUFBWXZwQyxLQUFBMHBDLFFBQUEvK0IsR0FBQXUrQixFQUFwWE0sRUFBQW5zQyxVQUFBd3NDLGlCQUFBLEdBQWdDTCxFQUFBbnNDLFVBQUF5c0MsU0FBQSxTQUFBcGlDLEVBQUFDLEdBQW1DLGlCQUFBRCxHQUFBLG1CQUFBQSxHQUFBLE1BQUFBLEdBQUFraEMsRUFBQSxNQUFtRTVvQyxLQUFBMHBDLFFBQUFKLGdCQUFBdHBDLEtBQUEwSCxFQUFBQyxFQUFBLGFBQW1ENmhDLEVBQUFuc0MsVUFBQTBzQyxZQUFBLFNBQUFyaUMsR0FBb0MxSCxLQUFBMHBDLFFBQUFOLG1CQUFBcHBDLEtBQUEwSCxFQUFBLGdCQUFxRWlpQyxFQUFBdHNDLFVBQUFtc0MsRUFBQW5zQyxVQUFvRyxJQUFBMnNDLEVBQUFKLEVBQUF2c0MsVUFBQSxJQUFBc3NDLEVBQ2xkSyxFQUFBcm5DLFlBQUFpbkMsRUFBZ0J6QixFQUFBNkIsRUFBQVIsRUFBQW5zQyxXQUFpQjJzQyxFQUFBQyxzQkFBQSxFQUEwQixJQUFBQyxFQUFBLENBQU96SCxRQUFBLEtBQUEwSCxrQkFBQSxNQUFvQ0MsRUFBQWp1QyxPQUFBa0IsVUFBQUMsZUFBQStzQyxFQUFBLENBQXNDcnRDLEtBQUEsRUFBQXN0QyxLQUFBLEVBQUFDLFFBQUEsRUFBQUMsVUFBQSxHQUM1SSxTQUFBQyxFQUFBL2lDLEVBQUFDLEVBQUFnRCxHQUFrQixJQUFBN08sT0FBQSxFQUFBQyxFQUFBLEdBQWlCOHNDLEVBQUEsS0FBQUMsRUFBQSxLQUFlLFNBQUFuaEMsRUFBQSxJQUFBN0wsVUFBQSxJQUFBNkwsRUFBQTJpQyxNQUFBeEIsRUFBQW5oQyxFQUFBMmlDLFVBQUEsSUFBQTNpQyxFQUFBM0ssTUFBQTZyQyxFQUFBLEdBQUFsaEMsRUFBQTNLLEtBQUEySyxFQUFBeWlDLEVBQUF4dUMsS0FBQStMLEVBQUE3TCxLQUFBdXVDLEVBQUEvc0MsZUFBQXhCLEtBQUFDLEVBQUFELEdBQUE2TCxFQUFBN0wsSUFBNEgsSUFBQWl0QyxFQUFBNXBDLFVBQUFDLE9BQUEsRUFBeUIsT0FBQTJwQyxFQUFBaHRDLEVBQUE4YyxTQUFBbE8sT0FBc0IsS0FBQW8rQixFQUFBLENBQWEsUUFBQXJ0QyxFQUFBNEksTUFBQXlrQyxHQUFBbHRDLEVBQUEsRUFBdUJBLEVBQUFrdEMsRUFBSWx0QyxJQUFBSCxFQUFBRyxHQUFBc0QsVUFBQXRELEVBQUEsR0FBd0JFLEVBQUE4YyxTQUFBbmQsRUFBYSxHQUFBZ00sS0FBQWdqQyxhQUFBLElBQUE1dUMsS0FBQWl0QyxFQUFBcmhDLEVBQUFnakMsa0JBQUEsSUFBQTN1QyxFQUFBRCxLQUFBQyxFQUFBRCxHQUFBaXRDLEVBQUFqdEMsSUFBNEUsT0FBTzZ1QyxTQUFBcHRDLEVBQUE2RCxLQUFBc0csRUFBQTFLLElBQUE2ckMsRUFBQXlCLElBQUF4QixFQUFBL2YsTUFBQWh0QixFQUFBNnVDLE9BQUFWLEVBQUF6SCxTQUMvUixTQUFBb0ksRUFBQW5qQyxHQUFjLHVCQUFBQSxHQUFBLE9BQUFBLEtBQUFpakMsV0FBQXB0QyxFQUE0SixJQUFBdXRDLEVBQUEsT0FBQUMsRUFBQSxHQUFrQixTQUFBQyxFQUFBdGpDLEVBQUFDLEVBQUFnRCxFQUFBN08sR0FBb0IsR0FBQWl2QyxFQUFBM3JDLE9BQUEsQ0FBYSxJQUFBckQsRUFBQWd2QyxFQUFBbmpDLE1BQXNFLE9BQXhEN0wsRUFBQXVWLE9BQUE1SixFQUFXM0wsRUFBQWt2QyxVQUFBdGpDLEVBQWM1TCxFQUFBOGYsS0FBQWxSLEVBQVM1TyxFQUFBc0csUUFBQXZHLEVBQVlDLEVBQUFzbEIsTUFBQSxFQUFVdGxCLEVBQVMsT0FBT3VWLE9BQUE1SixFQUFBdWpDLFVBQUF0akMsRUFBQWtVLEtBQUFsUixFQUFBdEksUUFBQXZHLEVBQUF1bEIsTUFBQSxHQUNqWixTQUFBNnBCLEVBQUF4akMsR0FBY0EsRUFBQTRKLE9BQUEsS0FBYzVKLEVBQUF1akMsVUFBQSxLQUFpQnZqQyxFQUFBbVUsS0FBQSxLQUFZblUsRUFBQXJGLFFBQUEsS0FBZXFGLEVBQUEyWixNQUFBLEVBQVUsR0FBQTBwQixFQUFBM3JDLFFBQUEyckMsRUFBQXhxQyxLQUFBbUgsR0FFbUcsU0FBQXlqQyxFQUFBempDLEVBQUFDLEVBQUFnRCxHQUFrQixhQUFBakQsRUFBQSxFQUR2TSxTQUFBMGpDLEVBQUExakMsRUFBQUMsRUFBQWdELEVBQUE3TyxHQUFvQixJQUFBQyxTQUFBMkwsRUFBZSxjQUFBM0wsR0FBQSxZQUFBQSxJQUFBMkwsRUFBQSxNQUF5QyxJQUFBbWhDLEdBQUEsRUFBUyxVQUFBbmhDLEVBQUFtaEMsR0FBQSxPQUFpQixPQUFBOXNDLEdBQWUsMEJBQUE4c0MsR0FBQSxFQUFpQyxNQUFNLG9CQUFBbmhDLEVBQUFpakMsVUFBaUMsS0FBQXB0QyxFQUFBLEtBQUE2cUMsRUFBQVMsR0FBQSxHQUFvQixHQUFBQSxFQUFBLE9BQUFsK0IsRUFBQTdPLEVBQUE0TCxFQUFBLEtBQUFDLEVBQUEsSUFBQTBqQyxFQUFBM2pDLEVBQUEsR0FBQUMsR0FBQSxFQUFnRSxHQUF2QmtoQyxFQUFBLEVBQUlsaEMsRUFBQSxLQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBbUJyRCxNQUFBQyxRQUFBbUQsR0FBQSxRQUFBb2hDLEVBQUEsRUFBZ0NBLEVBQUFwaEMsRUFBQXRJLE9BQVcwcEMsSUFBQSxDQUFZLElBQUFDLEVBQUFwaEMsRUFBQTBqQyxFQUFQdHZDLEVBQUEyTCxFQUFBb2hDLEdBQU9BLEdBQWVELEdBQUF1QyxFQUFBcnZDLEVBQUFndEMsRUFBQXArQixFQUFBN08sUUFBYyxHQUFBaXRDLEVBQUEsT0FBQXJoQyxHQUFBLGlCQUFBQSxFQUFBLHdCQUFBcWhDLEVBQUFKLEdBQUFqaEMsRUFBQWloQyxJQUFBamhDLEVBQUEsZUFBQXFoQyxFQUFBLHdCQUFBQSxFQUFBLElBQUFyaEMsRUFBQXFoQyxFQUFBbnRDLEtBQUE4TCxHQUFBb2hDLEVBQ3JXLElBQUUvc0MsRUFBQTJMLEVBQUErQyxRQUFBckQsTUFBbUJ5aEMsR0FBQXVDLEVBQUFydkMsSUFBQVcsTUFBQXFzQyxFQUFBcGhDLEVBQUEwakMsRUFBQXR2QyxFQUFBK3NDLEtBQUFuK0IsRUFBQTdPLE9BQXNDLFdBQUFDLEdBQUE2c0MsRUFBQSx5QkFBQWorQixFQUFBLEdBQUFqRCxHQUFBLHFCQUEwRXZMLE9BQUFxQyxLQUFBa0osR0FBQXZKLEtBQUEsVUFBOEJ3TSxFQUFBLElBQVMsT0FBQWsrQixFQUEyQnVDLENBQUExakMsRUFBQSxHQUFBQyxFQUFBZ0QsR0FBNkIsU0FBQTBnQyxFQUFBM2pDLEVBQUFDLEdBQWdCLHVCQUFBRCxHQUFBLE9BQUFBLEdBQUEsTUFBQUEsRUFBQTFLLElBSHBGLFNBQUEwSyxHQUFtQixJQUFBQyxFQUFBLENBQU8yakMsSUFBQSxLQUFBQyxJQUFBLE1BQW1CLGNBQUE3akMsR0FBQTlDLFFBQUEsaUJBQUE4QyxHQUE2QyxPQUFBQyxFQUFBRCxLQUdOcUksQ0FBQXJJLEVBQUExSyxLQUFBMkssRUFBQWpILFNBQUEsSUFBOEUsU0FBQThxQyxFQUFBOWpDLEVBQUFDLEdBQWlCRCxFQUFBbVUsS0FBQWpnQixLQUFBOEwsRUFBQXJGLFFBQUFzRixFQUFBRCxFQUFBMlosU0FDblYsU0FBQW9xQixFQUFBL2pDLEVBQUFDLEVBQUFnRCxHQUFtQixJQUFBN08sRUFBQTRMLEVBQUE0SixPQUFBdlYsRUFBQTJMLEVBQUF1akMsVUFBNkJ2akMsSUFBQW1VLEtBQUFqZ0IsS0FBQThMLEVBQUFyRixRQUFBc0YsRUFBQUQsRUFBQTJaLFNBQXFDL2MsTUFBQUMsUUFBQW1ELEdBQUFna0MsRUFBQWhrQyxFQUFBNUwsRUFBQTZPLEVBQUEsU0FBQWpELEdBQXFDLE9BQUFBLElBQVMsTUFBQUEsSUFBQW1qQyxFQUFBbmpDLE9BSm5JLFNBQUFBLEVBQUFDLEdBQWlCLE9BQU9nakMsU0FBQXB0QyxFQUFBNkQsS0FBQXNHLEVBQUF0RyxLQUFBcEUsSUFBQTJLLEVBQUEyaUMsSUFBQTVpQyxFQUFBNGlDLElBQUF2aEIsTUFBQXJoQixFQUFBcWhCLE1BQUE2aEIsT0FBQWxqQyxFQUFBa2pDLFFBSTJHZSxDQUFBamtDLEVBQUEzTCxJQUFBMkwsRUFBQTFLLEtBQUEySyxLQUFBM0ssTUFBQTBLLEVBQUExSyxJQUFBLE9BQUEwSyxFQUFBMUssS0FBQTRILFFBQUFrbUMsRUFBQSxZQUFBbmdDLElBQUE3TyxFQUFBeUUsS0FBQW1ILElBQXlHLFNBQUFna0MsRUFBQWhrQyxFQUFBQyxFQUFBZ0QsRUFBQTdPLEVBQUFDLEdBQXNCLElBQUE4c0MsRUFBQSxHQUFTLE1BQUFsK0IsSUFBQWsrQixHQUFBLEdBQUFsK0IsR0FBQS9GLFFBQUFrbUMsRUFBQSxZQUFzREssRUFBQXpqQyxFQUFBK2pDLEVBQWI5akMsRUFBQXFqQyxFQUFBcmpDLEVBQUFraEMsRUFBQS9zQyxFQUFBQyxJQUF1Qm12QyxFQUFBdmpDLEdBQzNVLElBQUFpa0MsRUFBQSxDQUFPQyxTQUFBLENBQVUzdEMsSUFBQSxTQUFBd0osRUFBQUMsRUFBQWdELEdBQW9CLFNBQUFqRCxFQUFBLE9BQUFBLEVBQW9CLElBQUE1TCxFQUFBLEdBQXlCLE9BQWhCNHZDLEVBQUFoa0MsRUFBQTVMLEVBQUEsS0FBQTZMLEVBQUFnRCxHQUFnQjdPLEdBQVN3QyxRQUFBLFNBQUFvSixFQUFBQyxFQUFBZ0QsR0FBeUIsU0FBQWpELEVBQUEsT0FBQUEsRUFBdUN5akMsRUFBQXpqQyxFQUFBOGpDLEVBQW5CN2pDLEVBQUFxakMsRUFBQSxVQUFBcmpDLEVBQUFnRCxJQUE2QnVnQyxFQUFBdmpDLElBQUswWixNQUFBLFNBQUEzWixHQUFtQixPQUFBeWpDLEVBQUF6akMsRUFBQSxXQUFzQixhQUFZLE9BQU85RSxRQUFBLFNBQUE4RSxHQUFxQixJQUFBQyxFQUFBLEdBQTJDLE9BQWxDK2pDLEVBQUFoa0MsRUFBQUMsRUFBQSxjQUFBRCxHQUF1QixPQUFBQSxJQUFXQyxHQUFTbWtDLEtBQUEsU0FBQXBrQyxHQUF1QyxPQUFyQm1qQyxFQUFBbmpDLElBQUFraEMsRUFBQSxPQUFxQmxoQyxJQUFVcWtDLFVBQUEsV0FBc0IsT0FBT3RKLFFBQUEsT0FBY3VKLFVBQUF4QyxFQUFBeUMsY0FBQXJDLEVBQUFzQyxjQUFBLFNBQUF4a0MsRUFBQUMsR0FDM1IsWUFEb1YsSUFBQUEsTUFBQSxPQUFxQkQsRUFBQSxDQUFHaWpDLFNBQUE5cUMsRUFBQXNzQyxzQkFBQXhrQyxFQUM1ZHlrQyxjQUFBMWtDLEVBQUEya0MsZUFBQTNrQyxFQUFBNGtDLGFBQUEsRUFBQUMsU0FBQSxLQUFBQyxTQUFBLE9BQTZFRCxTQUFBLENBQVk1QixTQUFBMXdCLEVBQUF3eUIsU0FBQS9rQyxHQUF1QkEsRUFBQThrQyxTQUFBOWtDLEdBQW9CZ2xDLFdBQUEsU0FBQWhsQyxHQUF3QixPQUFPaWpDLFNBQUFwQyxFQUFBb0UsT0FBQWpsQyxJQUFxQmtsQyxLQUFBLFNBQUFsbEMsR0FBa0IsT0FBT2lqQyxTQUFBakMsRUFBQW1FLE1BQUFubEMsRUFBQW9sQyxTQUFBLEVBQUFDLFFBQUEsT0FBNENDLEtBQUEsU0FBQXRsQyxFQUFBQyxHQUFvQixPQUFPZ2pDLFNBQUFsQyxFQUFBcm5DLEtBQUFzRyxFQUFBMkgsYUFBQSxJQUFBMUgsRUFBQSxLQUFBQSxJQUE2Q3NsQyxTQUFBMXdDLEVBQUEyd0MsV0FBQXZ3QyxFQUFBd3dDLFNBQUEzRSxFQUFBNW1DLGNBQUE2b0MsRUFBQTJDLGFBQUEsU0FBQTFsQyxFQUFBQyxFQUFBZ0QsR0FBaUYsTUFBQWpELEdBQUFraEMsRUFBQSxNQUFBbGhDLEdBQXVDLElBQUE1TCxPQUFBLEVBQUFDLEVBQUFvc0MsRUFBQSxHQUFtQnpnQyxFQUFBcWhCLE9BQUE4ZixFQUFBbmhDLEVBQUExSyxJQUFBOHJDLEVBQUFwaEMsRUFBQTRpQyxJQUFBdkIsRUFBQXJoQyxFQUFBa2pDLE9BQ2hkLFNBQUFqakMsRUFBQSxNQUFZLElBQUFBLEVBQUEyaUMsTUFBQXhCLEVBQUFuaEMsRUFBQTJpQyxJQUFBdkIsRUFBQW1CLEVBQUF6SCxjQUFzQyxJQUFBOTZCLEVBQUEzSyxNQUFBNnJDLEVBQUEsR0FBQWxoQyxFQUFBM0ssS0FBNkIsSUFBQXRCLE9BQUEsRUFBa0UsSUFBQUksS0FBckQ0TCxFQUFBdEcsTUFBQXNHLEVBQUF0RyxLQUFBc3BDLGVBQUFodkMsRUFBQWdNLEVBQUF0RyxLQUFBc3BDLGNBQXFEL2lDLEVBQUF5aUMsRUFBQXh1QyxLQUFBK0wsRUFBQTdMLEtBQUF1dUMsRUFBQS9zQyxlQUFBeEIsS0FBQUMsRUFBQUQsUUFBQSxJQUFBNkwsRUFBQTdMLFNBQUEsSUFBQUosSUFBQUksR0FBQTZMLEVBQUE3TCxJQUE4RyxRQUFyQkEsRUFBQXFELFVBQUFDLE9BQUEsR0FBcUJyRCxFQUFBOGMsU0FBQWxPLE9BQXNCLEtBQUE3TyxFQUFBLENBQWFKLEVBQUE0SSxNQUFBeEksR0FBVyxRQUFBRCxFQUFBLEVBQVlBLEVBQUFDLEVBQUlELElBQUFILEVBQUFHLEdBQUFzRCxVQUFBdEQsRUFBQSxHQUF3QkUsRUFBQThjLFNBQUFuZCxFQUFhLE9BQU9pdkMsU0FBQXB0QyxFQUFBNkQsS0FBQXNHLEVBQUF0RyxLQUFBcEUsSUFBQTZyQyxFQUFBeUIsSUFBQXhCLEVBQUEvZixNQUFBaHRCLEVBQUE2dUMsT0FBQTdCLElBQXFEc0UsY0FBQSxTQUFBM2xDLEdBQTJCLElBQUFDLEVBQUE4aUMsRUFBQXh0QyxLQUFBLEtBQUF5SyxHQUE4QixPQUFUQyxFQUFBdkcsS0FBQXNHLEVBQVNDLEdBQVMybEMsZUFBQXpDLEVBQUEwQyxRQUFBLFNBQ2hlQyx3QkFBQWxGLEVBQUFtRixrQkFBQXBGLEVBQUFxRixtREFBQSxDQUFrR0Msa0JBQUF6RCxFQUFBdHNDLE9BQUF1cUMsSUFBOEJ5RixFQUFBLENBQUlDLFFBQUFqQyxHQUFVa0MsRUFBQUYsR0FBQWhDLEdBQUFnQyxFQUFXcHlDLEVBQUFELFFBQUF1eUMsRUFBQUQsU0FBQUM7Ozs7Ozs7O0dDWDVJLElBQUE3RSxFQUFPNXRDLEVBQVEsR0FBTzZCLEVBQUk3QixFQUFRLEdBQWVzd0MsRUFBS3R3QyxFQUFRLEdBQzNFLFNBQUFzQixFQUFBK0ssR0FBYyxRQUFBQyxFQUFBeEksVUFBQUMsT0FBQSxFQUFBdEQsRUFBQSx5REFBQTRMLEVBQUEzTCxFQUFBLEVBQThGQSxFQUFBNEwsRUFBSTVMLElBQUFELEdBQUEsV0FBQWdoQyxtQkFBQTM5QixVQUFBcEQsRUFBQSxLQUR4QixTQUFBMkwsRUFBQUMsRUFBQTdMLEVBQUFDLEVBQUE0TyxFQUFBbytCLEVBQUFGLEVBQUFDLEdBQTZCLElBQUFwaEMsRUFBQSxDQUFnQixHQUFUQSxPQUFBLE9BQVMsSUFBQUMsRUFBQUQsRUFBQTVILE1BQUEscUlBQXVKLENBQUssSUFBQXFvQyxFQUFBLENBQUFyc0MsRUFBQUMsRUFBQTRPLEVBQUFvK0IsRUFBQUYsRUFBQUMsR0FBQXB0QyxFQUFBLEdBQXdCZ00sRUFBQTVILE1BQUE2SCxFQUFBL0MsUUFBQSxpQkFBbUMsT0FBQXVqQyxFQUFBenNDLFNBQWlCTSxLQUFBLHNCQUE2QyxNQUFoQjBMLEVBQUFzaEMsWUFBQSxFQUFnQnRoQyxHQUNyUDhqQyxFQUFBLDJCQUFBOWpDLEVBQUEsNEhBQW1DNUwsR0FBNkhtdEMsR0FBQXRzQyxFQUFBLE9BQ3JVLElBQUFveEMsR0FBQSxFQUFBQyxFQUFBLEtBQUFDLEdBQUEsRUFBQUMsRUFBQSxLQUFBQyxFQUFBLENBQW9DQyxRQUFBLFNBQUExbUMsR0FBb0JxbUMsR0FBQSxFQUFNQyxFQUFBdG1DLElBQU8sU0FBQTJtQyxFQUFBM21DLEVBQUFDLEVBQUE3TCxFQUFBQyxFQUFBNE8sRUFBQW8rQixFQUFBRixFQUFBQyxFQUFBWCxHQUErQjRGLEdBQUEsRUFBTUMsRUFBQSxLQUQ4TyxTQUFBdG1DLEVBQUFDLEVBQUE3TCxFQUFBQyxFQUFBNE8sRUFBQW8rQixFQUFBRixFQUFBQyxFQUFBWCxHQUErQixJQUFBenNDLEVBQUE0SSxNQUFBakgsVUFBQWdELE1BQUF6RSxLQUFBdUQsVUFBQSxHQUE4QyxJQUFJd0ksRUFBQXJFLE1BQUF4SCxFQUFBSixHQUFhLE1BQUFHLEdBQVNtRSxLQUFBb3VDLFFBQUF2eUMsS0FDN1V5SCxNQUFBNnFDLEVBQUFodkMsV0FBNkosSUFBQW12QyxFQUFBLEtBQUFDLEVBQUEsR0FDL1EsU0FBQUMsSUFBYyxHQUFBRixFQUFBLFFBQUE1bUMsS0FBQTZtQyxFQUFBLENBQXVCLElBQUE1bUMsRUFBQTRtQyxFQUFBN21DLEdBQUE1TCxFQUFBd3lDLEVBQUE5dEMsUUFBQWtILEdBQWtELElBQXRCLEVBQUE1TCxHQUFBYSxFQUFBLEtBQUErSyxJQUFzQittQyxFQUFBM3lDLEdBQW1FLFFBQUFDLEtBQXhENEwsRUFBQSttQyxlQUFBL3hDLEVBQUEsS0FBQStLLEdBQWlDK21DLEVBQUEzeUMsR0FBQTZMLEVBQVE3TCxFQUFBNkwsRUFBQWduQyxXQUFlLENBQWdCLElBQUFoa0MsT0FBQSxFQUFhbytCLEVBQUFqdEMsRUFBQUMsR0FBQThzQyxFQUFBbGhDLEVBQUFtaEMsRUFBQS9zQyxFQUFtQjZ5QyxFQUFBdHhDLGVBQUF3ckMsSUFBQW5zQyxFQUFBLEtBQUFtc0MsR0FBc0M4RixFQUFBOUYsR0FBQUMsRUFBUSxJQUFBWixFQUFBWSxFQUFBOEYsd0JBQWdDLEdBQUExRyxFQUFBLENBQU0sSUFBQXg5QixLQUFBdzlCLElBQUE3cUMsZUFBQXFOLElBQUFta0MsRUFBQTNHLEVBQUF4OUIsR0FBQWsrQixFQUFBQyxHQUE2Q24rQixHQUFBLE9BQUtvK0IsRUFBQWdHLGtCQUFBRCxFQUFBL0YsRUFBQWdHLGlCQUFBbEcsRUFBQUMsR0FBQW4rQixHQUFBLEdBQUFBLEdBQUEsRUFBK0RBLEdBQUFoTyxFQUFBLEtBQUFaLEVBQUEyTCxLQUMvWSxTQUFBb25DLEVBQUFwbkMsRUFBQUMsRUFBQTdMLEdBQW1Ca3pDLEVBQUF0bkMsSUFBQS9LLEVBQUEsTUFBQStLLEdBQXdCc25DLEVBQUF0bkMsR0FBQUMsRUFBUXNuQyxFQUFBdm5DLEdBQUFDLEVBQUFnbkMsV0FBQTd5QyxHQUFBb3pDLGFBQW1DLElBQUFULEVBQUEsR0FBQUcsRUFBQSxHQUFlSSxFQUFBLEdBQU1DLEVBQUEsR0FBTUUsRUFBQSxLQUFBQyxFQUFBLEtBQUFDLEVBQUEsS0FBeUIsU0FBQUMsRUFBQTVuQyxFQUFBQyxFQUFBN0wsR0FBbUIsSUFBQUMsRUFBQTJMLEVBQUF0RyxNQUFBLGdCQUE4QnNHLEVBQUFpZ0IsY0FBQTBuQixFQUFBdnpDLEdBRmxELFNBQUE0TCxFQUFBQyxFQUFBN0wsRUFBQUMsRUFBQTRPLEVBQUFvK0IsRUFBQUYsRUFBQUMsRUFBQVgsR0FBd0QsR0FBekJrRyxFQUFBL3FDLE1BQUF0RCxLQUFBYixXQUF5QjR1QyxFQUFBLENBQU8sR0FBQUEsRUFBQSxDQUFPLElBQUFyeUMsRUFBQXN5QyxFQUFTRCxHQUFBLEVBQU1DLEVBQUEsVUFBUXJ4QyxFQUFBLE9BQUFqQixPQUFBLEVBQXVCdXlDLE9BQUEsRUFBQUMsRUFBQXh5QyxJQUU1QzZ6QyxDQUFBeHpDLEVBQUE0TCxPQUFBLEVBQUFELEdBQWlCQSxFQUFBaWdCLGNBQUEsS0FBcUIsU0FBQTZuQixFQUFBOW5DLEVBQUFDLEdBQXdDLE9BQXZCLE1BQUFBLEdBQUFoTCxFQUFBLE1BQXVCLE1BQUErSyxFQUFBQyxFQUFvQnJELE1BQUFDLFFBQUFtRCxHQUFxQnBELE1BQUFDLFFBQUFvRCxJQUFBRCxFQUFBbkgsS0FBQStDLE1BQUFvRSxFQUFBQyxHQUFBRCxJQUErQ0EsRUFBQW5ILEtBQUFvSCxHQUFVRCxHQUFTcEQsTUFBQUMsUUFBQW9ELEdBQUEsQ0FBQUQsR0FBQXBILE9BQUFxSCxHQUFBLENBQUFELEVBQUFDLEdBQzFZLFNBQUE4bkMsRUFBQS9uQyxFQUFBQyxFQUFBN0wsR0FBbUJ3SSxNQUFBQyxRQUFBbUQsS0FBQXBKLFFBQUFxSixFQUFBN0wsR0FBQTRMLEdBQUFDLEVBQUEvTCxLQUFBRSxFQUFBNEwsR0FBK0MsSUFBQWdvQyxFQUFBLEtBQVksU0FBQUMsRUFBQWpvQyxHQUFlLEdBQUFBLEVBQUEsQ0FBTSxJQUFBQyxFQUFBRCxFQUFBa29DLG1CQUFBOXpDLEVBQUE0TCxFQUFBbW9DLG1CQUFrRCxHQUFBdnJDLE1BQUFDLFFBQUFvRCxHQUFBLFFBQUE1TCxFQUFBLEVBQWdDQSxFQUFBNEwsRUFBQXZJLFNBQUFzSSxFQUFBZ2dCLHVCQUFzQzNyQixJQUFBdXpDLEVBQUE1bkMsRUFBQUMsRUFBQTVMLEdBQUFELEVBQUFDLFNBQW9CNEwsR0FBQTJuQyxFQUFBNW5DLEVBQUFDLEVBQUE3TCxHQUFrQjRMLEVBQUFrb0MsbUJBQUEsS0FBMEJsb0MsRUFBQW1vQyxtQkFBQSxLQUEwQm5vQyxFQUFBb29DLGdCQUFBcG9DLEVBQUEvRSxZQUFBb3RDLFFBQUFyb0MsSUFDclQsSUFBQXNvQyxFQUFBLENBQVFDLHVCQUFBLFNBQUF2b0MsR0FBbUM0bUMsR0FBQTN4QyxFQUFBLE9BQW1CMnhDLEVBQUFocUMsTUFBQWpILFVBQUFnRCxNQUFBekUsS0FBQThMLEdBQWlDOG1DLEtBQUswQix5QkFBQSxTQUFBeG9DLEdBQXNDLElBQUE1TCxFQUFBNkwsR0FBQSxFQUFXLElBQUE3TCxLQUFBNEwsRUFBQSxHQUFBQSxFQUFBcEssZUFBQXhCLEdBQUEsQ0FBbUMsSUFBQUMsRUFBQTJMLEVBQUE1TCxHQUFXeXlDLEVBQUFqeEMsZUFBQXhCLElBQUF5eUMsRUFBQXp5QyxLQUFBQyxJQUFBd3lDLEVBQUF6eUMsSUFBQWEsRUFBQSxNQUFBYixHQUFBeXlDLEVBQUF6eUMsR0FBQUMsRUFBQTRMLEdBQUEsR0FBd0VBLEdBQUE2bUMsTUFDM1EsU0FBQTJCLEVBQUF6b0MsRUFBQUMsR0FBaUIsSUFBQTdMLEVBQUE0TCxFQUFBMG9DLFVBQWtCLElBQUF0MEMsRUFBQSxZQUFrQixJQUFBQyxFQUFBb3pDLEVBQUFyekMsR0FBWSxJQUFBQyxFQUFBLFlBQWtCRCxFQUFBQyxFQUFBNEwsR0FBT0QsRUFBQSxPQUFBQyxHQUFZLGdOQUFBNUwsS0FBQXdPLFlBQUF4TyxJQUFBLFlBQUEyTCxJQUFBdEcsT0FBQSxVQUFBc0csR0FBQSxXQUFBQSxHQUFBLGFBQUFBLElBQWtUQSxHQUFBM0wsRUFBSyxNQUFBMkwsRUFBUSxRQUFBQSxHQUFBLEVBQWEsT0FBQUEsRUFBQSxNQUFpQjVMLEdBQUEsbUJBQUFBLEdBQUFhLEVBQUEsTUFBQWdMLFNBQUE3TCxHQUNuY0EsR0FBUyxTQUFBdTBDLEVBQUEzb0MsR0FBb0QsR0FBckMsT0FBQUEsSUFBQWdvQyxFQUFBRixFQUFBRSxFQUFBaG9DLElBQXdCQSxFQUFBZ29DLEVBQUtBLEVBQUEsS0FBUWhvQyxJQUFBK25DLEVBQUEvbkMsRUFBQWlvQyxHQUFBRCxHQUFBL3lDLEVBQUEsTUFBQXN4QyxHQUFBLE1BQUF2bUMsRUFBQXdtQyxFQUFBRCxHQUFBLEVBQUFDLEVBQUEsS0FBQXhtQyxFQUFrRSxJQUFBNG9DLEVBQUE1ckMsS0FBQUMsU0FBQWpFLFNBQUEsSUFBQUwsTUFBQSxHQUFBa3dDLEVBQUEsMkJBQUFELEVBQUFFLEVBQUEsd0JBQUFGLEVBQTBHLFNBQUFHLEVBQUEvb0MsR0FBZSxHQUFBQSxFQUFBNm9DLEdBQUEsT0FBQTdvQyxFQUFBNm9DLEdBQXNCLE1BQUs3b0MsRUFBQTZvQyxJQUFPLEtBQUE3b0MsRUFBQTFGLFdBQWdDLFlBQWhDMEYsSUFBQTFGLFdBQXlELFlBQVIwRixJQUFBNm9DLElBQVEvaEMsS0FBQSxJQUFBOUcsRUFBQThHLElBQUE5RyxFQUFBLEtBQW1DLFNBQUFncEMsRUFBQWhwQyxHQUF1QixRQUFSQSxJQUFBNm9DLEtBQVEsSUFBQTdvQyxFQUFBOEcsS0FBQSxJQUFBOUcsRUFBQThHLElBQUEsS0FBQTlHLEVBQzdZLFNBQUFpcEMsRUFBQWpwQyxHQUFlLE9BQUFBLEVBQUE4RyxLQUFBLElBQUE5RyxFQUFBOEcsSUFBQSxPQUFBOUcsRUFBQTBvQyxVQUEyQ3p6QyxFQUFBLE1BQVEsU0FBQWkwQyxFQUFBbHBDLEdBQWUsT0FBQUEsRUFBQThvQyxJQUFBLEtBQW1CLFNBQUFLLEVBQUFucEMsR0FBZSxHQUFBQSxJQUFBb3BDLGFBQWNwcEMsR0FBQSxJQUFBQSxFQUFBOEcsS0FBb0IsT0FBQTlHLEdBQUEsS0FBZ0IsU0FBQXFwQyxFQUFBcnBDLEVBQUFDLEVBQUE3TCxJQUFtQjZMLEVBQUF3b0MsRUFBQXpvQyxFQUFBNUwsRUFBQWsxQyxlQUFBbkMsd0JBQUFsbkMsT0FBQTdMLEVBQUE4ekMsbUJBQUFKLEVBQUExekMsRUFBQTh6QyxtQkFBQWpvQyxHQUFBN0wsRUFBQSt6QyxtQkFBQUwsRUFBQTF6QyxFQUFBK3pDLG1CQUFBbm9DLElBQ3hMLFNBQUF1cEMsRUFBQXZwQyxHQUFlLEdBQUFBLEtBQUFzcEMsZUFBQW5DLHdCQUFBLENBQWdELFFBQUFsbkMsRUFBQUQsRUFBQXdwQyxZQUFBcDFDLEVBQUEsR0FBNkI2TCxHQUFFN0wsRUFBQXlFLEtBQUFvSCxLQUFBa3BDLEVBQUFscEMsR0FBbUIsSUFBQUEsRUFBQTdMLEVBQUFzRCxPQUFlLEVBQUF1SSxLQUFNb3BDLEVBQUFqMUMsRUFBQTZMLEdBQUEsV0FBQUQsR0FBdUIsSUFBQUMsRUFBQSxFQUFRQSxFQUFBN0wsRUFBQXNELE9BQVd1SSxJQUFBb3BDLEVBQUFqMUMsRUFBQTZMLEdBQUEsVUFBQUQsSUFBMEIsU0FBQXlwQyxFQUFBenBDLEVBQUFDLEVBQUE3TCxHQUFtQjRMLEdBQUE1TCxLQUFBazFDLGVBQUFqQyxtQkFBQXBuQyxFQUFBd29DLEVBQUF6b0MsRUFBQTVMLEVBQUFrMUMsZUFBQWpDLHFCQUFBanpDLEVBQUE4ekMsbUJBQUFKLEVBQUExekMsRUFBQTh6QyxtQkFBQWpvQyxHQUFBN0wsRUFBQSt6QyxtQkFBQUwsRUFBQTF6QyxFQUFBK3pDLG1CQUFBbm9DLElBQXdMLFNBQUEwcEMsRUFBQTFwQyxHQUFlQSxLQUFBc3BDLGVBQUFqQyxrQkFBQW9DLEVBQUF6cEMsRUFBQXdwQyxZQUFBLEtBQUF4cEMsR0FDcGEsU0FBQTJwQyxFQUFBM3BDLEdBQWUrbkMsRUFBQS9uQyxFQUFBdXBDLEdBQVMsSUFBQUssSUFBQSxvQkFBQXZ4QyxnQkFBQUgsV0FBQUcsT0FBQUgsU0FBQWdDLGVBQXdGLFNBQUEydkMsRUFBQTdwQyxFQUFBQyxHQUFpQixJQUFBN0wsRUFBQSxHQUF3RixPQUEvRUEsRUFBQTRMLEVBQUExQixlQUFBMkIsRUFBQTNCLGNBQW1DbEssRUFBQSxTQUFBNEwsR0FBQSxTQUFBQyxFQUF5QjdMLEVBQUEsTUFBQTRMLEdBQUEsTUFBQUMsRUFBbUI3TCxFQUFTLElBQUEwMUMsRUFBQSxDQUFRQyxhQUFBRixFQUFBLDRCQUFBRyxtQkFBQUgsRUFBQSxrQ0FBQUksZUFBQUosRUFBQSw4QkFBQUssY0FBQUwsRUFBQSwrQkFBbU1NLEVBQUEsR0FBTUMsRUFBQSxHQUMvTCxTQUFBQyxFQUFBcnFDLEdBQWUsR0FBQW1xQyxFQUFBbnFDLEdBQUEsT0FBQW1xQyxFQUFBbnFDLEdBQXNCLElBQUE4cEMsRUFBQTlwQyxHQUFBLE9BQUFBLEVBQW1CLElBQUE1TCxFQUFBNkwsRUFBQTZwQyxFQUFBOXBDLEdBQWMsSUFBQTVMLEtBQUE2TCxFQUFBLEdBQUFBLEVBQUFySyxlQUFBeEIsU0FBQWcyQyxFQUFBLE9BQUFELEVBQUFucUMsR0FBQUMsRUFBQTdMLEdBQTZELE9BQUE0TCxFQUF2WDRwQyxJQUFBUSxFQUFBbHlDLFNBQUFnQyxjQUFBLE9BQUErZixNQUFBLG1CQUFBNWhCLGdCQUFBeXhDLEVBQUFDLGFBQUE1YixpQkFBQTJiLEVBQUFFLG1CQUFBN2IsaUJBQUEyYixFQUFBRyxlQUFBOWIsV0FBQSxvQkFBQTkxQixlQUFBeXhDLEVBQUFJLGNBQUFJLFlBQ0EsSUFBQUMsRUFBQUYsRUFBQSxnQkFBQUcsRUFBQUgsRUFBQSxzQkFBQUksRUFBQUosRUFBQSxrQkFBQUssR0FBQUwsRUFBQSxpQkFBQU0sR0FBQSxzTkFBQWgwQyxNQUFBLEtBQUFpMEMsR0FBQSxLQUFBQyxHQUFBLEtBQUFDLEdBQUEsS0FDQSxTQUFBQyxLQUFjLEdBQUFELEdBQUEsT0FBQUEsR0FBZ0IsSUFBQTlxQyxFQUFBM0wsRUFBQTRMLEVBQUE0cUMsR0FBQXoyQyxFQUFBNkwsRUFBQXZJLE9BQUF1TCxFQUFBLFVBQUEybkMsTUFBQTUxQyxNQUFBNDFDLEdBQUFqaUMsWUFBQTA0QixFQUFBcCtCLEVBQUF2TCxPQUEwRSxJQUFBc0ksRUFBQSxFQUFRQSxFQUFBNUwsR0FBQTZMLEVBQUFELEtBQUFpRCxFQUFBakQsR0FBaUJBLEtBQUssSUFBQW1oQyxFQUFBL3NDLEVBQUE0TCxFQUFVLElBQUEzTCxFQUFBLEVBQVFBLEdBQUE4c0MsR0FBQWxoQyxFQUFBN0wsRUFBQUMsS0FBQTRPLEVBQUFvK0IsRUFBQWh0QyxHQUFzQkEsS0FBSyxPQUFBeTJDLEdBQUE3bkMsRUFBQXRLLE1BQUFxSCxFQUFBLEVBQUEzTCxFQUFBLEVBQUFBLE9BQUEsR0FBb0MsU0FBQTIyQyxLQUFjLFNBQVMsU0FBQUMsS0FBYyxTQUM1UCxTQUFBbkssR0FBQTlnQyxFQUFBQyxFQUFBN0wsRUFBQUMsR0FBNkcsUUFBQTRPLEtBQXpGM0ssS0FBQWd4QyxlQUFBdHBDLEVBQXNCMUgsS0FBQWt4QyxZQUFBdnBDLEVBQW1CM0gsS0FBQXFuQixZQUFBdnJCLEVBQW1CNEwsRUFBQTFILEtBQUEyQyxZQUFBaXdDLFVBQTZCbHJDLEVBQUFwSyxlQUFBcU4sTUFBQWhELEVBQUFELEVBQUFpRCxJQUFBM0ssS0FBQTJLLEdBQUFoRCxFQUFBN0wsR0FBQSxXQUFBNk8sRUFBQTNLLEtBQUFyQixPQUFBNUMsRUFBQWlFLEtBQUEySyxHQUFBN08sRUFBQTZPLElBQWdPLE9BQTVIM0ssS0FBQWdwQixvQkFBQSxNQUFBbHRCLEVBQUFtdEIsaUJBQUFudEIsRUFBQW10QixrQkFBQSxJQUFBbnRCLEVBQUFndEIsYUFBQTRwQixHQUFBQyxHQUErRjN5QyxLQUFBMG5CLHFCQUFBaXJCLEdBQTZCM3lDLEtBRzlFLFNBQUE2eUMsR0FBQW5yQyxFQUFBQyxFQUFBN0wsRUFBQUMsR0FBcUIsR0FBQWlFLEtBQUE4eUMsVUFBQTF6QyxPQUFBLENBQTBCLElBQUF1TCxFQUFBM0ssS0FBQTh5QyxVQUFBbHJDLE1BQWdELE9BQXJCNUgsS0FBQXBFLEtBQUErTyxFQUFBakQsRUFBQUMsRUFBQTdMLEVBQUFDLEdBQXFCNE8sRUFBUyxXQUFBM0ssS0FBQTBILEVBQUFDLEVBQUE3TCxFQUFBQyxHQUF5QixTQUFBZzNDLEdBQUFyckMsR0FBZUEsYUFBQTFILE1BQUFyRCxFQUFBLE9BQWtDK0ssRUFBQXNyQyxhQUFlLEdBQUFoekMsS0FBQTh5QyxVQUFBMXpDLFFBQUFZLEtBQUE4eUMsVUFBQXZ5QyxLQUFBbUgsR0FDaGMsU0FBQXVyQyxHQUFBdnJDLEdBQWVBLEVBQUFvckMsVUFBQSxHQUFlcHJDLEVBQUF3ckMsVUFBQUwsR0FBZW5yQyxFQUFBcW9DLFFBQUFnRCxHQUg3QzcxQyxFQUFBc3JDLEdBQUFuckMsVUFBQSxDQUFleXFCLGVBQUEsV0FBMEI5bkIsS0FBQWlwQixrQkFBQSxFQUF5QixJQUFBdmhCLEVBQUExSCxLQUFBcW5CLFlBQXVCM2YsTUFBQW9nQixlQUFBcGdCLEVBQUFvZ0IsaUJBQUEsa0JBQUFwZ0IsRUFBQW9oQixjQUFBcGhCLEVBQUFvaEIsYUFBQSxHQUFBOW9CLEtBQUFncEIsbUJBQUEwcEIsS0FBeUgzcUIsZ0JBQUEsV0FBNEIsSUFBQXJnQixFQUFBMUgsS0FBQXFuQixZQUF1QjNmLE1BQUFxZ0IsZ0JBQUFyZ0IsRUFBQXFnQixrQkFBQSxrQkFBQXJnQixFQUFBeXJDLGVBQUF6ckMsRUFBQXlyQyxjQUFBLEdBQUFuekMsS0FBQTBuQixxQkFBQWdyQixLQUErSFUsUUFBQSxXQUFvQnB6QyxLQUFBOHZDLGFBQUE0QyxJQUFxQjVDLGFBQUE2QyxHQUFBSyxXQUFBLFdBQXVDLElBQ3BkcnJDLEVBRG9kRCxFQUFBMUgsS0FBQTJDLFlBQUFpd0MsVUFDbGQsSUFBQWpyQyxLQUFBRCxFQUFBMUgsS0FBQTJILEdBQUEsS0FBd0IzSCxLQUFBcW5CLFlBQUFybkIsS0FBQWt4QyxZQUFBbHhDLEtBQUFneEMsZUFBQSxLQUEyRGh4QyxLQUFBMG5CLHFCQUFBMW5CLEtBQUFncEIsbUJBQUEycEIsR0FBcUQzeUMsS0FBQTZ2QyxtQkFBQTd2QyxLQUFBNHZDLG1CQUFBLFFBQXdEcEgsR0FBQW9LLFVBQUEsQ0FBYXh4QyxLQUFBLEtBQUF6QyxPQUFBLEtBQUFncEIsY0FBQSxXQUErQyxhQUFZa0MsV0FBQSxLQUFBTCxRQUFBLEtBQUFDLFdBQUEsS0FBQU4sVUFBQSxTQUFBemhCLEdBQW9FLE9BQUFBLEVBQUF5aEIsV0FBQWxpQixLQUFBbWlCLE9BQStCSCxpQkFBQSxLQUFBb3FCLFVBQUEsTUFDN1c3SyxHQUFBemtDLE9BQUEsU0FBQTJELEdBQXFCLFNBQUFDLEtBQWMsU0FBQTdMLElBQWEsT0FBQUMsRUFBQXVILE1BQUF0RCxLQUFBYixXQUErQixJQUFBcEQsRUFBQWlFLEtBQVcySCxFQUFBdEssVUFBQXRCLEVBQUFzQixVQUF3QixJQUFBc04sRUFBQSxJQUFBaEQsRUFBNkgsT0FBakh6SyxFQUFBeU4sRUFBQTdPLEVBQUF1QixXQUFpQnZCLEVBQUF1QixVQUFBc04sRUFBYzdPLEVBQUF1QixVQUFBc0YsWUFBQTdHLEVBQTBCQSxFQUFBODJDLFVBQUExMUMsRUFBQSxHQUFnQm5CLEVBQUE2MkMsVUFBQWxyQyxHQUFnQjVMLEVBQUFpSSxPQUFBaEksRUFBQWdJLE9BQWtCa3ZDLEdBQUFuM0MsR0FBTUEsR0FBVW0zQyxHQUFBekssSUFDL0wsSUFBQThLLEdBQUE5SyxHQUFBemtDLE9BQUEsQ0FBaUJpYyxLQUFBLE9BQVV1ekIsR0FBQS9LLEdBQUF6a0MsT0FBQSxDQUFlaWMsS0FBQSxPQUFVd3pCLEdBQUEsYUFBQUMsR0FBQW5DLEdBQUEscUJBQUF2eEMsT0FBQTJ6QyxHQUFBLEtBQTZEcEMsR0FBQSxpQkFBQTF4QyxXQUFBOHpDLEdBQUE5ekMsU0FBQSt6QyxjQUMzSyxJQUFBQyxHQUFBdEMsR0FBQSxjQUFBdnhDLFNBQUEyekMsR0FBQUcsR0FBQXZDLEtBQUFtQyxJQUFBQyxJQUFBLEVBQUFBLElBQUEsSUFBQUEsSUFBQUksR0FBQWgyQyxPQUFBRyxhQUFBLElBQUE4MUMsR0FBQSxDQUFtR0MsWUFBQSxDQUFhbkYsd0JBQUEsQ0FBeUJvRixRQUFBLGdCQUFBQyxTQUFBLHdCQUF3RGhGLGFBQUEsbURBQWdFaUYsZUFBQSxDQUFpQnRGLHdCQUFBLENBQXlCb0YsUUFBQSxtQkFBQUMsU0FBQSwyQkFBOERoRixhQUFBLHVEQUFBN3dDLE1BQUEsTUFBZ0YrMUMsaUJBQUEsQ0FBbUJ2Rix3QkFBQSxDQUF5Qm9GLFFBQUEscUJBQ3JlQyxTQUFBLDZCQUFxQ2hGLGFBQUEseURBQUE3d0MsTUFBQSxNQUFrRmcyQyxrQkFBQSxDQUFvQnhGLHdCQUFBLENBQXlCb0YsUUFBQSxzQkFBQUMsU0FBQSw4QkFBb0VoRixhQUFBLDBEQUFBN3dDLE1BQUEsT0FBb0ZpMkMsSUFBQSxFQUM1VCxTQUFBQyxHQUFBN3NDLEVBQUFDLEdBQWlCLE9BQUFELEdBQVUsdUJBQUE4ckMsR0FBQWh6QyxRQUFBbUgsRUFBQTBpQixTQUE4QywyQkFBQTFpQixFQUFBMGlCLFFBQXNDLG1EQUFzRCxrQkFBa0IsU0FBQW1xQixHQUFBOXNDLEdBQTBCLHVCQUFYQSxJQUFBa2lCLFNBQVcsU0FBQWxpQixJQUFBc1ksS0FBQSxLQUFrRCxJQUFBeTBCLElBQUEsRUFFblEsSUFBQUMsR0FBQSxDQUFRL0YsV0FBQW9GLEdBQUFyRixjQUFBLFNBQUFobkMsRUFBQUMsRUFBQTdMLEVBQUFDLEdBQThDLElBQUE0TyxPQUFBLEVBQWFvK0IsT0FBQSxFQUFhLEdBQUEwSyxHQUFBOXJDLEVBQUEsQ0FBUyxPQUFBRCxHQUFVLHVCQUFBaUQsRUFBQW9wQyxHQUFBSyxpQkFBOEMsTUFBQXpzQyxFQUFRLHFCQUFBZ0QsRUFBQW9wQyxHQUFBSSxlQUEwQyxNQUFBeHNDLEVBQVEsd0JBQUFnRCxFQUFBb3BDLEdBQUFNLGtCQUFnRCxNQUFBMXNDLEVBQVFnRCxPQUFBLE9BQVM4cEMsR0FBQUYsR0FBQTdzQyxFQUFBNUwsS0FBQTZPLEVBQUFvcEMsR0FBQUksZ0JBQUEsWUFBQXpzQyxHQUFBLE1BQUE1TCxFQUFBdXVCLFVBQUExZixFQUFBb3BDLEdBQUFLLGtCQUMvRixPQUQ4THpwQyxHQUFBa3BDLElBQUEsT0FBQS8zQyxFQUFBNjRDLFNBQUFGLElBQUE5cEMsSUFBQW9wQyxHQUFBSyxpQkFBQXpwQyxJQUFBb3BDLEdBQUFJLGdCQUFBTSxLQUFBMUwsRUFBQTBKLE9BQUFGLEdBQUEsVUFBQUQsR0FBQXYyQyxHQUFBdTJDLEdBQUE1MUMsTUFBQTQxQyxHQUFBamlDLFlBQUFva0MsSUFDM1csSUFBQTlwQyxFQUFBMm9DLEdBQUFKLFVBQUF2b0MsRUFBQWhELEVBQUE3TCxFQUFBQyxHQUFBZ3RDLEVBQUFwK0IsRUFBQXFWLEtBQUErb0IsRUFBQSxRQUFBQSxFQUFBeUwsR0FBQTE0QyxNQUFBNk8sRUFBQXFWLEtBQUErb0IsR0FBQXNJLEVBQUExbUMsR0FBQW8rQixFQUFBcCtCLEdBQUFvK0IsRUFBQSxNQUF5RnJoQyxFQUFBa3NDLEdBSG9MLFNBQUFsc0MsRUFBQUMsR0FBaUIsT0FBQUQsR0FBVSw0QkFBQThzQyxHQUFBN3NDLEdBQW1DLDJCQUFBQSxFQUFBdWpCLE1BQUEsTUFBNENvcEIsSUFBQSxFQUFNUixJQUFVLHVCQUFBcHNDLEVBQUFDLEVBQUFxWSxRQUFBOHpCLElBQUFRLEdBQUEsS0FBQTVzQyxFQUFtRCxxQkFHaldrdEMsQ0FBQWx0QyxFQUFBNUwsR0FGekYsU0FBQTRMLEVBQUFDLEdBQWlCLEdBQUE4c0MsR0FBQSx5QkFBQS9zQyxJQUFBK3JDLElBQUFjLEdBQUE3c0MsRUFBQUMsSUFBQUQsRUFBQStxQyxLQUFBRCxHQUFBRCxHQUFBRCxHQUFBLEtBQUFtQyxJQUFBLEVBQUEvc0MsR0FBQSxLQUFtRixPQUFBQSxHQUFVLHdCQUF5QixvQkFBQUMsRUFBQWdpQixTQUFBaGlCLEVBQUE0aEIsUUFBQTVoQixFQUFBbWlCLFVBQUFuaUIsRUFBQWdpQixTQUFBaGlCLEVBQUE0aEIsT0FBQSxDQUEyRSxHQUFBNWhCLEVBQUF3aUIsTUFBQSxFQUFBeGlCLEVBQUF3aUIsS0FBQS9xQixPQUFBLE9BQUF1SSxFQUFBd2lCLEtBQXlDLEdBQUF4aUIsRUFBQXVqQixNQUFBLE9BQUFwdEIsT0FBQUcsYUFBQTBKLEVBQUF1akIsT0FBK0MsWUFBWSw0QkFBQTJvQixJQUFBLE9BQUFsc0MsRUFBQWd0QyxPQUFBLEtBQUFodEMsRUFBQXFZLEtBQTZELHFCQUUxUjYwQixDQUFBbnRDLEVBQUE1TCxNQUFBNkwsRUFBQTRyQyxHQUFBTCxVQUFBYSxHQUFBQyxZQUFBcnNDLEVBQUE3TCxFQUFBQyxJQUFBaWtCLEtBQUF0WSxFQUFBMnBDLEVBQUExcEMsTUFBQSxLQUFvRixPQUFBb2hDLEVBQUFwaEMsRUFBQSxPQUFBQSxFQUFBb2hDLEVBQUEsQ0FBQUEsRUFBQXBoQyxLQUFvQ210QyxHQUFBLEtBQUFDLEdBQUEsS0FBQUMsR0FBQSxLQUF5QixTQUFBQyxHQUFBdnRDLEdBQWUsR0FBQUEsRUFBQTBuQyxFQUFBMW5DLEdBQUEsQ0FBWSxtQkFBQW90QyxJQUFBbjRDLEVBQUEsT0FBdUMsSUFBQWdMLEVBQUF3bkMsRUFBQXpuQyxFQUFBMG9DLFdBQXNCMEUsR0FBQXB0QyxFQUFBMG9DLFVBQUExb0MsRUFBQXRHLEtBQUF1RyxJQUEwQixTQUFBdXRDLEdBQUF4dEMsR0FBZXF0QyxHQUFBQyxNQUFBejBDLEtBQUFtSCxHQUFBc3RDLEdBQUEsQ0FBQXR0QyxHQUFBcXRDLEdBQUFydEMsRUFBNkIsU0FBQXl0QyxLQUFjLEdBQUFKLEdBQUEsQ0FBTyxJQUFBcnRDLEVBQUFxdEMsR0FBQXB0QyxFQUFBcXRDLEdBQStCLEdBQWpCQSxHQUFBRCxHQUFBLEtBQVdFLEdBQUF2dEMsR0FBTUMsRUFBQSxJQUFBRCxFQUFBLEVBQWFBLEVBQUFDLEVBQUF2SSxPQUFXc0ksSUFBQXV0QyxHQUFBdHRDLEVBQUFELEtBQ3BkLFNBQUEwdEMsR0FBQTF0QyxFQUFBQyxHQUFpQixPQUFBRCxFQUFBQyxHQUFZLFNBQUEwdEMsR0FBQTN0QyxFQUFBQyxFQUFBN0wsR0FBbUIsT0FBQTRMLEVBQUFDLEVBQUE3TCxHQUFjLFNBQUF3NUMsTUFBZSxJQUFBQyxJQUFBLEVBQVUsU0FBQUMsR0FBQTl0QyxFQUFBQyxHQUFpQixHQUFBNHRDLEdBQUEsT0FBQTd0QyxFQUFBQyxHQUFrQjR0QyxJQUFBLEVBQU0sSUFBSSxPQUFBSCxHQUFBMXRDLEVBQUFDLEdBQWUsUUFBUTR0QyxJQUFBLFVBQUFSLElBQUEsT0FBQUMsTUFBQU0sS0FBQUgsT0FBeUMsSUFBQU0sR0FBQSxDQUFRQyxPQUFBLEVBQUFDLE1BQUEsRUFBQUMsVUFBQSxFQUFBQyxrQkFBQSxFQUFBQyxPQUFBLEVBQUFDLE9BQUEsRUFBQUMsUUFBQSxFQUFBMWhDLFVBQUEsRUFBQTJoQyxPQUFBLEVBQUFDLFFBQUEsRUFBQUMsS0FBQSxFQUFBdDBDLE1BQUEsRUFBQWszQixNQUFBLEVBQUE2RixLQUFBLEVBQUF3WCxNQUFBLEdBQW1KLFNBQUFDLEdBQUEzdUMsR0FBZSxJQUFBQyxFQUFBRCxLQUFBaUUsVUFBQWpFLEVBQUFpRSxTQUFBM0YsY0FBOEMsZ0JBQUEyQixJQUFBOHRDLEdBQUEvdEMsRUFBQXRHLE1BQUEsYUFBQXVHLEVBQzVaLFNBQUEydUMsR0FBQTV1QyxHQUF5RyxPQUExRkEsSUFBQS9JLFFBQUErSSxFQUFBNnVDLFlBQUF4MkMsUUFBaUN5MkMsMEJBQUE5dUMsSUFBQTh1Qyx5QkFBeUQsSUFBQTl1QyxFQUFBekcsU0FBQXlHLEVBQUExRixXQUFBMEYsRUFBcUMsU0FBQSt1QyxHQUFBL3VDLEdBQWUsSUFBQTRwQyxFQUFBLFNBQXlCLElBQUEzcEMsR0FBVEQsRUFBQSxLQUFBQSxLQUFTOUgsU0FBZ0gsT0FBNUYrSCxPQUFBL0gsU0FBQWdDLGNBQUEsUUFBQWlLLGFBQUFuRSxFQUFBLFdBQTZEQyxFQUFBLG1CQUFBQSxFQUFBRCxJQUErQkMsRUFBUyxTQUFBK3VDLEdBQUFodkMsR0FBZSxJQUFBQyxFQUFBRCxFQUFBdEcsS0FBYSxPQUFBc0csSUFBQWlFLFdBQUEsVUFBQWpFLEVBQUExQixnQkFBQSxhQUFBMkIsR0FBQSxVQUFBQSxHQUV2VCxTQUFBZ3ZDLEdBQUFqdkMsR0FBZUEsRUFBQWt2QyxnQkFBQWx2QyxFQUFBa3ZDLGNBRG5DLFNBQUFsdkMsR0FBZSxJQUFBQyxFQUFBK3VDLEdBQUFodkMsR0FBQSxrQkFBQTVMLEVBQUFLLE9BQUEwNkMseUJBQUFudkMsRUFBQS9FLFlBQUF0RixVQUFBc0ssR0FBQTVMLEVBQUEsR0FBQTJMLEVBQUFDLEdBQXFHLElBQUFELEVBQUFwSyxlQUFBcUssU0FBQSxJQUFBN0wsR0FBQSxtQkFBQUEsRUFBQVEsS0FBQSxtQkFBQVIsRUFBQWlrQixJQUFBLENBQXVHLElBQUFwVixFQUFBN08sRUFBQVEsSUFBQXlzQyxFQUFBanRDLEVBQUFpa0IsSUFBaU0sT0FBN0s1akIsT0FBQUMsZUFBQXNMLEVBQUFDLEVBQUEsQ0FBMkJtWSxjQUFBLEVBQUF4akIsSUFBQSxXQUErQixPQUFBcU8sRUFBQS9PLEtBQUFvRSxPQUFvQitmLElBQUEsU0FBQXJZLEdBQWlCM0wsRUFBQSxHQUFBMkwsRUFBT3FoQyxFQUFBbnRDLEtBQUFvRSxLQUFBMEgsTUFBa0J2TCxPQUFBQyxlQUFBc0wsRUFBQUMsRUFBQSxDQUEyQnRMLFdBQUFQLEVBQUFPLGFBQTBCLENBQU95NkMsU0FBQSxXQUFvQixPQUFBLzZDLEdBQVNnN0MsU0FBQSxTQUFBcnZDLEdBQXNCM0wsRUFBQSxHQUFBMkwsR0FBT3N2QyxhQUFBLFdBQXlCdHZDLEVBQUFrdkMsY0FDdGYsWUFBS2x2QyxFQUFBQyxNQUE4QnN2QyxDQUFBdnZDLElBQXlDLFNBQUF3dkMsR0FBQXh2QyxHQUFlLElBQUFBLEVBQUEsU0FBZSxJQUFBQyxFQUFBRCxFQUFBa3ZDLGNBQXNCLElBQUFqdkMsRUFBQSxTQUFlLElBQUE3TCxFQUFBNkwsRUFBQW12QyxXQUFtQi82QyxFQUFBLEdBQTJELE9BQWxEMkwsSUFBQTNMLEVBQUEyNkMsR0FBQWh2QyxLQUFBK0wsUUFBQSxlQUFBL0wsRUFBQWhMLFFBQThDZ0wsRUFBQTNMLEtBQUlELElBQUE2TCxFQUFBb3ZDLFNBQUFydkMsSUFBQSxHQUM3TixJQUFBeXZDLEdBQUFsTyxFQUFBeUUsbURBQUEwSixHQUFBLGNBQUF4TyxHQUFBLG1CQUFBcHNDLGVBQUE0OUIsSUFBQWlkLEdBQUF6TyxHQUFBcHNDLE9BQUE0OUIsSUFBQSx1QkFBQWtkLEdBQUExTyxHQUFBcHNDLE9BQUE0OUIsSUFBQSxzQkFBQW1kLEdBQUEzTyxHQUFBcHNDLE9BQUE0OUIsSUFBQSx3QkFBQW9kLEdBQUE1TyxHQUFBcHNDLE9BQUE0OUIsSUFBQSwyQkFBQXFkLEdBQUE3TyxHQUFBcHNDLE9BQUE0OUIsSUFBQSx3QkFBQXNkLEdBQUE5TyxHQUFBcHNDLE9BQUE0OUIsSUFBQSx3QkFBQXVkLEdBQUEvTyxHQUFBcHNDLE9BQUE0OUIsSUFBQSx1QkFBQXdkLEdBQUFoUCxHQUFBcHNDLE9BQUE0OUIsSUFBQSwrQkFBQXlkLEdBQUFqUCxHQUFBcHNDLE9BQUE0OUIsSUFBQSwyQkFBQTBkLEdBQUFsUCxHQUFBcHNDLE9BQUE0OUIsSUFBQSxrQkFDQSxNQUFBMmQsR0FBQW5QLEdBQUFwc0MsT0FBQTQ5QixJQUFBLG9CQUFBNGQsR0FBQXBQLEdBQUFwc0MsT0FBQTQ5QixJQUFBLG9CQUFBNmQsR0FBQSxtQkFBQXo3QyxlQUFBdUosU0FBNkgsU0FBQW15QyxHQUFBeHdDLEdBQWUsY0FBQUEsR0FBQSxpQkFBQUEsRUFBQSxLQUEwRSxtQkFBN0JBLEVBQUF1d0MsSUFBQXZ3QyxFQUFBdXdDLEtBQUF2d0MsRUFBQSxlQUE2QkEsRUFBQSxLQUN0TixTQUFBeXdDLEdBQUF6d0MsR0FBZSxTQUFBQSxFQUFBLFlBQXVCLHNCQUFBQSxFQUFBLE9BQUFBLEVBQUEwd0MsYUFBQTF3QyxFQUFBMUwsTUFBQSxLQUE0RCxvQkFBQTBMLEVBQUEsT0FBQUEsRUFBZ0MsT0FBQUEsR0FBVSxLQUFBa3dDLEdBQUEsdUJBQStCLEtBQUFMLEdBQUEsaUJBQXlCLEtBQUFELEdBQUEsZUFBdUIsS0FBQUcsR0FBQSxpQkFBeUIsS0FBQUQsR0FBQSxtQkFBMkIsS0FBQU0sR0FBQSxpQkFBeUIsb0JBQUFwd0MsRUFBQSxPQUFBQSxFQUFBaWpDLFVBQTBDLEtBQUFnTixHQUFBLHlCQUFpQyxLQUFBRCxHQUFBLHlCQUFpQyxLQUFBRyxHQUFBLElBQUFsd0MsRUFBQUQsRUFBQWlsQyxPQUFtRCxPQUE1QmhsQyxJQUFBeXdDLGFBQUF6d0MsRUFBQTNMLE1BQUEsR0FBNEIwTCxFQUFBMHdDLGNBQUEsS0FBQXp3QyxFQUFBLGNBQUFBLEVBQ3ZjLGtCQUFrQixLQUFBb3dDLEdBQUEsT0FBQUksR0FBQXp3QyxFQUFBdEcsTUFBMEIsS0FBQTQyQyxHQUFBLEdBQUF0d0MsRUFBQSxJQUFBQSxFQUFBb2xDLFFBQUFwbEMsRUFBQXFsQyxRQUFBLFlBQUFvTCxHQUFBendDLEdBQXVELFlBQVksU0FBQTJ3QyxHQUFBM3dDLEdBQWUsSUFBQUMsRUFBQSxHQUFTLEdBQUdELEVBQUEsT0FBQUEsRUFBQThHLEtBQWdCLCtDQUFBMVMsRUFBQSxHQUFvRCxNQUFBNEwsRUFBUSxZQUFBM0wsRUFBQTJMLEVBQUE0d0MsWUFBQTN0QyxFQUFBakQsRUFBQTZ3QyxhQUFBeFAsRUFBQW9QLEdBQUF6d0MsRUFBQXRHLE1BQTBEdEYsRUFBQSxLQUFPQyxJQUFBRCxFQUFBcThDLEdBQUFwOEMsRUFBQXFGLE9BQWtCckYsRUFBQWd0QyxFQUFJQSxFQUFBLEdBQUtwK0IsRUFBQW8rQixFQUFBLFFBQUFwK0IsRUFBQTZ0QyxTQUFBNXpDLFFBQUF3eUMsR0FBQSxRQUFBenNDLEVBQUE4dEMsV0FBQSxJQUFBMzhDLElBQUFpdEMsRUFBQSxnQkFBQWp0QyxFQUFBLEtBQXdGQSxFQUFBLGFBQUFDLEdBQUEsV0FBQWd0QyxFQUErQnBoQyxHQUFBN0wsRUFBSzRMLElBQUFvcEMsYUFBV3BwQyxHQUFTLE9BQUFDLEVBQ2xjLElBQUErd0MsR0FBQSw4VkFBQUMsR0FBQXg4QyxPQUFBa0IsVUFBQUMsZUFBQXM3QyxHQUFBLEdBQTZZQyxHQUFBLEdBRXJMLFNBQUEzUCxHQUFBeGhDLEVBQUFDLEVBQUE3TCxFQUFBQyxFQUFBNE8sR0FBc0IzSyxLQUFBODRDLGdCQUFBLElBQUFueEMsR0FBQSxJQUFBQSxHQUFBLElBQUFBLEVBQXlDM0gsS0FBQSs0QyxjQUFBaDlDLEVBQXFCaUUsS0FBQWc1QyxtQkFBQXJ1QyxFQUEwQjNLLEtBQUFpNUMsZ0JBQUFuOUMsRUFBdUJrRSxLQUFBazVDLGFBQUF4eEMsRUFBb0IxSCxLQUFBb0IsS0FBQXVHLEVBQVksSUFBQTRoQyxHQUFBLEdBQzdYLHVJQUFBbHJDLE1BQUEsS0FBQUMsUUFBQSxTQUFBb0osR0FBc0s2aEMsR0FBQTdoQyxHQUFBLElBQUF3aEMsR0FBQXhoQyxFQUFBLEtBQUFBLEVBQUEsUUFBNEIsd0dBQUFwSixRQUFBLFNBQUFvSixHQUE0SCxJQUFBQyxFQUFBRCxFQUFBLEdBQVc2aEMsR0FBQTVoQyxHQUFBLElBQUF1aEMsR0FBQXZoQyxFQUFBLEtBQUFELEVBQUEsV0FBK0IscURBQUFwSixRQUFBLFNBQUFvSixHQUF5RTZoQyxHQUFBN2hDLEdBQUEsSUFBQXdoQyxHQUFBeGhDLEVBQUEsS0FBQUEsRUFBQTFCLGNBQUEsUUFDamIsd0VBQUExSCxRQUFBLFNBQUFvSixHQUE0RjZoQyxHQUFBN2hDLEdBQUEsSUFBQXdoQyxHQUFBeGhDLEVBQUEsS0FBQUEsRUFBQSxRQUE0QixnTUFBQXJKLE1BQUEsS0FBQUMsUUFBQSxTQUFBb0osR0FBK042aEMsR0FBQTdoQyxHQUFBLElBQUF3aEMsR0FBQXhoQyxFQUFBLEtBQUFBLEVBQUExQixjQUFBLFFBQTBDLDBDQUFBMUgsUUFBQSxTQUFBb0osR0FBOEQ2aEMsR0FBQTdoQyxHQUFBLElBQUF3aEMsR0FBQXhoQyxFQUFBLEtBQUFBLEVBQUEsUUFDL2IsdUJBQUFwSixRQUFBLFNBQUFvSixHQUEyQzZoQyxHQUFBN2hDLEdBQUEsSUFBQXdoQyxHQUFBeGhDLEVBQUEsS0FBQUEsRUFBQSxRQUE0Qiw4QkFBQXBKLFFBQUEsU0FBQW9KLEdBQWtENmhDLEdBQUE3aEMsR0FBQSxJQUFBd2hDLEdBQUF4aEMsRUFBQSxLQUFBQSxFQUFBLFFBQTRCLG9CQUFBcEosUUFBQSxTQUFBb0osR0FBd0M2aEMsR0FBQTdoQyxHQUFBLElBQUF3aEMsR0FBQXhoQyxFQUFBLEtBQUFBLEVBQUExQixjQUFBLFFBQTBDLElBQUFtekMsR0FBQSxnQkFBdUIsU0FBQUMsR0FBQTF4QyxHQUFlLE9BQUFBLEVBQUEsR0FBQTZYLGNBRzdRLFNBQUE4NUIsR0FBQTN4QyxFQUFBQyxFQUFBN0wsRUFBQUMsR0FBcUIsSUFBQTRPLEVBQUE0K0IsR0FBQWpzQyxlQUFBcUssR0FBQTRoQyxHQUFBNWhDLEdBQUEsTUFBb0MsT0FBQWdELEVBQUEsSUFBQUEsRUFBQXZKLE1BQUFyRixJQUFBLEVBQUE0TCxFQUFBdkksU0FBQSxNQUFBdUksRUFBQSxVQUFBQSxFQUFBLFlBQUFBLEVBQUEsVUFBQUEsRUFBQSxRQU56RCxTQUFBRCxFQUFBQyxFQUFBN0wsRUFBQUMsR0FBcUIsU0FBQTRMLEdBRDhGLFNBQUFELEVBQUFDLEVBQUE3TCxFQUFBQyxHQUFxQixVQUFBRCxHQUFBLElBQUFBLEVBQUFzRixLQUFBLFNBQWlDLGNBQUF1RyxHQUFpQixxQ0FBdUMscUJBQUE1TCxJQUE2QixPQUFBRCxLQUFBZzlDLGdCQUFrRSxXQUE3QnB4QyxJQUFBMUIsY0FBQTNGLE1BQUEsT0FBNkIsVUFBQXFILEdBQStCLGtCQUMxVTR4QyxDQUFBNXhDLEVBQUFDLEVBQUE3TCxFQUFBQyxHQUFBLFNBQTBELEdBQUFBLEVBQUEsU0FBYyxVQUFBRCxFQUFBLE9BQUFBLEVBQUFzRixNQUEyQixjQUFBdUcsRUFBZ0Isa0JBQUFBLEVBQW9CLGNBQUFtZ0MsTUFBQW5nQyxHQUF1QixjQUFBbWdDLE1BQUFuZ0MsSUFBQSxFQUFBQSxFQUE0QixTQU1uRDR4QyxDQUFBNXhDLEVBQUE3TCxFQUFBNk8sRUFBQTVPLEtBQUFELEVBQUEsTUFBQUMsR0FBQSxPQUFBNE8sRUFQNUosU0FBQWpELEdBQWUsUUFBQWl4QyxHQUFBLzhDLEtBQUFpOUMsR0FBQW54QyxLQUEwQml4QyxHQUFBLzhDLEtBQUFnOUMsR0FBQWx4QyxLQUEwQmd4QyxHQUFBaHRDLEtBQUFoRSxHQUFBbXhDLEdBQUFueEMsSUFBQSxHQUE4Qmt4QyxHQUFBbHhDLElBQUEsR0FBUyxJQU9rRDh4QyxDQUFBN3hDLEtBQUEsT0FBQTdMLEVBQUE0TCxFQUFBd0UsZ0JBQUF2RSxHQUFBRCxFQUFBbUUsYUFBQWxFLEVBQUEsR0FBQTdMLElBQUE2TyxFQUFBc3VDLGdCQUFBdnhDLEVBQUFpRCxFQUFBdXVDLGNBQUEsT0FBQXA5QyxFQUFBLElBQUE2TyxFQUFBdkosTUFBQSxHQUFBdEYsR0FBQTZMLEVBQUFnRCxFQUFBb3VDLGNBQUFoOUMsRUFBQTRPLEVBQUFxdUMsbUJBQUEsT0FBQWw5QyxFQUFBNEwsRUFBQXdFLGdCQUFBdkUsSUFBQTdMLEVBQUEsS0FBQTZPLElBQUF2SixPQUFBLElBQUF1SixJQUFBLElBQUE3TyxFQUFBLE1BQUFBLEVBQUFDLEVBQUEyTCxFQUFBK3hDLGVBQUExOUMsRUFBQTRMLEVBQUE3TCxHQUFBNEwsRUFBQW1FLGFBQUFsRSxFQUFBN0wsTUFDNUosU0FBQTQ5QyxHQUFBaHlDLEdBQWUsY0FBQUEsR0FBaUIsNEVBQUFBLEVBQW1GLGtCQUFrQixTQUFBaXlDLEdBQUFqeUMsRUFBQUMsR0FBaUIsSUFBQTdMLEVBQUE2TCxFQUFBOEwsUUFBZ0IsT0FBQXZXLEVBQUEsR0FBV3lLLEVBQUEsQ0FBSWl5QyxvQkFBQSxFQUFBamlDLGtCQUFBLEVBQUFqYixXQUFBLEVBQUErVyxRQUFBLE1BQUEzWCxJQUFBNEwsRUFBQW15QyxjQUFBQyxpQkFDckwsU0FBQUMsR0FBQXJ5QyxFQUFBQyxHQUFpQixJQUFBN0wsRUFBQSxNQUFBNkwsRUFBQWdRLGFBQUEsR0FBQWhRLEVBQUFnUSxhQUFBNWIsRUFBQSxNQUFBNEwsRUFBQThMLFFBQUE5TCxFQUFBOEwsUUFBQTlMLEVBQUFpeUMsZUFBMEY5OUMsRUFBQTQ5QyxHQUFBLE1BQUEveEMsRUFBQWpMLE1BQUFpTCxFQUFBakwsTUFBQVosR0FBOEI0TCxFQUFBbXlDLGNBQUEsQ0FBaUJDLGVBQUEvOUMsRUFBQWkrQyxhQUFBbCtDLEVBQUFtK0MsV0FBQSxhQUFBdHlDLEVBQUF2RyxNQUFBLFVBQUF1RyxFQUFBdkcsS0FBQSxNQUFBdUcsRUFBQThMLFFBQUEsTUFBQTlMLEVBQUFqTCxPQUFnSCxTQUFBdzlDLEdBQUF4eUMsRUFBQUMsR0FBNkIsT0FBWkEsSUFBQThMLFVBQVk0bEMsR0FBQTN4QyxFQUFBLFVBQUFDLEdBQUEsR0FDdlMsU0FBQXd5QyxHQUFBenlDLEVBQUFDLEdBQWlCdXlDLEdBQUF4eUMsRUFBQUMsR0FBUSxJQUFBN0wsRUFBQTQ5QyxHQUFBL3hDLEVBQUFqTCxPQUFBWCxFQUFBNEwsRUFBQXZHLEtBQTJCLFNBQUF0RixFQUFBLFdBQUFDLEdBQTRCLElBQUFELEdBQUEsS0FBQTRMLEVBQUFoTCxPQUFBZ0wsRUFBQWhMLE9BQUFaLEtBQUE0TCxFQUFBaEwsTUFBQSxHQUFBWixHQUFnRDRMLEVBQUFoTCxRQUFBLEdBQUFaLElBQUE0TCxFQUFBaEwsTUFBQSxHQUFBWixRQUFvQyxjQUFBQyxHQUFBLFVBQUFBLEVBQThELFlBQTNCMkwsRUFBQXdFLGdCQUFBLFNBQWtDdkUsRUFBQXJLLGVBQUEsU0FBQTg4QyxHQUFBMXlDLEVBQUFDLEVBQUF2RyxLQUFBdEYsR0FBQTZMLEVBQUFySyxlQUFBLGlCQUFBODhDLEdBQUExeUMsRUFBQUMsRUFBQXZHLEtBQUFzNEMsR0FBQS94QyxFQUFBZ1EsZUFBMkcsTUFBQWhRLEVBQUE4TCxTQUFBLE1BQUE5TCxFQUFBaXlDLGlCQUFBbHlDLEVBQUFreUMsaUJBQUFqeUMsRUFBQWl5QyxnQkFDcFYsU0FBQVMsR0FBQTN5QyxFQUFBQyxFQUFBN0wsR0FBbUIsR0FBQTZMLEVBQUFySyxlQUFBLFVBQUFxSyxFQUFBckssZUFBQSxpQkFBZ0UsSUFBQXZCLEVBQUE0TCxFQUFBdkcsS0FBYSxnQkFBQXJGLEdBQUEsVUFBQUEsUUFBQSxJQUFBNEwsRUFBQWpMLE9BQUEsT0FBQWlMLEVBQUFqTCxPQUFBLE9BQXlFaUwsRUFBQSxHQUFBRCxFQUFBbXlDLGNBQUFHLGFBQWtDbCtDLEdBQUE2TCxJQUFBRCxFQUFBaEwsUUFBQWdMLEVBQUFoTCxNQUFBaUwsR0FBNEJELEVBQUFpUSxhQUFBaFEsRUFBMEIsTUFBVDdMLEVBQUE0TCxFQUFBMUwsUUFBUzBMLEVBQUExTCxLQUFBLElBQW9CMEwsRUFBQWt5QyxnQkFBQWx5QyxFQUFBa3lDLGVBQW1DbHlDLEVBQUFreUMsaUJBQUFseUMsRUFBQW15QyxjQUFBQyxlQUFrRCxLQUFBaCtDLElBQUE0TCxFQUFBMUwsS0FBQUYsR0FDMVcsU0FBQXMrQyxHQUFBMXlDLEVBQUFDLEVBQUE3TCxHQUFtQixXQUFBNkwsR0FBQUQsRUFBQXlELGNBQUFpSSxnQkFBQTFMLElBQUEsTUFBQTVMLEVBQUE0TCxFQUFBaVEsYUFBQSxHQUFBalEsRUFBQW15QyxjQUFBRyxhQUFBdHlDLEVBQUFpUSxlQUFBLEdBQUE3YixJQUFBNEwsRUFBQWlRLGFBQUEsR0FBQTdiLElBUG5CLDBqQ0FBQXVDLE1BQUEsS0FBQUMsUUFBQSxTQUFBb0osR0FBeWxDLElBQUFDLEVBQUFELEVBQUE5QyxRQUFBdTBDLEdBQ3psQ0MsSUFBSTdQLEdBQUE1aEMsR0FBQSxJQUFBdWhDLEdBQUF2aEMsRUFBQSxLQUFBRCxFQUFBLFFBQTRCLHNGQUFBckosTUFBQSxLQUFBQyxRQUFBLFNBQUFvSixHQUFxSCxJQUFBQyxFQUFBRCxFQUFBOUMsUUFBQXUwQyxHQUFBQyxJQUF1QjdQLEdBQUE1aEMsR0FBQSxJQUFBdWhDLEdBQUF2aEMsRUFBQSxLQUFBRCxFQUFBLGtDQUFzRCxvQ0FBQXBKLFFBQUEsU0FBQW9KLEdBQXdELElBQUFDLEVBQUFELEVBQUE5QyxRQUFBdTBDLEdBQUFDLElBQXVCN1AsR0FBQTVoQyxHQUFBLElBQUF1aEMsR0FBQXZoQyxFQUFBLEtBQUFELEVBQUEsMENBQThENmhDLEdBQUFoMkIsU0FBQSxJQUFBMjFCLEdBQUEsaUNBTXJNLElBQUFvUixHQUFBLENBQVFDLE9BQUEsQ0FBUTFMLHdCQUFBLENBQXlCb0YsUUFBQSxXQUFBQyxTQUFBLG1CQUE4Q2hGLGFBQUEsOERBQUE3d0MsTUFBQSxPQUF5RixTQUFBbThDLEdBQUE5eUMsRUFBQUMsRUFBQTdMLEdBQThFLE9BQTNENEwsRUFBQThnQyxHQUFBMEssVUFBQW9ILEdBQUFDLE9BQUE3eUMsRUFBQUMsRUFBQTdMLElBQStCc0YsS0FBQSxTQUFnQjh6QyxHQUFBcDVDLEdBQU11MUMsRUFBQTNwQyxHQUFNQSxFQUFTLElBQUEreUMsR0FBQSxLQUFBQyxHQUFBLEtBQW9CLFNBQUFDLEdBQUFqekMsR0FBZTJvQyxFQUFBM29DLEdBQ3BkLFNBQUFrekMsR0FBQWx6QyxHQUEyQixHQUFBd3ZDLEdBQVp2RyxFQUFBanBDLElBQVksT0FBQUEsRUFBa0IsU0FBQW16QyxHQUFBbnpDLEVBQUFDLEdBQWlCLGNBQUFELEVBQUEsT0FBQUMsRUFBeUIsSUFBQW16QyxJQUFBLEVBQWtGLFNBQUFDLEtBQWNOLFFBQUFPLFlBQUEsbUJBQUFDLElBQUFQLEdBQUFELEdBQUEsTUFBdUQsU0FBQVEsR0FBQXZ6QyxHQUFlLFVBQUFBLEVBQUF3eEMsY0FBQTBCLEdBQUFGLEtBQUFsRixHQUFBbUYsR0FBQWp6QyxFQUFBOHlDLEdBQUFFLEdBQUFoekMsRUFBQTR1QyxHQUFBNXVDLEtBQThELFNBQUF3ekMsR0FBQXh6QyxFQUFBQyxFQUFBN0wsR0FBbUIsVUFBQTRMLEdBQUFxekMsS0FBQUwsR0FBQTUrQyxHQUFBMitDLEdBQUE5eUMsR0FBQW9HLFlBQUEsbUJBQUFrdEMsS0FBQSxTQUFBdnpDLEdBQUFxekMsS0FBb0YsU0FBQUksR0FBQXp6QyxHQUFlLHVCQUFBQSxHQUFBLFVBQUFBLEdBQUEsWUFBQUEsRUFBQSxPQUFBa3pDLEdBQUFGLElBQ2piLFNBQUFVLEdBQUExekMsRUFBQUMsR0FBaUIsYUFBQUQsRUFBQSxPQUFBa3pDLEdBQUFqekMsR0FBNEIsU0FBQTB6QyxHQUFBM3pDLEVBQUFDLEdBQWlCLGFBQUFELEdBQUEsV0FBQUEsRUFBQSxPQUFBa3pDLEdBQUFqekMsR0FEbUMycEMsSUFBQXdKLEdBQUFyRSxHQUFBLFlBQUE3MkMsU0FBQSt6QyxjQUFBLEVBQUEvekMsU0FBQSt6QyxlQUVqRyxJQUFBMkgsR0FBQSxDQUFRM00sV0FBQTJMLEdBQUFpQix1QkFBQVQsR0FBQXBNLGNBQUEsU0FBQWhuQyxFQUFBQyxFQUFBN0wsRUFBQUMsR0FBd0UsSUFBQTRPLEVBQUFoRCxFQUFBZ3BDLEVBQUFocEMsR0FBQTVILE9BQUFncEMsT0FBQSxFQUFBRixPQUFBLEVBQUFDLEVBQUFuK0IsRUFBQWdCLFVBQUFoQixFQUFBZ0IsU0FBQTNGLGNBQW1QLEdBQXJLLFdBQUE4aUMsR0FBQSxVQUFBQSxHQUFBLFNBQUFuK0IsRUFBQXZKLEtBQUEybkMsRUFBQThSLEdBQUF4RSxHQUFBMXJDLEdBQUFtd0MsR0FBQS9SLEVBQUFzUyxJQUFBdFMsRUFBQW9TLEdBQUF0UyxFQUFBcVMsS0FBQXBTLEVBQUFuK0IsRUFBQWdCLFdBQUEsVUFBQW05QixFQUFBOWlDLGdCQUFBLGFBQUEyRSxFQUFBdkosTUFBQSxVQUFBdUosRUFBQXZKLFFBQUEybkMsRUFBQXFTLElBQXFLclMsUUFBQXJoQyxFQUFBQyxJQUFBLE9BQUE2eUMsR0FBQXpSLEVBQUFqdEMsRUFBQUMsR0FBa0M4c0MsS0FBQW5oQyxFQUFBaUQsRUFBQWhELEdBQVksU0FBQUQsTUFBQWlELEVBQUFrdkMsZ0JBQUFueUMsRUFBQXV5QyxZQUFBLFdBQUF0dkMsRUFBQXZKLE1BQUFnNUMsR0FBQXp2QyxFQUFBLFNBQUFBLEVBQUFqTyxTQUEwRjgrQyxHQUFBaFQsR0FBQXprQyxPQUFBLENBQWNtbUIsS0FBQSxLQUFBTixPQUFBLE9BQXNCNnhCLEdBQUEsQ0FBTUMsSUFBQSxTQUNyZkMsUUFBQSxVQUFBQyxLQUFBLFVBQUFDLE1BQUEsWUFBbUQsU0FBQUMsR0FBQXAwQyxHQUFlLElBQUFDLEVBQUEzSCxLQUFBcW5CLFlBQXVCLE9BQUExZixFQUFBbzBDLGlCQUFBcDBDLEVBQUFvMEMsaUJBQUFyMEMsUUFBQSt6QyxHQUFBL3pDLE9BQUFDLEVBQUFELEdBQW9FLFNBQUFzMEMsS0FBYyxPQUFBRixHQUMzSyxJQUFBRyxHQUFBLEVBQUFDLEdBQUEsRUFBQUMsSUFBQSxFQUFBQyxJQUFBLEVBQUFDLEdBQUFiLEdBQUF6M0MsT0FBQSxDQUF3QzhtQixRQUFBLEtBQUFDLFFBQUEsS0FBQVAsUUFBQSxLQUFBQyxRQUFBLEtBQUFULE1BQUEsS0FBQUMsTUFBQSxLQUFBTCxRQUFBLEtBQUFNLFNBQUEsS0FBQVYsT0FBQSxLQUFBTyxRQUFBLEtBQUFpeUIsaUJBQUFDLEdBQUFsb0MsT0FBQSxLQUFBd1csUUFBQSxLQUFBcEIsY0FBQSxTQUFBeGhCLEdBQXFNLE9BQUFBLEVBQUF3aEIsZ0JBQUF4aEIsRUFBQTQwQyxjQUFBNTBDLEVBQUE2dUMsV0FBQTd1QyxFQUFBc2pCLFVBQUF0akIsRUFBQTQwQyxjQUFpRkMsVUFBQSxTQUFBNzBDLEdBQXVCLGlCQUFBQSxFQUFBLE9BQUFBLEVBQUE2MEMsVUFBc0MsSUFBQTUwQyxFQUFBczBDLEdBQXNCLE9BQWJBLEdBQUF2MEMsRUFBQW1qQixRQUFhc3hCLEdBQUEsY0FBQXowQyxFQUFBdEcsS0FBQXNHLEVBQUFtakIsUUFBQWxqQixFQUFBLEdBQUF3MEMsSUFBQSxNQUF1REssVUFBQSxTQUFBOTBDLEdBQXVCLGlCQUFBQSxFQUFBLE9BQUFBLEVBQUE4MEMsVUFDL2QsSUFBQTcwQyxFQUFBdTBDLEdBQXNCLE9BQWJBLEdBQUF4MEMsRUFBQW9qQixRQUFhc3hCLEdBQUEsY0FBQTEwQyxFQUFBdEcsS0FBQXNHLEVBQUFvakIsUUFBQW5qQixFQUFBLEdBQUF5MEMsSUFBQSxRQUF3REssR0FBQUosR0FBQXQ0QyxPQUFBLENBQWdCNG1CLFVBQUEsS0FBQThELE1BQUEsS0FBQWtILE9BQUEsS0FBQSttQixTQUFBLEtBQUFDLG1CQUFBLEtBQUFDLE1BQUEsS0FBQUMsTUFBQSxLQUFBQyxNQUFBLEtBQUFseUIsWUFBQSxLQUFBbXlCLFVBQUEsT0FBNklDLEdBQUEsQ0FBTUMsV0FBQSxDQUFZbE8saUJBQUEsZUFBQUcsYUFBQSwwQkFBc0VnTyxXQUFBLENBQWFuTyxpQkFBQSxlQUFBRyxhQUFBLDBCQUFzRWlPLGFBQUEsQ0FBZXBPLGlCQUFBLGlCQUFBRyxhQUFBLDhCQUE0RWtPLGFBQUEsQ0FBZXJPLGlCQUFBLGlCQUNoZ0JHLGFBQUEsK0JBQTJDbU8sR0FBQSxDQUFLMU8sV0FBQXFPLEdBQUF0TyxjQUFBLFNBQUFobkMsRUFBQUMsRUFBQTdMLEVBQUFDLEdBQThDLElBQUE0TyxFQUFBLGNBQUFqRCxHQUFBLGdCQUFBQSxFQUFBcWhDLEVBQUEsYUFBQXJoQyxHQUFBLGVBQUFBLEVBQTRFLEdBQUFpRCxJQUFBN08sRUFBQW90QixlQUFBcHRCLEVBQUF3Z0QsZUFBQXZULElBQUFwK0IsRUFBQSxZQUFrTSxHQUF2SUEsRUFBQTVPLEVBQUFnRSxTQUFBaEUsS0FBQTRPLEVBQUE1TyxFQUFBb1AsZUFBQVIsRUFBQWlELGFBQUFqRCxFQUFBa3hCLGFBQUE5N0IsT0FBMEVncEMsS0FBQXBoQyxPQUFBN0wsRUFBQW90QixlQUFBcHRCLEVBQUFrdkIsV0FBQXlsQixFQUFBOW9DLEdBQUEsTUFBQW9oQyxFQUFBLEtBQTZEQSxJQUFBcGhDLEVBQUEsWUFBcUIsSUFBQWtoQyxPQUFBLEVBQUFDLE9BQUEsRUFBQVgsT0FBQSxFQUFBenNDLE9BQUEsRUFBd0MsYUFBQWdNLEdBQUEsY0FBQUEsR0FBQW1oQyxFQUFBd1QsR0FBQXZULEVBQUFrVSxHQUFBRSxXQUFBL1UsRUFBQTZVLEdBQUFDLFdBQUF2aEQsRUFBQSxTQUN6YSxlQUFBZ00sR0FBQSxnQkFBQUEsSUFBQW1oQyxFQUFBNFQsR0FBQTNULEVBQUFrVSxHQUFBSSxhQUFBalYsRUFBQTZVLEdBQUFHLGFBQUF6aEQsRUFBQSxXQUFpRyxJQUFBRyxFQUFBLE1BQUFrdEMsRUFBQXArQixFQUFBZ21DLEVBQUE1SCxHQUFzTCxHQUFoS3ArQixFQUFBLE1BQUFoRCxFQUFBZ0QsRUFBQWdtQyxFQUFBaHBDLElBQWtCRCxFQUFBbWhDLEVBQUFxSyxVQUFBcEssRUFBQUMsRUFBQWp0QyxFQUFBQyxJQUF1QnFGLEtBQUExRixFQUFBLFFBQWlCZ00sRUFBQS9JLE9BQUE5QyxFQUFXNkwsRUFBQXdoQixjQUFBdmUsR0FBa0I3TyxFQUFBK3NDLEVBQUFxSyxVQUFBL0ssRUFBQXhnQyxFQUFBN0wsRUFBQUMsSUFBdUJxRixLQUFBMUYsRUFBQSxRQUFpQkksRUFBQTZDLE9BQUFnTSxFQUFXN08sRUFBQW90QixjQUFBcnRCLEVBQWtCRSxFQUFBNEwsRUFBSW9oQyxHQUFBaHRDLEVBQUEyTCxFQUFBLENBQXVCLElBQVJpRCxFQUFBNU8sRUFBSUwsRUFBQSxFQUFJbXRDLEVBQVpsaEMsRUFBQW9oQyxFQUFvQkYsRUFBRUEsRUFBQWdJLEVBQUFoSSxHQUFBbnRDLElBQWdCLElBQUptdEMsRUFBQSxFQUFJVixFQUFBeDlCLEVBQVF3OUIsRUFBRUEsRUFBQTBJLEVBQUExSSxHQUFBVSxJQUFZLEtBQUssRUFBQW50QyxFQUFBbXRDLEdBQU1saEMsRUFBQWtwQyxFQUFBbHBDLEdBQUFqTSxJQUFhLEtBQUssRUFBQW10QyxFQUFBbnRDLEdBQU1pUCxFQUFBa21DLEVBQUFsbUMsR0FBQWsrQixJQUFhLEtBQUtudEMsS0FBSSxDQUFFLEdBQUFpTSxJQUFBZ0QsR0FBQWhELElBQUFnRCxFQUFBMnlDLFVBQUEsTUFBQTUxQyxFQUFrQ0MsRUFBQWtwQyxFQUFBbHBDLEdBQVFnRCxFQUFBa21DLEVBQUFsbUMsR0FBUWhELEVBQUEsVUFBT0EsRUFBQSxLQUFnQixJQUFKZ0QsRUFBQWhELEVBQUlBLEVBQUEsR0FBU29oQyxPQUFBcCtCLElBQy9kLFFBRDBlalAsRUFDdGZxdEMsRUFBQXVVLFlBQVk1aEQsSUFBQWlQLElBQXlCaEQsRUFBQXBILEtBQUF3b0MsR0FBVUEsRUFBQThILEVBQUE5SCxHQUFRLElBQUFBLEVBQUEsR0FBU2h0QyxPQUFBNE8sSUFBeUIsUUFBZGpQLEVBQUFLLEVBQUF1aEQsWUFBYzVoRCxJQUFBaVAsSUFBeUJvK0IsRUFBQXhvQyxLQUFBeEUsR0FBVUEsRUFBQTgwQyxFQUFBOTBDLEdBQVEsSUFBQUEsRUFBQSxFQUFRQSxFQUFBNEwsRUFBQXZJLE9BQVdyRCxJQUFBbzFDLEVBQUF4cEMsRUFBQTVMLEdBQUEsVUFBQTJMLEdBQXlCLElBQUEzTCxFQUFBZ3RDLEVBQUEzcEMsT0FBZSxFQUFBckQsS0FBTW8xQyxFQUFBcEksRUFBQWh0QyxHQUFBLFdBQUFELEdBQXVCLE9BQUE0TCxFQUFBNUwsS0FBYXloRCxHQUFBcGhELE9BQUFrQixVQUFBQyxlQUFvQyxTQUFBZ08sR0FBQTVELEVBQUFDLEdBQWlCLE9BQUFELElBQUFDLEVBQUEsSUFBQUQsR0FBQSxJQUFBQyxHQUFBLEVBQUFELEdBQUEsRUFBQUMsRUFBQUQsTUFBQUMsS0FDOVIsU0FBQTYxQyxHQUFBOTFDLEVBQUFDLEdBQWlCLEdBQUEyRCxHQUFBNUQsRUFBQUMsR0FBQSxTQUFvQixvQkFBQUQsR0FBQSxPQUFBQSxHQUFBLGlCQUFBQyxHQUFBLE9BQUFBLEVBQUEsU0FBeUUsSUFBQTdMLEVBQUFLLE9BQUFxQyxLQUFBa0osR0FBQTNMLEVBQUFJLE9BQUFxQyxLQUFBbUosR0FBc0MsR0FBQTdMLEVBQUFzRCxTQUFBckQsRUFBQXFELE9BQUEsU0FBZ0MsSUFBQXJELEVBQUEsRUFBUUEsRUFBQUQsRUFBQXNELE9BQVdyRCxJQUFBLElBQUF3aEQsR0FBQTNoRCxLQUFBK0wsRUFBQTdMLEVBQUFDLE1BQUF1UCxHQUFBNUQsRUFBQTVMLEVBQUFDLElBQUE0TCxFQUFBN0wsRUFBQUMsS0FBQSxTQUF1RCxTQUFTLFNBQUEwaEQsR0FBQS8xQyxHQUFlLElBQUFDLEVBQUFELEVBQVEsR0FBQUEsRUFBQTQxQyxVQUFBLEtBQW9CMzFDLEVBQUFtcEMsUUFBU25wQyxJQUFBbXBDLFdBQVksQ0FBSyxTQUFBbnBDLEVBQUErMUMsV0FBQSxTQUFnQyxLQUFLLzFDLEVBQUFtcEMsUUFBUyxVQUFBbnBDLElBQUFtcEMsUUFBQTRNLFdBQUEsU0FBNEMsV0FBQS8xQyxFQUFBNkcsSUFBQSxJQUFxQixTQUFBbXZDLEdBQUFqMkMsR0FBZSxJQUFBKzFDLEdBQUEvMUMsSUFBQS9LLEVBQUEsT0FFNVYsU0FBQWloRCxHQUFBbDJDLEdBQXVCLEtBQVJBLEVBRDdILFNBQUFBLEdBQWUsSUFBQUMsRUFBQUQsRUFBQTQxQyxVQUFrQixJQUFBMzFDLEVBQUEsWUFBQUEsRUFBQTgxQyxHQUFBLzFDLEtBQUEvSyxFQUFBLFdBQUFnTCxFQUFBLEtBQUFELEVBQXdELFFBQUE1TCxFQUFBNEwsRUFBQTNMLEVBQUE0TCxJQUFpQixDQUFFLElBQUFnRCxFQUFBN08sRUFBQWcxQyxPQUFBL0gsRUFBQXArQixJQUFBMnlDLFVBQUEsS0FBb0MsSUFBQTN5QyxJQUFBbytCLEVBQUEsTUFBZ0IsR0FBQXArQixFQUFBa3pDLFFBQUE5VSxFQUFBOFUsTUFBQSxDQUFzQixRQUFBaFYsRUFBQWwrQixFQUFBa3pDLE1BQWtCaFYsR0FBRSxDQUFFLEdBQUFBLElBQUEvc0MsRUFBQSxPQUFBNmhELEdBQUFoekMsR0FBQWpELEVBQXdCLEdBQUFtaEMsSUFBQTlzQyxFQUFBLE9BQUE0aEQsR0FBQWh6QyxHQUFBaEQsRUFBd0JraEMsSUFBQTd2QixRQUFZcmMsRUFBQSxPQUFTLEdBQUFiLEVBQUFnMUMsU0FBQS8wQyxFQUFBKzBDLE9BQUFoMUMsRUFBQTZPLEVBQUE1TyxFQUFBZ3RDLE1BQStCLENBQUtGLEdBQUEsRUFBSyxRQUFBQyxFQUFBbitCLEVBQUFrekMsTUFBa0IvVSxHQUFFLENBQUUsR0FBQUEsSUFBQWh0QyxFQUFBLENBQVUrc0MsR0FBQSxFQUFLL3NDLEVBQUE2TyxFQUFJNU8sRUFBQWd0QyxFQUFJLE1BQU0sR0FBQUQsSUFBQS9zQyxFQUFBLENBQVU4c0MsR0FBQSxFQUFLOXNDLEVBQUE0TyxFQUFJN08sRUFBQWl0QyxFQUFJLE1BQU1ELElBQUE5dkIsUUFBWSxJQUFBNnZCLEVBQUEsQ0FBTyxJQUFBQyxFQUFBQyxFQUFBOFUsTUFBYy9VLEdBQUUsQ0FBRSxHQUFBQSxJQUFBaHRDLEVBQUEsQ0FBVStzQyxHQUFBLEVBQUsvc0MsRUFBQWl0QyxFQUFJaHRDLEVBQUE0TyxFQUFJLE1BQU0sR0FBQW0rQixJQUFBL3NDLEVBQUEsQ0FBVThzQyxHQUFBLEVBQUs5c0MsRUFBQWd0QyxFQUFJanRDLEVBQUE2TyxFQUFJLE1BQU1tK0IsSUFBQTl2QixRQUFZNnZCLEdBQ3JmbHNDLEVBQUEsUUFBaUJiLEVBQUF3aEQsWUFBQXZoRCxHQUFBWSxFQUFBLE9BQTBELE9BQTFCLElBQUFiLEVBQUEwUyxLQUFBN1IsRUFBQSxPQUEwQmIsRUFBQXMwQyxVQUFBM04sVUFBQTNtQyxFQUFBNEwsRUFBQUMsRUFBa0RtMkMsQ0FBQXAyQyxJQUFRLFlBQWtCLFFBQUFDLEVBQUFELElBQWEsQ0FBRSxPQUFBQyxFQUFBNkcsS0FBQSxJQUFBN0csRUFBQTZHLElBQUEsT0FBQTdHLEVBQWlDLEdBQUFBLEVBQUFrMkMsTUFBQWwyQyxFQUFBazJDLE1BQUEvTSxPQUFBbnBDLE1BQUFrMkMsVUFBc0MsQ0FBSyxHQUFBbDJDLElBQUFELEVBQUEsTUFBZSxNQUFLQyxFQUFBcVIsU0FBVyxDQUFFLElBQUFyUixFQUFBbXBDLFFBQUFucEMsRUFBQW1wQyxTQUFBcHBDLEVBQUEsWUFBdUNDLElBQUFtcEMsT0FBV25wQyxFQUFBcVIsUUFBQTgzQixPQUFBbnBDLEVBQUFtcEMsT0FBMEJucEMsSUFBQXFSLFNBQWEsWUFDNVcsSUFBQStrQyxHQUFBdlYsR0FBQXprQyxPQUFBLENBQWlCaTZDLGNBQUEsS0FBQUMsWUFBQSxLQUFBQyxjQUFBLE9BQXVEQyxHQUFBM1YsR0FBQXprQyxPQUFBLENBQWVxNkMsY0FBQSxTQUFBMTJDLEdBQTBCLHdCQUFBQSxJQUFBMDJDLGNBQUFyK0MsT0FBQXErQyxpQkFBZ0VDLEdBQUE3QyxHQUFBejNDLE9BQUEsQ0FBZ0JtbEIsY0FBQSxPQUFxQixTQUFBbzFCLEdBQUE1MkMsR0FBZSxJQUFBQyxFQUFBRCxFQUFBMmlCLFFBQXVGLE1BQXZFLGFBQUEzaUIsRUFBQSxLQUFBQSxJQUFBMGlCLFdBQUEsS0FBQXppQixJQUFBRCxFQUFBLElBQUFBLEVBQUFDLEVBQXdELEtBQUFELE1BQUEsSUFBZSxJQUFBQSxHQUFBLEtBQUFBLElBQUEsRUFDNVQsSUFBQTYyQyxHQUFBLENBQVFDLElBQUEsU0FBQUMsU0FBQSxJQUFBQyxLQUFBLFlBQUFDLEdBQUEsVUFBQUMsTUFBQSxhQUFBQyxLQUFBLFlBQUFDLElBQUEsU0FBQUMsSUFBQSxLQUFBQyxLQUFBLGNBQUFDLEtBQUEsY0FBQUMsT0FBQSxhQUFBQyxnQkFBQSxnQkFBMk14N0IsR0FBQSxDQUFLeTdCLEVBQUEsWUFBQUMsRUFBQSxNQUFBQyxHQUFBLFFBQUFDLEdBQUEsUUFBQUMsR0FBQSxRQUFBQyxHQUFBLFVBQUFDLEdBQUEsTUFBQUMsR0FBQSxRQUFBQyxHQUFBLFdBQUFDLEdBQUEsU0FBQUMsR0FBQSxJQUFBQyxHQUFBLFNBQUFDLEdBQUEsV0FBQUMsR0FBQSxNQUFBQyxHQUFBLE9BQUFDLEdBQUEsWUFBQUMsR0FBQSxVQUFBQyxHQUFBLGFBQUFDLEdBQUEsWUFBQUMsR0FBQSxTQUFBQyxHQUFBLFNBQUFDLElBQUEsS0FBQUMsSUFBQSxLQUFBQyxJQUFBLEtBQUFDLElBQUEsS0FDeE5DLElBQUEsS0FBQUMsSUFBQSxLQUFBQyxJQUFBLEtBQUFDLElBQUEsS0FBQUMsSUFBQSxLQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLFVBQUFDLElBQUEsYUFBQUMsSUFBQSxRQUFxSEMsR0FBQWhHLEdBQUF6M0MsT0FBQSxDQUFlL0csSUFBQSxTQUFBMEssR0FBZ0IsR0FBQUEsRUFBQTFLLElBQUEsQ0FBVSxJQUFBMkssRUFBQTQyQyxHQUFBNzJDLEVBQUExSyxNQUFBMEssRUFBQTFLLElBQXVCLG9CQUFBMkssRUFBQSxPQUFBQSxFQUErQixtQkFBQUQsRUFBQXRHLEtBQUEsTUFBQXNHLEVBQUE0MkMsR0FBQTUyQyxJQUFBLFFBQUE1SixPQUFBRyxhQUFBeUosR0FBQSxZQUFBQSxFQUFBdEcsTUFBQSxVQUFBc0csRUFBQXRHLEtBQUF1aUIsR0FBQWpjLEVBQUEyaUIsVUFBQSxtQkFBZ0pwWCxTQUFBLEtBQUEwVyxRQUFBLEtBQUFNLFNBQUEsS0FBQVYsT0FBQSxLQUFBTyxRQUFBLEtBQUEyM0IsT0FBQSxLQUFBOU0sT0FBQSxLQUFBb0gsaUJBQUFDLEdBQUE1eEIsU0FBQSxTQUFBMWlCLEdBQW9JLG1CQUN4ZUEsRUFBQXRHLEtBQUFrOUMsR0FBQTUyQyxHQUFBLEdBQWUyaUIsUUFBQSxTQUFBM2lCLEdBQXFCLGtCQUFBQSxFQUFBdEcsTUFBQSxVQUFBc0csRUFBQXRHLEtBQUFzRyxFQUFBMmlCLFFBQUEsR0FBdURhLE1BQUEsU0FBQXhqQixHQUFtQixtQkFBQUEsRUFBQXRHLEtBQUFrOUMsR0FBQTUyQyxHQUFBLFlBQUFBLEVBQUF0RyxNQUFBLFVBQUFzRyxFQUFBdEcsS0FBQXNHLEVBQUEyaUIsUUFBQSxLQUFrRnEzQixHQUFBckYsR0FBQXQ0QyxPQUFBLENBQWdCNDlDLGFBQUEsT0FBa0JDLEdBQUFwRyxHQUFBejNDLE9BQUEsQ0FBZ0JrbkIsUUFBQSxLQUFBRixjQUFBLEtBQUFyQixlQUFBLEtBQUFILE9BQUEsS0FBQU8sUUFBQSxLQUFBSCxRQUFBLEtBQUFNLFNBQUEsS0FBQTh4QixpQkFBQUMsS0FBNEg2RixHQUFBclosR0FBQXprQyxPQUFBLENBQWVtMUMsYUFBQSxLQUFBK0UsWUFBQSxLQUFBQyxjQUFBLE9BQXNENEQsR0FBQXpGLEdBQUF0NEMsT0FBQSxDQUFnQmcrQyxPQUFBLFNBQUFyNkMsR0FBbUIsaUJBQUFBLElBQUFxNkMsT0FBQSxnQkFDdGRyNkMsS0FBQXM2QyxZQUFBLEdBQW1CQyxPQUFBLFNBQUF2NkMsR0FBb0IsaUJBQUFBLElBQUF1NkMsT0FBQSxnQkFBQXY2QyxLQUFBdzZDLFlBQUEsZUFBQXg2QyxLQUFBeTZDLFdBQUEsR0FBOEZDLE9BQUEsS0FBQUMsVUFBQSxPQUE0QkMsR0FBQSxvQkFBQXJRLEVBQUEsaUJBQUFDLEVBQUEsdUJBQUFDLEVBQUEsb1JBQ2pLLHNmQUNBLGlHQUFBQyxHQUFBLDBEQUFBbVEsR0FBQSxHQUFtS0MsR0FBQSxHQUFPLFNBQUFDLEdBQUEvNkMsRUFBQUMsR0FBaUIsSUFBQTdMLEVBQUE0TCxFQUFBLEdBQWtCM0wsRUFBQSxPQUFQMkwsSUFBQSxJQUFPLEdBQUE2WCxjQUFBN1gsRUFBQXJILE1BQUEsSUFBMkNzSCxFQUFBLENBQUdrbkMsd0JBQUEsQ0FBeUJvRixRQUFBbDRDLEVBQUFtNEMsU0FBQW40QyxFQUFBLFdBQStCbXpDLGFBQUEsQ0FBQXB6QyxHQUFBNG1ELGNBQUEvNkMsR0FBbUM0NkMsR0FBQTc2QyxHQUFBQyxFQUFRNjZDLEdBQUExbUQsR0FBQTZMLEVBQzlWLHdmQUNBLGlRQUFBckosUUFBQSxTQUFBb0osR0FBcVIrNkMsR0FBQS82QyxHQUFBLEtBQVc0NkMsR0FBQWhrRCxRQUFBLFNBQUFvSixHQUF1Qis2QyxHQUFBLzZDLEdBQUEsS0FDdlQsSUFBQWk3QyxHQUFBLENBQVFoVSxXQUFBNFQsR0FBQUssK0JBQUEsU0FBQWw3QyxHQUFpRSxpQkFBUkEsRUFBQTg2QyxHQUFBOTZDLE1BQVEsSUFBQUEsRUFBQWc3QyxlQUF3Q2hVLGNBQUEsU0FBQWhuQyxFQUFBQyxFQUFBN0wsRUFBQUMsR0FBaUMsSUFBQTRPLEVBQUE2M0MsR0FBQTk2QyxHQUFZLElBQUFpRCxFQUFBLFlBQWtCLE9BQUFqRCxHQUFVLHNCQUFBNDJDLEdBQUF4aUQsR0FBQSxZQUF5QywwQkFBQTRMLEVBQUE4NUMsR0FBaUMsTUFBTSx1QkFBQTk1QyxFQUFBMjJDLEdBQThCLE1BQU0sbUJBQUF2aUQsRUFBQWdZLE9BQUEsWUFBeUMsNkhBQUFwTSxFQUFBMjBDLEdBQTBJLE1BQU0sa0hBQUEzMEMsRUFDdmVnNkMsR0FBRyxNQUFNLGtFQUFBaDZDLEVBQUFrNkMsR0FBMkUsTUFBTSxLQUFBM1AsRUFBQSxLQUFBQyxFQUFBLEtBQUFDLEVBQUF6cUMsRUFBQXEyQyxHQUE2QixNQUFNLEtBQUEzTCxHQUFBMXFDLEVBQUFtNkMsR0FBYSxNQUFNLGFBQUFuNkMsRUFBQTh6QyxHQUFtQixNQUFNLFlBQUE5ekMsRUFBQW82QyxHQUFrQixNQUFNLGlDQUFBcDZDLEVBQUF5MkMsR0FBeUMsTUFBTSw0SkFBQXoyQyxFQUFBKzBDLEdBQXlLLE1BQU0sUUFBQS8wQyxFQUFBOGdDLEdBQXlDLE9BQU42SSxFQUF2QjFwQyxFQUFBRCxFQUFBd3JDLFVBQUF2b0MsRUFBQWhELEVBQUE3TCxFQUFBQyxJQUE2QjRMLElBQVVrN0MsR0FBQUYsR0FBQUMsK0JBQ2xkRSxHQUFBLEdBQU0sU0FBQUMsR0FBQXI3QyxHQUFlLElBQUFDLEVBQUFELEVBQUFzN0MsV0FBQWxuRCxFQUFBNkwsRUFBdUIsR0FBRyxJQUFBN0wsRUFBQSxDQUFPNEwsRUFBQXU3QyxVQUFBMWlELEtBQUF6RSxHQUFvQixNQUFNLElBQUFDLEVBQU0sSUFBQUEsRUFBQUQsRUFBUUMsRUFBQSswQyxRQUFTLzBDLElBQUErMEMsT0FBdUQsS0FBM0MvMEMsRUFBQSxJQUFBQSxFQUFBeVMsSUFBQSxLQUFBelMsRUFBQXEwQyxVQUFBOFMsZUFBMkMsTUFBWXg3QyxFQUFBdTdDLFVBQUExaUQsS0FBQXpFLEdBQW9CQSxFQUFBMjBDLEVBQUExMEMsU0FBUUQsR0FBUyxJQUFBQSxFQUFBLEVBQVFBLEVBQUE0TCxFQUFBdTdDLFVBQUE3akQsT0FBcUJ0RCxJQUFBLENBQUs2TCxFQUFBRCxFQUFBdTdDLFVBQUFubkQsR0FBaUIsSUFBQTZPLEVBQUEyckMsR0FBQTV1QyxFQUFBMmYsYUFBd0J0ckIsRUFBQTJMLEVBQUF5N0MsYUFBaUIsUUFBQXBhLEVBQUFyaEMsRUFBQTJmLFlBQUF3aEIsRUFBQSxLQUFBQyxFQUFBLEVBQW1DQSxFQUFBMkYsRUFBQXJ2QyxPQUFZMHBDLElBQUEsQ0FBSyxJQUFBWCxFQUFBc0csRUFBQTNGLEdBQVlYLFFBQUF1RyxjQUFBM3lDLEVBQUE0TCxFQUFBb2hDLEVBQUFwK0IsTUFBQWsrQixFQUFBMkcsRUFBQTNHLEVBQUFWLElBQTZDa0ksRUFBQXhILElBQU8sSUFBQXVhLElBQUEsRUFDL1osU0FBQXpaLEdBQUFqaUMsRUFBQUMsR0FBZ0IsSUFBQUEsRUFBQSxZQUFrQixJQUFBN0wsR0FBQSttRCxHQUFBbjdDLEdBQUEyN0MsR0FBQUMsSUFBQXJtRCxLQUFBLEtBQUF5SyxHQUFpQ0MsRUFBQW1HLGlCQUFBcEcsRUFBQTVMLEdBQUEsR0FBMkIsU0FBQXluRCxHQUFBNzdDLEVBQUFDLEdBQWlCLElBQUFBLEVBQUEsWUFBa0IsSUFBQTdMLEdBQUErbUQsR0FBQW43QyxHQUFBMjdDLEdBQUFDLElBQUFybUQsS0FBQSxLQUFBeUssR0FBaUNDLEVBQUFtRyxpQkFBQXBHLEVBQUE1TCxHQUFBLEdBQTJCLFNBQUF1bkQsR0FBQTM3QyxFQUFBQyxHQUFpQjB0QyxHQUFBaU8sR0FBQTU3QyxFQUFBQyxHQUM5TSxTQUFBMjdDLEdBQUE1N0MsRUFBQUMsR0FBaUIsR0FBQXk3QyxHQUFBLENBQU8sSUFBQXRuRCxFQUFBdzZDLEdBQUEzdUMsR0FBMkUsR0FBdkQsUUFBUjdMLEVBQUEyMEMsRUFBQTMwQyxLQUFRLGlCQUFBQSxFQUFBMFMsS0FBQSxJQUFBaXZDLEdBQUEzaEQsT0FBQSxNQUF1RGduRCxHQUFBMWpELE9BQUEsQ0FBYyxJQUFBckQsRUFBQSttRCxHQUFBbDdDLE1BQWU3TCxFQUFBb25ELGFBQUF6N0MsRUFBaUIzTCxFQUFBc3JCLFlBQUExZixFQUFnQjVMLEVBQUFpbkQsV0FBQWxuRCxFQUFlNEwsRUFBQTNMLE9BQUkyTCxFQUFBLENBQVF5N0MsYUFBQXo3QyxFQUFBMmYsWUFBQTFmLEVBQUFxN0MsV0FBQWxuRCxFQUFBbW5ELFVBQUEsSUFBd0QsSUFBSXpOLEdBQUF1TixHQUFBcjdDLEdBQVMsUUFBUUEsRUFBQXk3QyxhQUFBLEtBQUF6N0MsRUFBQTJmLFlBQUEsS0FBQTNmLEVBQUFzN0MsV0FBQSxLQUFBdDdDLEVBQUF1N0MsVUFBQTdqRCxPQUFBLEtBQUEwakQsR0FBQTFqRCxRQUFBMGpELEdBQUF2aUQsS0FBQW1ILEtBQXlHLElBQUE4N0MsR0FBQSxHQUFTQyxHQUFBLEVBQUFDLEdBQUEsd0JBQUFoL0MsS0FBQUMsVUFBQXRFLE1BQUEsR0FDM1gsU0FBQXNqRCxHQUFBajhDLEdBQXFGLE9BQXRFdkwsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBOEwsRUFBQWc4QyxNQUFBaDhDLEVBQUFnOEMsSUFBQUQsS0FBQUQsR0FBQTk3QyxFQUFBZzhDLEtBQUEsSUFBc0VGLEdBQUE5N0MsRUFBQWc4QyxLQUFpQixTQUFBRSxHQUFBbDhDLEdBQW9FLGFBQXJEQSxNQUFBLG9CQUFBOUgsdUJBQUEsSUFBcUQsWUFBc0MsSUFBSSxPQUFBOEgsRUFBQTBMLGVBQUExTCxFQUFBbWIsS0FBK0IsTUFBQWxiLEdBQVMsT0FBQUQsRUFBQW1iLE1BQWUsU0FBQWdoQyxHQUFBbjhDLEdBQWUsS0FBS0EsS0FBQTRJLFlBQWdCNUksSUFBQTRJLFdBQWdCLE9BQUE1SSxFQUMvVCxTQUFBbzhDLEdBQUFwOEMsRUFBQUMsR0FBaUIsSUFBZ0I1TCxFQUFoQkQsRUFBQStuRCxHQUFBbjhDLEdBQWdCLElBQUpBLEVBQUEsRUFBYzVMLEdBQUUsQ0FBRSxPQUFBQSxFQUFBbUYsU0FBQSxDQUE0QyxHQUF6QmxGLEVBQUEyTCxFQUFBNUwsRUFBQXVVLFlBQUFqUixPQUF5QnNJLEdBQUFDLEdBQUE1TCxHQUFBNEwsRUFBQSxPQUFxQmpHLEtBQUE1RixFQUFBK3BDLE9BQUFsK0IsRUFBQUQsR0FBbUJBLEVBQUEzTCxFQUFJMkwsRUFBQSxDQUFHLEtBQUs1TCxHQUFFLENBQUUsR0FBQUEsRUFBQW1SLFlBQUEsQ0FBa0JuUixJQUFBbVIsWUFBZ0IsTUFBQXZGLEVBQVE1TCxJQUFBa0csV0FBZWxHLE9BQUEsRUFBU0EsRUFBQStuRCxHQUFBL25ELElBQ3JOLFNBQUFpb0QsS0FBYyxRQUFBcjhDLEVBQUEzSCxPQUFBNEgsRUFBQWk4QyxLQUF3Qmo4QyxhQUFBRCxFQUFBczhDLG1CQUFpQyxDQUFFLElBQUl0OEMsRUFBQUMsRUFBQWlTLGdCQUFBaE0sWUFBZ0MsTUFBQTlSLEdBQVMsTUFBTTZMLEVBQUFpOEMsR0FBQWw4QyxFQUFBOUgsVUFBaUIsT0FBQStILEVBQVMsU0FBQXM4QyxHQUFBdjhDLEdBQWUsSUFBQUMsRUFBQUQsS0FBQWlFLFVBQUFqRSxFQUFBaUUsU0FBQTNGLGNBQThDLE9BQUEyQixJQUFBLFVBQUFBLElBQUEsU0FBQUQsRUFBQXRHLE1BQUEsV0FBQXNHLEVBQUF0RyxNQUFBLFFBQUFzRyxFQUFBdEcsTUFBQSxRQUFBc0csRUFBQXRHLE1BQUEsYUFBQXNHLEVBQUF0RyxPQUFBLGFBQUF1RyxHQUFBLFNBQUFELEVBQUF3OEMsaUJBQ25OLElBQUFDLEdBQUE3UyxHQUFBLGlCQUFBMXhDLFVBQUEsSUFBQUEsU0FBQSt6QyxhQUFBeVEsR0FBQSxDQUFvRTc5QyxPQUFBLENBQVFzb0Msd0JBQUEsQ0FBeUJvRixRQUFBLFdBQUFDLFNBQUEsbUJBQThDaEYsYUFBQSxpRkFBQTd3QyxNQUFBLE9BQTJHZ21ELEdBQUEsS0FBQUMsR0FBQSxLQUFBQyxHQUFBLEtBQUFDLElBQUEsRUFDOVAsU0FBQUMsR0FBQS84QyxFQUFBQyxHQUFpQixJQUFBN0wsRUFBQTZMLEVBQUE1SCxTQUFBNEgsSUFBQS9ILFNBQUEsSUFBQStILEVBQUExRyxTQUFBMEcsSUFBQXdELGNBQStELE9BQUFxNUMsSUFBQSxNQUFBSCxTQUFBVCxHQUFBOW5ELEdBQUEsTUFBNkMsbUJBQUxBLEVBQUF1b0QsS0FBS0osR0FBQW5vRCxLQUFBLENBQStCaVcsTUFBQWpXLEVBQUE0b0QsZUFBQTlnRCxJQUFBOUgsRUFBQTZvRCxjQUEwQzdvRCxFQUFBLENBQTZFOG9ELFlBQTdFOW9ELEtBQUFxUCxlQUFBclAsRUFBQXFQLGNBQUF5QyxhQUFBN04sUUFBQThrRCxnQkFBNkVELFdBQUFFLGFBQUFocEQsRUFBQWdwRCxhQUFBQyxVQUFBanBELEVBQUFpcEQsVUFBQUMsWUFBQWxwRCxFQUFBa3BELGFBQXNHVCxJQUFBL0csR0FBQStHLEdBQUF6b0QsR0FBQSxNQUFBeW9ELEdBQUF6b0QsR0FBQTRMLEVBQUE4Z0MsR0FBQTBLLFVBQUFrUixHQUFBNzlDLE9BQUErOUMsR0FBQTU4QyxFQUFBQyxJQUFBdkcsS0FBQSxTQUFBc0csRUFBQS9JLE9BQUEwbEQsR0FBQWhULEVBQUEzcEMsT0FDelgsSUFBQXU5QyxHQUFBLENBQVF0VyxXQUFBeVYsR0FBQTFWLGNBQUEsU0FBQWhuQyxFQUFBQyxFQUFBN0wsRUFBQUMsR0FBOEMsSUFBQWd0QyxFQUFBcCtCLEVBQUE1TyxFQUFBZ0UsU0FBQWhFLElBQUE2RCxTQUFBLElBQUE3RCxFQUFBa0YsU0FBQWxGLElBQUFvUCxjQUFpRSxLQUFBNDlCLEdBQUFwK0IsR0FBQSxDQUFZakQsRUFBQSxDQUFHaUQsRUFBQWc1QyxHQUFBaDVDLEdBQVFvK0IsRUFBQWtHLEVBQUFpVyxTQUFjLFFBQUFyYyxFQUFBLEVBQVlBLEVBQUFFLEVBQUEzcEMsT0FBV3lwQyxJQUFBLENBQUssSUFBQUMsRUFBQUMsRUFBQUYsR0FBVyxJQUFBbCtCLEVBQUFyTixlQUFBd3JDLEtBQUFuK0IsRUFBQW0rQixHQUFBLENBQWdDbitCLEdBQUEsRUFBSyxNQUFBakQsR0FBU2lELEdBQUEsRUFBS28rQixHQUFBcCtCLEVBQUssR0FBQW8rQixFQUFBLFlBQWtDLE9BQWpCcCtCLEVBQUFoRCxFQUFBZ3BDLEVBQUFocEMsR0FBQTVILE9BQWlCMkgsR0FBVSxhQUFBMnVDLEdBQUExckMsSUFBQSxTQUFBQSxFQUFBdTVDLG1CQUFBRyxHQUFBMTVDLEVBQUEyNUMsR0FBQTM4QyxFQUFBNDhDLEdBQUEsTUFBb0UsTUFBTSxXQUFBQSxHQUFBRCxHQUFBRCxHQUFBLEtBQTBCLE1BQU0sZ0JBQUFHLElBQUEsRUFBdUIsTUFBTSxxREFBQUEsSUFBQSxFQUFBQyxHQUFBM29ELEVBQUFDLEdBQXNFLHlCQUFBb29ELEdBQUEsTUFDcGYsaUNBQUFNLEdBQUEzb0QsRUFBQUMsR0FBMkMsY0FDM0MsU0FBQW9wRCxHQUFBejlDLEVBQUFDLEdBQTJFLE9BQTFERCxFQUFBeEssRUFBQSxDQUFLMmIsY0FBQSxHQUFnQmxSLElBQUlBLEVBRGtWLFNBQUFELEdBQWUsSUFBQUMsRUFBQSxHQUE2RCxPQUFwRHNoQyxFQUFBNEMsU0FBQXZ0QyxRQUFBb0osRUFBQSxTQUFBQSxHQUFrQyxNQUFBQSxJQUFBQyxHQUFBRCxLQUFrQkMsRUFDOVp5OUMsQ0FBQXo5QyxFQUFBa1IsYUFBQW5SLEVBQUFtUixTQUFBbFIsR0FBaUNELEVBQVMsU0FBQTI5QyxHQUFBMzlDLEVBQUFDLEVBQUE3TCxFQUFBQyxHQUFpQyxHQUFaMkwsSUFBQTFELFFBQVkyRCxFQUFBLENBQU1BLEVBQUEsR0FBSyxRQUFBZ0QsRUFBQSxFQUFZQSxFQUFBN08sRUFBQXNELE9BQVd1TCxJQUFBaEQsRUFBQSxJQUFBN0wsRUFBQTZPLEtBQUEsRUFBbUIsSUFBQTdPLEVBQUEsRUFBUUEsRUFBQTRMLEVBQUF0SSxPQUFXdEQsSUFBQTZPLEVBQUFoRCxFQUFBckssZUFBQSxJQUFBb0ssRUFBQTVMLEdBQUFZLE9BQUFnTCxFQUFBNUwsR0FBQTRYLFdBQUEvSSxJQUFBakQsRUFBQTVMLEdBQUE0WCxTQUFBL0ksTUFBQTVPLElBQUEyTCxFQUFBNUwsR0FBQXdwRCxpQkFBQSxPQUE0RyxDQUF1QixJQUFsQnhwRCxFQUFBLEdBQUE0OUMsR0FBQTU5QyxHQUFXNkwsRUFBQSxLQUFPZ0QsRUFBQSxFQUFRQSxFQUFBakQsRUFBQXRJLE9BQVd1TCxJQUFBLENBQUssR0FBQWpELEVBQUFpRCxHQUFBak8sUUFBQVosRUFBaUUsT0FBOUM0TCxFQUFBaUQsR0FBQStJLFVBQUEsT0FBaUIzWCxJQUFBMkwsRUFBQWlELEdBQUEyNkMsaUJBQUEsSUFBb0MsT0FBQTM5QyxHQUFBRCxFQUFBaUQsR0FBQUosV0FBQTVDLEVBQUFELEVBQUFpRCxJQUFrQyxPQUFBaEQsTUFBQStMLFVBQUEsSUFDbGMsU0FBQTZ4QyxHQUFBNzlDLEVBQUFDLEdBQWdFLE9BQS9DLE1BQUFBLEVBQUE2OUMseUJBQUE3b0QsRUFBQSxNQUErQ08sRUFBQSxHQUFXeUssRUFBQSxDQUFJakwsV0FBQSxFQUFBaWIsa0JBQUEsRUFBQWtCLFNBQUEsR0FBQW5SLEVBQUFteUMsY0FBQUcsZUFBNEUsU0FBQXlMLEdBQUEvOUMsRUFBQUMsR0FBaUIsSUFBQTdMLEVBQUE2TCxFQUFBakwsTUFBYyxNQUFBWixNQUFBNkwsRUFBQWdRLGFBQUEsT0FBQWhRLElBQUFrUixZQUFBLE1BQUEvYyxHQUFBYSxFQUFBLE1BQUEySCxNQUFBQyxRQUFBb0QsS0FBQSxHQUFBQSxFQUFBdkksUUFBQXpDLEVBQUEsTUFBQWdMLElBQUEsSUFBQTdMLEVBQUE2TCxHQUFBLE1BQUE3TCxNQUFBLEtBQXFKNEwsRUFBQW15QyxjQUFBLENBQWlCRyxhQUFBTixHQUFBNTlDLElBQ2hXLFNBQUE0cEQsR0FBQWgrQyxFQUFBQyxHQUFpQixJQUFBN0wsRUFBQTQ5QyxHQUFBL3hDLEVBQUFqTCxPQUFBWCxFQUFBMjlDLEdBQUEveEMsRUFBQWdRLGNBQXVDLE1BQUE3YixPQUFBLEdBQUFBLEtBQUE0TCxFQUFBaEwsUUFBQWdMLEVBQUFoTCxNQUFBWixHQUFBLE1BQUE2TCxFQUFBZ1EsY0FBQWpRLEVBQUFpUSxlQUFBN2IsSUFBQTRMLEVBQUFpUSxhQUFBN2IsSUFBd0csTUFBQUMsSUFBQTJMLEVBQUFpUSxhQUFBLEdBQUE1YixHQUErQixTQUFBNHBELEdBQUFqK0MsR0FBZSxJQUFBQyxFQUFBRCxFQUFBMkksWUFBb0IxSSxJQUFBRCxFQUFBbXlDLGNBQUFHLGVBQUF0eUMsRUFBQWhMLE1BQUFpTCxHQUh6S3FvQyxFQUFBQyx1QkFBQSwwSEFBQTV4QyxNQUFBLE1BQWdLOHdDLEVBQUF5QixFQUFNeEIsRUFBQXNCLEVBQU1yQixFQUFBc0IsRUFBTVgsRUFBQUUseUJBQUEsQ0FBNkIwVixrQkFBQWpELEdBQUFrRCxzQkFBQXhJLEdBQUF5SSxrQkFBQXhLLEdBQUF5SyxrQkFBQWQsR0FBQWUsdUJBQUF0UixLQUdRLElBQUF1UixHQUFBLENBQVF0NUIsS0FBQSwrQkFBQXU1QixPQUFBLHFDQUFBQyxJQUFBLDhCQUN4UixTQUFBQyxHQUFBMStDLEdBQWUsT0FBQUEsR0FBVSw2Q0FBOEMsc0RBQXVELDhDQUE4QyxTQUFBMitDLEdBQUEzK0MsRUFBQUMsR0FBaUIsYUFBQUQsR0FBQSxpQ0FBQUEsRUFBQTArQyxHQUFBeitDLEdBQUEsK0JBQUFELEdBQUEsa0JBQUFDLEVBQUEsK0JBQUFELEVBQzdMLElBQUFBLEdBQUE0K0MsUUFBQSxFQUFBQyxJQUFBNytDLEdBQStLLFNBQUFBLEVBQUFDLEdBQWUsR0FBQUQsRUFBQTgrQyxlQUFBUCxHQUFBRSxLQUFBLGNBQUF6K0MsSUFBQWdILFVBQUEvRyxNQUEwRCxDQUEwRSxLQUFyRTIrQyxPQUFBMW1ELFNBQUFnQyxjQUFBLFFBQXFDOE0sVUFBQSxRQUFBL0csRUFBQSxTQUFnQ0EsRUFBQTIrQyxHQUFBaDJDLFdBQW9CNUksRUFBQTRJLFlBQWE1SSxFQUFBekYsWUFBQXlGLEVBQUE0SSxZQUE2QixLQUFLM0ksRUFBQTJJLFlBQWE1SSxFQUFBM0YsWUFBQTRGLEVBQUEySSxjQUFyWCxvQkFBQW0yQyxhQUFBQyx3QkFBQSxTQUFBLytDLEVBQUE3TCxFQUFBQyxFQUFBNE8sR0FBa0Y4N0MsTUFBQUMsd0JBQUEsV0FBeUMsT0FBQWgvQyxHQUFBQyxFQUFBN0wsTUFBb0I0TCxJQUM1SyxTQUFBaS9DLEdBQUFqL0MsRUFBQUMsR0FBaUIsR0FBQUEsRUFBQSxDQUFNLElBQUE3TCxFQUFBNEwsRUFBQTRJLFdBQW1CLEdBQUF4VSxPQUFBNEwsRUFBQXdLLFdBQUEsSUFBQXBXLEVBQUFtRixTQUFxRCxZQUFkbkYsRUFBQXlVLFVBQUE1SSxHQUFzQkQsRUFBQTJJLFlBQUExSSxFQUN2RyxJQUFBaS9DLEdBQUEsQ0FBUXIwQix5QkFBQSxFQUFBczBCLG1CQUFBLEVBQUFDLGtCQUFBLEVBQUFDLGtCQUFBLEVBQUFDLFNBQUEsRUFBQUMsY0FBQSxFQUFBQyxpQkFBQSxFQUFBMTBCLGFBQUEsRUFBQTIwQixTQUFBLEVBQUFDLE1BQUEsRUFBQTEwQixVQUFBLEVBQUEyMEIsY0FBQSxFQUFBMTBCLFlBQUEsRUFBQTIwQixjQUFBLEVBQUFDLFdBQUEsRUFBQUMsVUFBQSxFQUFBQyxTQUFBLEVBQUFDLFlBQUEsRUFBQUMsYUFBQSxFQUFBQyxjQUFBLEVBQUFDLFlBQUEsRUFBQUMsZUFBQSxFQUFBQyxnQkFBQSxFQUFBQyxpQkFBQSxFQUFBbDNCLFlBQUEsRUFBQW0zQixXQUFBLEVBQUFyMUIsWUFBQSxFQUFBTixTQUFBLEVBQUFPLE9BQUEsRUFBQUMsU0FBQSxFQUFBbzFCLFNBQUEsRUFBQW4xQixRQUFBLEVBQUFDLFFBQUEsRUFBQUMsTUFBQSxFQUFBUixhQUFBLEVBQ1IwMUIsY0FBQSxFQUFBQyxhQUFBLEVBQUFDLGlCQUFBLEVBQUFDLGtCQUFBLEVBQUFDLGtCQUFBLEVBQUFDLGVBQUEsRUFBQUMsYUFBQSxHQUEwSEMsR0FBQSwwQkFBc0osU0FBQUMsR0FBQWpoRCxFQUFBQyxFQUFBN0wsR0FBbUIsYUFBQTZMLEdBQUEsa0JBQUFBLEdBQUEsS0FBQUEsRUFBQSxHQUFBN0wsR0FBQSxpQkFBQTZMLEdBQUEsSUFBQUEsR0FBQWkvQyxHQUFBdHBELGVBQUFvSyxJQUFBay9DLEdBQUFsL0MsSUFBQSxHQUFBQyxHQUFBdkMsT0FBQXVDLEVBQUEsS0FDblMsU0FBQWloRCxHQUFBbGhELEVBQUFDLEdBQTJCLFFBQUE3TCxLQUFWNEwsSUFBQWlhLE1BQVVoYSxFQUFBLEdBQUFBLEVBQUFySyxlQUFBeEIsR0FBQSxDQUF1QyxJQUFBQyxFQUFBLElBQUFELEVBQUEwRSxRQUFBLE1BQUFtSyxFQUFBZytDLEdBQUE3c0QsRUFBQTZMLEVBQUE3TCxHQUFBQyxHQUF5QyxVQUFBRCxNQUFBLFlBQTRCQyxFQUFBMkwsRUFBQTByQixZQUFBdDNCLEVBQUE2TyxHQUFBakQsRUFBQTVMLEdBQUE2TyxHQURpQnhPLE9BQUFxQyxLQUFBb29ELElBQUF0b0QsUUFBQSxTQUFBb0osR0FBb0NnaEQsR0FBQXBxRCxRQUFBLFNBQUFxSixHQUF1QkEsSUFBQUQsRUFBQW1oRCxPQUFBLEdBQUF0cEMsY0FBQTdYLEVBQUFvaEQsVUFBQSxHQUE2Q2xDLEdBQUFqL0MsR0FBQWkvQyxHQUFBbC9DLE9BQzVGLElBQUFxaEQsR0FBQTdyRCxFQUFBLENBQVU4ckQsVUFBQSxHQUFZLENBQUVDLE1BQUEsRUFBQXIwQyxNQUFBLEVBQUFzMEMsSUFBQSxFQUFBemxDLEtBQUEsRUFBQTBsQyxPQUFBLEVBQUFDLElBQUEsRUFBQUMsS0FBQSxFQUFBMTZDLE9BQUEsRUFBQTI2QyxRQUFBLEVBQUFDLE1BQUEsRUFBQUMsTUFBQSxFQUFBNXNCLE9BQUEsRUFBQWgrQixRQUFBLEVBQUE2cUQsT0FBQSxFQUFBQyxLQUFBLElBQzVMLFNBQUFDLEdBQUFqaUQsRUFBQUMsR0FBaUJBLElBQUFvaEQsR0FBQXJoRCxLQUFBLE1BQUFDLEVBQUFrUixVQUFBLE1BQUFsUixFQUFBNjlDLDBCQUFBN29ELEVBQUEsTUFBQStLLEVBQUEsVUFBQUMsRUFBQTY5QywwQkFBQSxNQUFBNzlDLEVBQUFrUixVQUFBbGMsRUFBQSx1QkFBQWdMLEVBQUE2OUMseUJBQUEsV0FBQTc5QyxFQUFBNjlDLHlCQUFBN29ELEVBQUEsYUFBQWdMLEVBQUFnYSxPQUFBLGlCQUFBaGEsRUFBQWdhLE9BQUFobEIsRUFBQSxVQUNqQixTQUFBaXRELEdBQUFsaUQsRUFBQUMsR0FBaUIsUUFBQUQsRUFBQWxILFFBQUEsNEJBQUFtSCxFQUFBc1EsR0FBb0QsT0FBQXZRLEdBQVUsMEtBQWtMLGtCQUNqUSxTQUFBbWlELEdBQUFuaUQsRUFBQUMsR0FBcUUsSUFBQTdMLEVBQUE2bkQsR0FBcERqOEMsRUFBQSxJQUFBQSxFQUFBekcsVUFBQSxLQUFBeUcsRUFBQXpHLFNBQUF5RyxJQUFBeUQsZUFBZ0V4RCxFQUFBc25DLEVBQUF0bkMsR0FBUSxRQUFBNUwsRUFBQSxFQUFZQSxFQUFBNEwsRUFBQXZJLE9BQVdyRCxJQUFBLENBQUssSUFBQTRPLEVBQUFoRCxFQUFBNUwsR0FBVyxJQUFBRCxFQUFBd0IsZUFBQXFOLEtBQUE3TyxFQUFBNk8sR0FBQSxDQUFnQyxPQUFBQSxHQUFVLGFBQUE0NEMsR0FBQSxTQUFBNzdDLEdBQTZCLE1BQU0sdUJBQUE2N0MsR0FBQSxRQUFBNzdDLEdBQXVDNjdDLEdBQUEsT0FBQTc3QyxHQUFhNUwsRUFBQTZzQixNQUFBLEVBQVU3c0IsRUFBQXFYLE9BQUEsRUFBVyxNQUFNLHlCQUFBc2pDLEdBQUE5ckMsSUFBQTQ0QyxHQUFBNTRDLEVBQUFqRCxHQUEwQyxNQUFNLDZDQUFnRCxhQUFBMnFDLEdBQUE3eEMsUUFBQW1LLElBQUFnL0IsR0FBQWgvQixFQUFBakQsR0FBbUM1TCxFQUFBNk8sSUFBQSxJQUFVLFNBQUFtL0MsTUFBZSxJQUFBQyxHQUFBLEtBQUFDLEdBQUEsS0FDeGIsU0FBQUMsR0FBQXZpRCxFQUFBQyxHQUFpQixPQUFBRCxHQUFVLDZEQUFBQyxFQUFBdWlELFVBQTZFLFNBQVMsU0FBQUMsR0FBQXppRCxFQUFBQyxHQUFpQixtQkFBQUQsR0FBQSxXQUFBQSxHQUFBLGFBQUFBLEdBQUEsaUJBQUFDLEVBQUFrUixVQUFBLGlCQUFBbFIsRUFBQWtSLFVBQUEsaUJBQUFsUixFQUFBNjlDLHlCQUFBLE9BQUE3OUMsRUFBQTY5Qyx5QkFBQSxNQUFBNzlDLEVBQUE2OUMsd0JBQUE0RSxPQUFzTyxJQUFBQyxHQUFBLG1CQUFBNXNDLDJCQUFBLEVBQUE2c0MsR0FBQSxtQkFBQXJ4QiwrQkFBQSxFQUUzVCxTQUFBc3hCLEdBQUE3aUQsR0FBZSxJQUFBQSxJQUFBdUYsWUFBb0J2RixHQUFBLElBQUFBLEVBQUF6RyxVQUFBLElBQUF5RyxFQUFBekcsVUFBa0N5RyxJQUFBdUYsWUFBaUIsT0FBQXZGLEVBQVMsU0FBQThpRCxHQUFBOWlELEdBQWUsSUFBQUEsSUFBQTRJLFdBQW1CNUksR0FBQSxJQUFBQSxFQUFBekcsVUFBQSxJQUFBeUcsRUFBQXpHLFVBQWtDeUcsSUFBQXVGLFlBQWlCLE9BQUF2RixFQUFTLElBQUEraUQsSUFBUSxJQUFBQyxHQUFBLEdBQUFDLElBQUEsRUFBZ0IsU0FBQS9nQixHQUFBbGlDLEdBQWMsRUFBQWlqRCxLQUFBampELEVBQUErNkIsUUFBQWlvQixHQUFBQyxJQUFBRCxHQUFBQyxJQUFBLEtBQUFBLE1BQTBDLFNBQUEzZ0IsR0FBQXRpQyxFQUFBQyxHQUFxQitpRCxLQUFMQyxJQUFLampELEVBQUErNkIsUUFBaUIvNkIsRUFBQSs2QixRQUFBOTZCLEVBQVksSUFBQWlqRCxHQUFBLEdBQVMxZ0IsR0FBQSxDQUFJekgsUUFBQW1vQixJQUFXeGdCLEdBQUEsQ0FBSTNILFNBQUEsR0FBV29vQixHQUFBRCxHQUNuWixTQUFBRSxHQUFBcGpELEVBQUFDLEdBQWlCLElBQUE3TCxFQUFBNEwsRUFBQXRHLEtBQUEycEQsYUFBMEIsSUFBQWp2RCxFQUFBLE9BQUE4dUQsR0FBZ0IsSUFBQTd1RCxFQUFBMkwsRUFBQTBvQyxVQUFrQixHQUFBcjBDLEtBQUFpdkQsOENBQUFyakQsRUFBQSxPQUFBNUwsRUFBQWt2RCwwQ0FBMkcsSUFBUWxpQixFQUFScCtCLEVBQUEsR0FBVyxJQUFBbytCLEtBQUFqdEMsRUFBQTZPLEVBQUFvK0IsR0FBQXBoQyxFQUFBb2hDLEdBQXNJLE9BQWpIaHRDLEtBQUEyTCxJQUFBMG9DLFdBQUE0YSw0Q0FBQXJqRCxFQUFBRCxFQUFBdWpELDBDQUFBdGdELEdBQWlIQSxFQUFTLFNBQUEwL0IsR0FBQTNpQyxHQUFvQyxjQUF0QkEsSUFBQXdqRCxtQkFBa0QsU0FBQUMsR0FBQXpqRCxHQUFla2lDLEdBQUFRLElBQU9SLEdBQUFNLElBQU8sU0FBQWtoQixHQUFBMWpELEdBQWVraUMsR0FBQVEsSUFBT1IsR0FBQU0sSUFDcmMsU0FBQW1oQixHQUFBM2pELEVBQUFDLEVBQUE3TCxHQUFtQm91QyxHQUFBekgsVUFBQW1vQixJQUFBanVELEVBQUEsT0FBK0JxdEMsR0FBQUUsR0FBQXZpQyxHQUFTcWlDLEdBQUFJLEdBQUF0dUMsR0FBUyxTQUFBd3ZELEdBQUE1akQsRUFBQUMsRUFBQTdMLEdBQW1CLElBQUFDLEVBQUEyTCxFQUFBMG9DLFVBQXdDLEdBQXRCMW9DLEVBQUFDLEVBQUF1akQsa0JBQXNCLG1CQUFBbnZELEVBQUF3dkQsZ0JBQUEsT0FBQXp2RCxFQUF3RSxRQUFBNk8sS0FBdEI1TyxJQUFBd3ZELGtCQUFzQjVnRCxLQUFBakQsR0FBQS9LLEVBQUEsTUFBQXc3QyxHQUFBeHdDLElBQUEsVUFBQWdELEdBQXlELE9BQUF6TixFQUFBLEdBQVdwQixFQUFBQyxHQUFNLFNBQUF5dkQsR0FBQTlqRCxHQUFlLElBQUFDLEVBQUFELEVBQUEwb0MsVUFBOEcsT0FBNUZ6b0MsT0FBQThqRCwyQ0FBQWIsR0FBcURDLEdBQUEzZ0IsR0FBQXpILFFBQWF1SCxHQUFBRSxHQUFBdmlDLEdBQVNxaUMsR0FBQUksTUFBQTNILFVBQWlCLEVBQzlZLFNBQUFpcEIsR0FBQWhrRCxFQUFBQyxFQUFBN0wsR0FBbUIsSUFBQUMsRUFBQTJMLEVBQUEwb0MsVUFBa0JyMEMsR0FBQVksRUFBQSxPQUFrQmIsR0FBQTZMLEVBQUEyakQsR0FBQTVqRCxFQUFBQyxFQUFBa2pELElBQUE5dUQsRUFBQTB2RCwwQ0FBQTlqRCxFQUFBaWlDLEdBQUFRLElBQUFSLEdBQUFNLElBQUFGLEdBQUFFLEdBQUF2aUMsSUFBQWlpQyxHQUFBUSxJQUE2RkosR0FBQUksR0FBQXR1QyxHQUFTLElBQUE2dkQsR0FBQSxLQUFBQyxHQUFBLEtBQW9CLFNBQUFDLEdBQUFua0QsR0FBZSxnQkFBQUMsR0FBbUIsSUFBSSxPQUFBRCxFQUFBQyxHQUFZLE1BQUE3TCxNQUVuTyxTQUFBZ3dELEdBQUFwa0QsRUFBQUMsRUFBQTdMLEVBQUFDLEdBQXFCaUUsS0FBQXdPLElBQUE5RyxFQUFXMUgsS0FBQWhELElBQUFsQixFQUFXa0UsS0FBQWdaLFFBQUFoWixLQUFBNjlDLE1BQUE3OUMsS0FBQTh3QyxPQUFBOXdDLEtBQUFvd0MsVUFBQXB3QyxLQUFBb0IsS0FBQXBCLEtBQUErckQsWUFBQSxLQUFtRi9yRCxLQUFBbVosTUFBQSxFQUFhblosS0FBQXNxQyxJQUFBLEtBQWN0cUMsS0FBQWdzRCxhQUFBcmtELEVBQW9CM0gsS0FBQWlzRCx1QkFBQWpzRCxLQUFBa3NELGNBQUFsc0QsS0FBQW1zRCxZQUFBbnNELEtBQUFvc0QsY0FBQSxLQUF3RnBzRCxLQUFBcEQsS0FBQWIsRUFBWWlFLEtBQUEwOUMsVUFBQSxFQUFpQjE5QyxLQUFBcXNELFdBQUFyc0QsS0FBQXNzRCxZQUFBdHNELEtBQUF1c0QsV0FBQSxLQUFzRHZzRCxLQUFBd3NELG9CQUFBeHNELEtBQUF5c0QsZUFBQSxFQUErQ3pzRCxLQUFBczlDLFVBQUEsS0FBb0IsU0FBQTdTLEdBQUEvaUMsRUFBQUMsRUFBQTdMLEVBQUFDLEdBQW9CLFdBQUErdkQsR0FBQXBrRCxFQUFBQyxFQUFBN0wsRUFBQUMsR0FDL2EsU0FBQTJ3RCxHQUFBaGxELEdBQTZCLFVBQWRBLElBQUFySyxhQUFjcUssRUFBQW1pQyxrQkFDN0IsU0FBQThpQixHQUFBamxELEVBQUFDLEdBQWlCLElBQUE3TCxFQUFBNEwsRUFBQTQxQyxVQUNXLE9BRE8sT0FBQXhoRCxNQUFBMnVDLEdBQUEvaUMsRUFBQThHLElBQUE3RyxFQUFBRCxFQUFBMUssSUFBQTBLLEVBQUE5SyxPQUFBbXZELFlBQUFya0QsRUFBQXFrRCxZQUFBandELEVBQUFzRixLQUFBc0csRUFBQXRHLEtBQUF0RixFQUFBczBDLFVBQUExb0MsRUFBQTBvQyxVQUFBdDBDLEVBQUF3aEQsVUFBQTUxQyxJQUFBNDFDLFVBQUF4aEQsTUFBQWt3RCxhQUFBcmtELEVBQUE3TCxFQUFBNGhELFVBQUEsRUFBQTVoRCxFQUFBeXdELFdBQUEsS0FBQXp3RCxFQUFBd3dELFlBQUEsS0FBQXh3RCxFQUFBdXdELFdBQUEsTUFBMk52d0QsRUFBQTB3RCxvQkFBQTlrRCxFQUFBOGtELG9CQUE0QzF3RCxFQUFBMndELGVBQUEva0QsRUFBQStrRCxlQUFrQzN3RCxFQUFBK2hELE1BQUFuMkMsRUFBQW0yQyxNQUFnQi9oRCxFQUFBc3dELGNBQUExa0QsRUFBQTBrRCxjQUFnQ3R3RCxFQUFBb3dELGNBQUF4a0QsRUFBQXdrRCxjQUFnQ3B3RCxFQUFBcXdELFlBQUF6a0QsRUFBQXlrRCxZQUE0QnJ3RCxFQUFBbXdELHVCQUFBdmtELEVBQUF1a0QsdUJBQWtEbndELEVBQUFrZCxRQUFBdFIsRUFBQXNSLFFBQzFlbGQsRUFBQXFkLE1BQUF6UixFQUFBeVIsTUFBZ0JyZCxFQUFBd3VDLElBQUE1aUMsRUFBQTRpQyxJQUFZeHVDLEVBQzVCLFNBQUE4d0QsR0FBQWxsRCxFQUFBQyxFQUFBN0wsRUFBQUMsRUFBQTRPLEVBQUFvK0IsR0FBeUIsSUFBQUYsRUFBQSxFQUFZLEdBQUo5c0MsRUFBQTJMLEVBQUksbUJBQUFBLEVBQUFnbEQsR0FBQWhsRCxLQUFBbWhDLEVBQUEsUUFBc0Msb0JBQUFuaEMsRUFBQW1oQyxFQUFBLE9BQWdDbmhDLEVBQUEsT0FBQUEsR0FBaUIsS0FBQTZ2QyxHQUFBLE9BQUFzVixHQUFBL3dELEVBQUErYyxTQUFBbE8sRUFBQW8rQixFQUFBcGhDLEdBQW9DLEtBQUFpd0MsR0FBQSxPQUFBa1YsR0FBQWh4RCxFQUFBLEVBQUE2TyxFQUFBbytCLEVBQUFwaEMsR0FBNkIsS0FBQTZ2QyxHQUFBLE9BQUFzVixHQUFBaHhELEVBQUEsRUFBQTZPLEVBQUFvK0IsRUFBQXBoQyxHQUE2QixLQUFBOHZDLEdBQUEsT0FBQS92QyxFQUFBK2lDLEdBQUEsR0FBQTN1QyxFQUFBNkwsRUFBQSxFQUFBZ0QsSUFBQW9oRCxZQUFBdFUsR0FBQS92QyxFQUFBdEcsS0FBQXEyQyxHQUFBL3ZDLEVBQUEra0QsZUFBQTFqQixFQUFBcmhDLEVBQStFLEtBQUFvd0MsR0FBQSxPQUFBcHdDLEVBQUEraUMsR0FBQSxHQUFBM3VDLEVBQUE2TCxFQUFBZ0QsSUFBQW9oRCxZQUFBalUsR0FBQXB3QyxFQUFBdEcsS0FBQTAyQyxHQUFBcHdDLEVBQUEra0QsZUFBQTFqQixFQUFBcmhDLEVBQTZFLDRCQUFBQSxHQUFBLE9BQUFBLEVBQUEsT0FBQUEsRUFBQWlqQyxVQUE0RCxLQUFBK00sR0FBQTdPLEVBQUEsR0FBYSxNQUFBbmhDLEVBQVEsS0FBQWl3QyxHQUFBOU8sRUFBQSxFQUFZLE1BQUFuaEMsRUFBUSxLQUFBbXdDLEdBQUFoUCxFQUFBLEdBQWEsTUFBQW5oQyxFQUFRLEtBQUFxd0MsR0FBQWxQLEVBQ2hmLEdBQUcsTUFBQW5oQyxFQUFRLEtBQUFzd0MsR0FBQW5QLEVBQUEsR0FBYTlzQyxFQUFBLEtBQU8sTUFBQTJMLEVBQVEvSyxFQUFBLFlBQUErSyxhQUFBLElBQXdGLE9BQXpEQyxFQUFBOGlDLEdBQUE1QixFQUFBL3NDLEVBQUE2TCxFQUFBZ0QsSUFBYW9oRCxZQUFBcmtELEVBQWdCQyxFQUFBdkcsS0FBQXJGLEVBQVM0TCxFQUFBOGtELGVBQUExakIsRUFBbUJwaEMsRUFBUyxTQUFBa2xELEdBQUFubEQsRUFBQUMsRUFBQTdMLEVBQUFDLEdBQXFELE9BQWhDMkwsRUFBQStpQyxHQUFBLEVBQUEvaUMsRUFBQTNMLEVBQUE0TCxJQUFhOGtELGVBQUEzd0QsRUFBbUI0TCxFQUFTLFNBQUFvbEQsR0FBQXBsRCxFQUFBQyxFQUFBN0wsRUFBQUMsR0FBZ0csT0FBM0UyTCxFQUFBK2lDLEdBQUEsRUFBQS9pQyxFQUFBM0wsRUFBQTRMLEdBQWFBLEVBQUEsTUFBQUEsR0FBQTZ2QyxHQUFBSSxHQUFrQmx3QyxFQUFBcWtELFlBQUFwa0QsRUFBZ0JELEVBQUF0RyxLQUFBdUcsRUFBU0QsRUFBQStrRCxlQUFBM3dELEVBQW1CNEwsRUFBUyxTQUFBcWxELEdBQUFybEQsRUFBQUMsRUFBQTdMLEdBQXNELE9BQW5DNEwsRUFBQStpQyxHQUFBLEVBQUEvaUMsRUFBQSxLQUFBQyxJQUFnQjhrRCxlQUFBM3dELEVBQW1CNEwsRUFDclcsU0FBQXNsRCxHQUFBdGxELEVBQUFDLEVBQUE3TCxHQUFzTCxPQUFuSzZMLEVBQUE4aUMsR0FBQSxTQUFBL2lDLEVBQUFtUixTQUFBblIsRUFBQW1SLFNBQUEsR0FBQW5SLEVBQUExSyxJQUFBMkssSUFBK0M4a0QsZUFBQTN3RCxFQUFtQjZMLEVBQUF5b0MsVUFBQSxDQUFhOFMsY0FBQXg3QyxFQUFBdzdDLGNBQUErSixnQkFBQSxLQUFBem5CLGVBQUE5OUIsRUFBQTg5QixnQkFBb0Y3OUIsRUFBUyxTQUFBdWxELEdBQUF4bEQsRUFBQUMsR0FBaUJELEVBQUF5bEQsVUFBQSxFQUFjLElBQUFyeEQsRUFBQTRMLEVBQUEwbEQsb0JBQTRCLElBQUF0eEQsRUFBQTRMLEVBQUEwbEQsb0JBQUExbEQsRUFBQTJsRCxrQkFBQTFsRCxFQUFBN0wsRUFBQTZMLEVBQUFELEVBQUEwbEQsb0JBQUF6bEQsRUFBQUQsRUFBQTJsRCxrQkFBQTFsRCxJQUFBRCxFQUFBMmxELGtCQUFBMWxELEdBQTZIMmxELEdBQUEzbEQsRUFBQUQsR0FDdlgsU0FBQTZsRCxHQUFBN2xELEVBQUFDLEdBQWlCRCxFQUFBeWxELFVBQUEsRUFBY3psRCxFQUFBOGxELGtCQUFBN2xELElBQUFELEVBQUE4bEQsaUJBQUEsR0FBOEMsSUFBQTF4RCxFQUFBNEwsRUFBQTBsRCxvQkFBQXJ4RCxFQUFBMkwsRUFBQTJsRCxrQkFBa0R2eEQsSUFBQTZMLEVBQUFELEVBQUEwbEQsb0JBQUFyeEQsSUFBQTRMLEVBQUFELEVBQUEybEQsa0JBQUEsRUFBQXR4RCxNQUFBNEwsSUFBQUQsRUFBQTJsRCxrQkFBQXZ4RCxHQUF5RkEsRUFBQTRMLEVBQUErbEQsc0JBQTBCMXhELEVBQUEyTCxFQUFBZ21ELG9CQUF3QixJQUFBNXhELEVBQUE0TCxFQUFBK2xELHNCQUFBL2xELEVBQUFnbUQsb0JBQUEvbEQsRUFBQTdMLEVBQUE2TCxFQUFBRCxFQUFBK2xELHNCQUFBOWxELEVBQUE1TCxFQUFBNEwsSUFBQUQsRUFBQWdtRCxvQkFBQS9sRCxHQUFtSDJsRCxHQUFBM2xELEVBQUFELEdBQVEsU0FBQWltRCxHQUFBam1ELEVBQUFDLEdBQWlCLElBQUE3TCxFQUFBNEwsRUFBQTBsRCxvQkFBNEUsT0FBdEJ0eEQsRUFBQTZMLE1BQUE3TCxJQUExQjRMLElBQUErbEQsdUJBQXFDOWxELE1BQUFELEdBQVdDLEVBQ2xlLFNBQUEybEQsR0FBQTVsRCxFQUFBQyxHQUFpQixJQUFBN0wsRUFBQTZMLEVBQUE4bEQsc0JBQUExeEQsRUFBQTRMLEVBQUErbEQsb0JBQUEvaUQsRUFBQWhELEVBQUF5bEQsb0JBQUFya0IsRUFBQXBoQyxFQUFBNmxELGlCQUErRyxLQUFaN2lELEVBQUEsSUFBQUEsSUFBQW8rQixLQUFZLElBQUFyaEMsR0FBQTNMLEVBQUEyTCxLQUFBaUQsRUFBQTVPLEdBQStCLEtBQUoyTCxFQUFBaUQsSUFBSTdPLEVBQUE0TCxNQUFBNUwsR0FBa0I2TCxFQUFBaW1ELDJCQUFBampELEVBQStCaEQsRUFBQThrRCxlQUFBL2tELEVBQW1CLElBQUFtbUQsSUFBQSxFQUFVLFNBQUFDLEdBQUFwbUQsR0FBZSxPQUFPcW1ELFVBQUFybUQsRUFBQXNtRCxZQUFBLEtBQUFDLFdBQUEsS0FBQUMsb0JBQUEsS0FBQUMsbUJBQUEsS0FBQTdCLFlBQUEsS0FBQUQsV0FBQSxLQUFBK0Isb0JBQUEsS0FBQUMsbUJBQUEsTUFDblEsU0FBQUMsR0FBQTVtRCxHQUFlLE9BQU9xbUQsVUFBQXJtRCxFQUFBcW1ELFVBQUFDLFlBQUF0bUQsRUFBQXNtRCxZQUFBQyxXQUFBdm1ELEVBQUF1bUQsV0FBQUMsb0JBQUEsS0FBQUMsbUJBQUEsS0FBQTdCLFlBQUEsS0FBQUQsV0FBQSxLQUFBK0Isb0JBQUEsS0FBQUMsbUJBQUEsTUFBNE0sU0FBQUUsR0FBQTdtRCxHQUFlLE9BQU8ra0QsZUFBQS9rRCxFQUFBOEcsSUFBQSxFQUFBZ2dELFFBQUEsS0FBQXByRCxTQUFBLEtBQUFxSCxLQUFBLEtBQUE4aEQsV0FBQSxNQUE2RSxTQUFBa0MsR0FBQS9tRCxFQUFBQyxHQUFpQixPQUFBRCxFQUFBdW1ELFdBQUF2bUQsRUFBQXNtRCxZQUFBdG1ELEVBQUF1bUQsV0FBQXRtRCxHQUFBRCxFQUFBdW1ELFdBQUF4akQsS0FBQTlDLEVBQUFELEVBQUF1bUQsV0FBQXRtRCxHQUN0VixTQUFBK21ELEdBQUFobkQsRUFBQUMsR0FBaUIsSUFBQTdMLEVBQUE0TCxFQUFBNDFDLFVBQWtCLFVBQUF4aEQsRUFBQSxDQUFhLElBQUFDLEVBQUEyTCxFQUFBeWtELFlBQW9CeGhELEVBQUEsS0FBVyxPQUFBNU8sTUFBQTJMLEVBQUF5a0QsWUFBQTJCLEdBQUFwbUQsRUFBQXdrRCxxQkFBZ0Rud0QsRUFBQTJMLEVBQUF5a0QsWUFBQXhoRCxFQUFBN08sRUFBQXF3RCxZQUFBLE9BQUFwd0QsRUFBQSxPQUFBNE8sR0FBQTVPLEVBQUEyTCxFQUFBeWtELFlBQUEyQixHQUFBcG1ELEVBQUF3a0QsZUFBQXZoRCxFQUFBN08sRUFBQXF3RCxZQUFBMkIsR0FBQWh5RCxFQUFBb3dELGdCQUFBbndELEVBQUEyTCxFQUFBeWtELFlBQUFtQyxHQUFBM2pELEdBQUEsT0FBQUEsTUFBQTdPLEVBQUFxd0QsWUFBQW1DLEdBQUF2eUQsSUFBeUwsT0FBQTRPLEdBQUE1TyxJQUFBNE8sRUFBQThqRCxHQUFBMXlELEVBQUE0TCxHQUFBLE9BQUE1TCxFQUFBa3lELFlBQUEsT0FBQXRqRCxFQUFBc2pELFlBQUFRLEdBQUExeUQsRUFBQTRMLEdBQUE4bUQsR0FBQTlqRCxFQUFBaEQsS0FBQThtRCxHQUFBMXlELEVBQUE0TCxHQUFBZ0QsRUFBQXNqRCxXQUFBdG1ELEdBQ3hULFNBQUFnbkQsR0FBQWpuRCxFQUFBQyxHQUFpQixJQUFBN0wsRUFBQTRMLEVBQUF5a0QsWUFBeUUsUUFBckRyd0QsRUFBQSxPQUFBQSxFQUFBNEwsRUFBQXlrRCxZQUFBMkIsR0FBQXBtRCxFQUFBd2tELGVBQUEwQyxHQUFBbG5ELEVBQUE1TCxJQUFxRHF5RCxtQkFBQXJ5RCxFQUFBb3lELG9CQUFBcHlELEVBQUFxeUQsbUJBQUF4bUQsR0FBQTdMLEVBQUFxeUQsbUJBQUExakQsS0FBQTlDLEVBQUE3TCxFQUFBcXlELG1CQUFBeG1ELEdBQThILFNBQUFpbkQsR0FBQWxuRCxFQUFBQyxHQUFpQixJQUFBN0wsRUFBQTRMLEVBQUE0MUMsVUFBdUUsT0FBckQsT0FBQXhoRCxHQUFBNkwsSUFBQTdMLEVBQUFxd0QsY0FBQXhrRCxFQUFBRCxFQUFBeWtELFlBQUFtQyxHQUFBM21ELElBQXFEQSxFQUNoVCxTQUFBa25ELEdBQUFubkQsRUFBQUMsRUFBQTdMLEVBQUFDLEVBQUE0TyxFQUFBbytCLEdBQXlCLE9BQUFqdEMsRUFBQTBTLEtBQWMsZ0NBQUE5RyxFQUFBNUwsRUFBQTB5RCxTQUFBOW1ELEVBQUE5TCxLQUFBbXRDLEVBQUFodEMsRUFBQTRPLEdBQUFqRCxFQUFnRSxPQUFBQSxFQUFBZzJDLFdBQUEsS0FBQWgyQyxFQUFBZzJDLFVBQUEsR0FBd0MsT0FBMkQsVUFBeEMveUMsRUFBQSxtQkFBbkJqRCxFQUFBNUwsRUFBQTB5RCxTQUFtQjltRCxFQUFBOUwsS0FBQW10QyxFQUFBaHRDLEVBQUE0TyxHQUFBakQsR0FBd0MsTUFBOEIsT0FBQXhLLEVBQUEsR0FBV25CLEVBQUE0TyxHQUFNLE9BQUFrakQsSUFBQSxFQUFhLE9BQUE5eEQsRUFDdFEsU0FBQSt5RCxHQUFBcG5ELEVBQUFDLEVBQUE3TCxFQUFBQyxFQUFBNE8sR0FBdUJrakQsSUFBQSxFQUFnQixRQUFBOWtCLEdBQVZwaEMsRUFBQWluRCxHQUFBbG5ELEVBQUFDLElBQVVvbUQsVUFBQWxsQixFQUFBLEtBQUFDLEVBQUEsRUFBQVgsRUFBQXhnQyxFQUFBcW1ELFlBQUF0eUQsRUFBQXF0QyxFQUFxRCxPQUFBWixHQUFTLENBQUUsSUFBQXRzQyxFQUFBc3NDLEVBQUFza0IsZUFBdUI1d0QsRUFBQThPLEdBQUEsT0FBQWsrQixNQUFBVixFQUFBWSxFQUFBcnRDLEdBQUFvdEMsRUFBQWp0QyxJQUFBaXRDLEVBQUFqdEMsS0FBQUgsRUFBQW16RCxHQUFBbm5ELEVBQUFDLEVBQUF3Z0MsRUFBQXpzQyxFQUFBSSxFQUFBQyxHQUFBLE9BQUFvc0MsRUFBQS9rQyxXQUFBc0UsRUFBQWcyQyxXQUFBLEdBQUF2VixFQUFBb2tCLFdBQUEsWUFBQTVrRCxFQUFBMGtELFdBQUExa0QsRUFBQTJrRCxZQUFBM2tELEVBQUEwa0QsV0FBQWxrQixHQUFBeGdDLEVBQUEwa0QsV0FBQUUsV0FBQXBrQixFQUFBeGdDLEVBQUEwa0QsV0FBQWxrQixLQUE0TUEsSUFBQTE5QixLQUFnQixJQUFQNU8sRUFBQSxLQUFPc3NDLEVBQUF4Z0MsRUFBQXVtRCxvQkFBNEIsT0FBQS9sQixHQUFTLENBQUUsSUFBQTVyQyxFQUFBNHJDLEVBQUFza0IsZUFBdUJsd0QsRUFBQW9PLEdBQUEsT0FBQTlPLE1BQUFzc0MsRUFBQSxPQUFBVSxJQUFBRSxFQUFBcnRDLElBQUFvdEMsRUFBQXZzQyxJQUFBdXNDLEVBQUF2c0MsS0FBQWIsRUFBQW16RCxHQUFBbm5ELEVBQUFDLEVBQUF3Z0MsRUFBQXpzQyxFQUFBSSxFQUFBQyxHQUFBLE9BQUFvc0MsRUFBQS9rQyxXQUFBc0UsRUFBQWcyQyxXQUN4WixHQUFBdlYsRUFBQW9rQixXQUFBLFlBQUE1a0QsRUFBQTBtRCxtQkFBQTFtRCxFQUFBeW1ELG9CQUFBem1ELEVBQUEwbUQsbUJBQUFsbUIsR0FBQXhnQyxFQUFBMG1ELG1CQUFBOUIsV0FBQXBrQixFQUFBeGdDLEVBQUEwbUQsbUJBQUFsbUIsS0FBMkpBLElBQUExOUIsS0FBUyxPQUFBbytCLElBQUFsaEMsRUFBQXNtRCxXQUFBLE1BQThCLE9BQUFweUQsRUFBQThMLEVBQUF3bUQsbUJBQUEsS0FBQXptRCxFQUFBZzJDLFdBQUEsR0FBbUQsT0FBQTdVLEdBQUEsT0FBQWh0QyxJQUFBa3RDLEVBQUFydEMsR0FBMEJpTSxFQUFBb21ELFVBQUFobEIsRUFBY3BoQyxFQUFBcW1ELFlBQUFubEIsRUFBZ0JsaEMsRUFBQXVtRCxvQkFBQXJ5RCxFQUF3QjZMLEVBQUEra0QsZUFBQTNqQixFQUFtQnBoQyxFQUFBd2tELGNBQUF4d0QsRUFDeFYsU0FBQXF6RCxHQUFBcm5ELEVBQUFDLEVBQUE3TCxHQUFtQixPQUFBNkwsRUFBQXVtRCxzQkFBQSxPQUFBdm1ELEVBQUFzbUQsYUFBQXRtRCxFQUFBc21ELFdBQUF4akQsS0FBQTlDLEVBQUF1bUQsb0JBQUF2bUQsRUFBQXNtRCxXQUFBdG1ELEVBQUF3bUQsb0JBQUF4bUQsRUFBQXVtRCxvQkFBQXZtRCxFQUFBd21ELG1CQUFBLE1BQWlMYSxHQUFBcm5ELEVBQUEya0QsWUFBQXh3RCxHQUFvQjZMLEVBQUEya0QsWUFBQTNrRCxFQUFBMGtELFdBQUEsS0FBZ0MyQyxHQUFBcm5ELEVBQUF5bUQsb0JBQUF0eUQsR0FBNEI2TCxFQUFBeW1ELG9CQUFBem1ELEVBQUEwbUQsbUJBQUEsS0FBZ0QsU0FBQVcsR0FBQXRuRCxFQUFBQyxHQUFpQixLQUFLLE9BQUFELEdBQVMsQ0FBRSxJQUFBNUwsRUFBQTRMLEVBQUF0RSxTQUFpQixVQUFBdEgsRUFBQSxDQUFhNEwsRUFBQXRFLFNBQUEsS0FBZ0IsSUFBQXJILEVBQUE0TCxFQUFRLG1CQUFBN0wsR0FBQWEsRUFBQSxNQUFBYixHQUF3Q0EsRUFBQUYsS0FBQUcsR0FBVTJMLElBQUE2a0QsWUFDN2MsU0FBQTBDLEdBQUF2bkQsRUFBQUMsR0FBaUIsT0FBT2pMLE1BQUFnTCxFQUFBOUksT0FBQStJLEVBQUF3VyxNQUFBazZCLEdBQUExd0MsSUFBOEIsSUFBQXVuRCxHQUFBLENBQVF6c0IsUUFBQSxNQUFhMHNCLEdBQUEsS0FBQUMsR0FBQSxLQUFBQyxHQUFBLEtBQXlCLFNBQUFDLEdBQUE1bkQsRUFBQUMsR0FBaUIsSUFBQTdMLEVBQUE0TCxFQUFBdEcsS0FBQXFyQyxTQUFzQnpDLEdBQUFrbEIsR0FBQXB6RCxFQUFBc3dDLGVBQXdCdHdDLEVBQUFzd0MsY0FBQXprQyxFQUFrQixTQUFBNG5ELEdBQUE3bkQsR0FBZSxJQUFBQyxFQUFBdW5ELEdBQUF6c0IsUUFBaUJtSCxHQUFBc2xCLElBQVF4bkQsRUFBQXRHLEtBQUFxckMsU0FBQUwsY0FBQXprQyxFQUFnQyxTQUFBNm5ELEdBQUE5bkQsR0FBZXluRCxHQUFBem5ELEVBQUsybkQsR0FBQUQsR0FBQSxLQUFXMW5ELEVBQUF1a0QsdUJBQUEsS0FDNVIsU0FBQXdELEdBQUEvbkQsRUFBQUMsR0FBNk4sT0FBNU0wbkQsS0FBQTNuRCxJQUFBLElBQUFDLEdBQUEsSUFBQUEsSUFBMEIsaUJBQUFBLEdBQUEsYUFBQUEsSUFBQTBuRCxHQUFBM25ELEVBQUFDLEVBQUEsWUFBeURBLEVBQUEsQ0FBR3RGLFFBQUFxRixFQUFBZ29ELGFBQUEvbkQsRUFBQThDLEtBQUEsTUFBb0MsT0FBQTJrRCxJQUFBLE9BQUFELElBQUF4eUQsRUFBQSxPQUFBd3lELEdBQUFsRCx1QkFBQW1ELEdBQUF6bkQsR0FBQXluRCxNQUFBM2tELEtBQUE5QyxHQUFrRkQsRUFBQTBrQyxjQUF1QixJQUFBdWpCLEdBQUEsR0FBUzlrQixHQUFBLENBQUlwSSxRQUFBa3RCLElBQVdDLEdBQUEsQ0FBS250QixRQUFBa3RCLElBQVdFLEdBQUEsQ0FBS3B0QixRQUFBa3RCLElBQVksU0FBQUcsR0FBQXBvRCxHQUFzQyxPQUF2QkEsSUFBQWlvRCxJQUFBaHpELEVBQUEsT0FBdUIrSyxFQUNuVixTQUFBcW9ELEdBQUFyb0QsRUFBQUMsR0FBaUJxaUMsR0FBQTZsQixHQUFBbG9ELEdBQVVxaUMsR0FBQTRsQixHQUFBbG9ELEdBQVVzaUMsR0FBQWEsR0FBQThrQixJQUFVLElBQUE3ekQsRUFBQTZMLEVBQUExRyxTQUFpQixPQUFBbkYsR0FBVSxlQUFBNkwsT0FBQThGLGlCQUFBOUYsRUFBQTYrQyxhQUFBSCxHQUFBLFNBQWtFLE1BQU0sUUFBQTErQyxFQUFBMCtDLEdBQUExK0MsR0FBQTdMLEVBQUEsSUFBQUEsRUFBQTZMLEVBQUEzRixXQUFBMkYsR0FBQTYrQyxjQUFBLEtBQUExcUQsSUFBQWswRCxTQUE0RXBtQixHQUFBaUIsSUFBT2IsR0FBQWEsR0FBQWxqQyxHQUFTLFNBQUFzb0QsR0FBQXZvRCxHQUFla2lDLEdBQUFpQixJQUFPakIsR0FBQWdtQixJQUFRaG1CLEdBQUFpbUIsSUFBUSxTQUFBSyxHQUFBeG9ELEdBQWVvb0QsR0FBQUQsR0FBQXB0QixTQUFlLElBQUE5NkIsRUFBQW1vRCxHQUFBamxCLEdBQUFwSSxTQUFvQjNtQyxFQUFBdXFELEdBQUExK0MsRUFBQUQsRUFBQXRHLE1BQW1CdUcsSUFBQTdMLElBQUFrdUMsR0FBQTRsQixHQUFBbG9ELEdBQUFzaUMsR0FBQWEsR0FBQS91QyxJQUE0QixTQUFBcTBELEdBQUF6b0QsR0FBZWtvRCxHQUFBbnRCLFVBQUEvNkIsSUFBQWtpQyxHQUFBaUIsSUFBQWpCLEdBQUFnbUIsS0FDcFksU0FBQTlrQixHQUFBcGpDLEVBQUFDLEdBQWdCLEdBQUFELEtBQUFnakMsYUFBaUQsUUFBQTV1QyxLQUEzQjZMLEVBQUF6SyxFQUFBLEdBQU15SyxHQUFJRCxJQUFBZ2pDLGtCQUFpQixJQUFBL2lDLEVBQUE3TCxLQUFBNkwsRUFBQTdMLEdBQUE0TCxFQUFBNUwsSUFBMEMsT0FBQTZMLEVBQWtTLElBQUF5b0QsR0FBQWpaLEdBQUF4SixrQkFBQTBpQixJQUFBLElBQUFwbkIsRUFBQStDLFdBQUF2QyxLQUM3WSxTQUFBNm1CLEdBQUE1b0QsRUFBQUMsRUFBQTdMLEVBQUFDLEdBQWdERCxFQUFBLE9BQVRBLElBQUFDLEVBQWxCNEwsRUFBQUQsRUFBQXdrRCxnQkFBMkJ2a0QsRUFBQXpLLEVBQUEsR0FBNkJ5SyxFQUFBN0wsR0FBTTRMLEVBQUF3a0QsY0FBQXB3RCxFQUFrQyxRQUFoQkMsRUFBQTJMLEVBQUF5a0QsY0FBZ0IsSUFBQXprRCxFQUFBK2tELGlCQUFBMXdELEVBQUFneUQsVUFBQWp5RCxHQUNySCxJQUFBeTBELEdBQUEsQ0FBUXBuQixVQUFBLFNBQUF6aEMsR0FBc0IsU0FBQUEsSUFBQThvRCxzQkFBQSxJQUFBL1MsR0FBQS8xQyxJQUE2QzRoQyxnQkFBQSxTQUFBNWhDLEVBQUFDLEVBQUE3TCxHQUFpQzRMLElBQUE4b0Qsb0JBQXdCLElBQUF6MEQsRUFBQTAwRCxLQUFxQjlsRCxFQUFBNGpELEdBQVZ4eUQsRUFBQTIwRCxHQUFBMzBELEVBQUEyTCxJQUFzQmlELEVBQUE2akQsUUFBQTdtRCxFQUFZLE1BQUE3TCxJQUFBNk8sRUFBQXZILFNBQUF0SCxHQUFxQzYwRCxLQUFLakMsR0FBQWhuRCxFQUFBaUQsR0FBUWltRCxHQUFBbHBELEVBQUEzTCxJQUFRc3RDLG9CQUFBLFNBQUEzaEMsRUFBQUMsRUFBQTdMLEdBQXFDNEwsSUFBQThvRCxvQkFBd0IsSUFBQXowRCxFQUFBMDBELEtBQXFCOWxELEVBQUE0akQsR0FBVnh5RCxFQUFBMjBELEdBQUEzMEQsRUFBQTJMLElBQXNCaUQsRUFBQTZELElBQUEsRUFBUTdELEVBQUE2akQsUUFBQTdtRCxFQUFZLE1BQUE3TCxJQUFBNk8sRUFBQXZILFNBQUF0SCxHQUFxQzYwRCxLQUFLakMsR0FBQWhuRCxFQUFBaUQsR0FBUWltRCxHQUFBbHBELEVBQUEzTCxJQUFRcXRDLG1CQUFBLFNBQUExaEMsRUFBQUMsR0FBa0NELElBQUE4b0Qsb0JBQXdCLElBQUExMEQsRUFBQTIwRCxLQUFxQjEwRCxFQUFBd3lELEdBQVZ6eUQsRUFBQTQwRCxHQUFBNTBELEVBQUE0TCxJQUFzQjNMLEVBQUF5UyxJQUNsZixFQUFFLE1BQUE3RyxJQUFBNUwsRUFBQXFILFNBQUF1RSxHQUFxQ2dwRCxLQUFLakMsR0FBQWhuRCxFQUFBM0wsR0FBUTYwRCxHQUFBbHBELEVBQUE1TCxLQUFVLFNBQUErMEQsR0FBQW5wRCxFQUFBQyxFQUFBN0wsRUFBQUMsRUFBQTRPLEVBQUFvK0IsRUFBQUYsR0FBeUMseUJBQWRuaEMsSUFBQTBvQyxXQUFjMGdCLHNCQUFBcHBELEVBQUFvcEQsc0JBQUEvMEQsRUFBQWd0QyxFQUFBRixJQUFBbGhDLEVBQUF0SyxZQUFBc0ssRUFBQXRLLFVBQUE0c0Msd0JBQUF1VCxHQUFBMWhELEVBQUFDLEtBQUF5aEQsR0FBQTd5QyxFQUFBbytCLElBQ3ZHLFNBQUFnb0IsR0FBQXJwRCxFQUFBQyxFQUFBN0wsR0FBbUIsSUFBQUMsR0FBQSxFQUFBNE8sRUFBQWlnRCxHQUFjN2hCLEVBQUFwaEMsRUFBQXFwRCxZQUFvWixNQUFoWSxpQkFBQWpvQixHQUFBLE9BQUFBLElBQUFxbkIsR0FBQWptQixrQkFBQThtQixZQUFBbG9CLElBQUFwK0IsRUFBQTAvQixHQUFBMWlDLEdBQUFrakQsR0FBQTNnQixHQUFBekgsUUFBQXNHLEdBQUFodEMsRUFBQSxPQUFBQSxFQUFBNEwsRUFBQW9qRCxlQUFBRCxHQUFBcGpELEVBQUFpRCxHQUFBaWdELElBQWlKampELEVBQUEsSUFBQUEsRUFBQTdMLEVBQUFpdEMsR0FBYXJoQyxFQUFBd2tELGNBQUEsT0FBQXZrRCxFQUFBb1UsWUFBQSxJQUFBcFUsRUFBQW9VLE1BQUFwVSxFQUFBb1UsTUFBQSxLQUE4RHBVLEVBQUEraEMsUUFBQTZtQixHQUFhN29ELEVBQUEwb0MsVUFBQXpvQyxFQUFjQSxFQUFBNm9ELG9CQUFBOW9ELEVBQXdCM0wsS0FBQTJMLElBQUEwb0MsV0FBQTRhLDRDQUFBcmdELEVBQUFqRCxFQUFBdWpELDBDQUFBbGlCLEdBQWlIcGhDLEVBQ3JiLFNBQUF1cEQsR0FBQXhwRCxFQUFBQyxFQUFBN0wsRUFBQUMsR0FBcUIyTCxFQUFBQyxFQUFBb1UsTUFBVSxtQkFBQXBVLEVBQUF3cEQsMkJBQUF4cEQsRUFBQXdwRCwwQkFBQXIxRCxFQUFBQyxHQUFrRixtQkFBQTRMLEVBQUF5cEQsa0NBQUF6cEQsRUFBQXlwRCxpQ0FBQXQxRCxFQUFBQyxHQUFnRzRMLEVBQUFvVSxRQUFBclUsR0FBQTZvRCxHQUFBbG5CLG9CQUFBMWhDLElBQUFvVSxNQUFBLE1BQ2pOLFNBQUFzMUMsR0FBQTNwRCxFQUFBQyxFQUFBN0wsRUFBQUMsR0FBcUIsSUFBQTRPLEVBQUFqRCxFQUFBMG9DLFVBQWtCemxDLEVBQUFvZSxNQUFBanRCLEVBQVU2TyxFQUFBb1IsTUFBQXJVLEVBQUF3a0QsY0FBd0J2aEQsRUFBQTgrQixLQUFBNG1CLEdBQVUsSUFBQXRuQixFQUFBcGhDLEVBQUFxcEQsWUFBb0IsaUJBQUFqb0IsR0FBQSxPQUFBQSxFQUFBcCtCLEVBQUF0SSxRQUFBK3RELEdBQUFqbUIsa0JBQUE4bUIsWUFBQWxvQixNQUFBc0IsR0FBQTFpQyxHQUFBa2pELEdBQUEzZ0IsR0FBQXpILFFBQUE5M0IsRUFBQXRJLFFBQUF5b0QsR0FBQXBqRCxFQUFBcWhDLElBQW9JLFFBQWhCQSxFQUFBcmhDLEVBQUF5a0QsZUFBZ0IyQyxHQUFBcG5ELEVBQUFxaEMsRUFBQWp0QyxFQUFBNk8sRUFBQTVPLEdBQUE0TyxFQUFBb1IsTUFBQXJVLEVBQUF3a0QsZUFBK0UsbUJBQTdCbmpCLEVBQUFwaEMsRUFBQTJwRCw0QkFBNkJoQixHQUFBNW9ELEVBQUFDLEVBQUFvaEMsRUFBQWp0QyxHQUFBNk8sRUFBQW9SLE1BQUFyVSxFQUFBd2tELGVBQTZELG1CQUFBdmtELEVBQUEycEQsMEJBQUEsbUJBQUEzbUQsRUFBQTRtRCx5QkFBQSxtQkFBQTVtRCxFQUFBNm1ELDJCQUN2WCxtQkFBQTdtRCxFQUFBOG1ELHFCQUFBOXBELEVBQUFnRCxFQUFBb1IsTUFBQSxtQkFBQXBSLEVBQUE4bUQsb0JBQUE5bUQsRUFBQThtRCxxQkFBQSxtQkFBQTltRCxFQUFBNm1ELDJCQUFBN21ELEVBQUE2bUQsNEJBQUE3cEQsSUFBQWdELEVBQUFvUixPQUFBdzBDLEdBQUFsbkIsb0JBQUExK0IsSUFBQW9SLE1BQUEsY0FBQWd0QixFQUFBcmhDLEVBQUF5a0QsZUFBQTJDLEdBQUFwbkQsRUFBQXFoQyxFQUFBanRDLEVBQUE2TyxFQUFBNU8sR0FBQTRPLEVBQUFvUixNQUFBclUsRUFBQXdrRCxnQkFBNFQsbUJBQUF2aEQsRUFBQSttRCxvQkFBQWhxRCxFQUFBZzJDLFdBQUEsR0FBMEQsSUFBQWlVLEdBQUFydEQsTUFBQUMsUUFDdFgsU0FBQXF0RCxHQUFBbHFELEVBQUFDLEVBQUE3TCxHQUEyQixXQUFSNEwsRUFBQTVMLEVBQUF3dUMsTUFBUSxtQkFBQTVpQyxHQUFBLGlCQUFBQSxFQUFBLENBQXlELEdBQUE1TCxFQUFBOHVDLE9BQUEsQ0FBYTl1QyxJQUFBOHVDLE9BQVcsSUFBQTd1QyxPQUFBLEVBQWFELElBQUEsSUFBQUEsRUFBQTBTLEtBQUE3UixFQUFBLE9BQUFaLEVBQUFELEVBQUFzMEMsV0FBNkNyMEMsR0FBQVksRUFBQSxNQUFBK0ssR0FBb0IsSUFBQWlELEVBQUEsR0FBQWpELEVBQVcsY0FBQUMsR0FBQSxPQUFBQSxFQUFBMmlDLEtBQUEsbUJBQUEzaUMsRUFBQTJpQyxLQUFBM2lDLEVBQUEyaUMsSUFBQXVuQixhQUFBbG5ELEVBQUFoRCxFQUFBMmlDLE1BQXdGM2lDLEVBQUEsU0FBQUQsR0FBYyxJQUFBQyxFQUFBNUwsRUFBQTB0QyxLQUFhOWhDLElBQUEwb0QsS0FBQTFvRCxFQUFBNUwsRUFBQTB0QyxLQUFBLElBQXNCLE9BQUEvaEMsU0FBQUMsRUFBQWdELEdBQUFoRCxFQUFBZ0QsR0FBQWpELElBQTZCbXFELFdBQUFsbkQsRUFBZWhELEdBQVMsaUJBQUFELEdBQUEvSyxFQUFBLE9BQW9DYixFQUFBOHVDLFFBQUFqdUMsRUFBQSxNQUFBK0ssR0FBMkIsT0FBQUEsRUFDbGMsU0FBQW9xRCxHQUFBcHFELEVBQUFDLEdBQWlCLGFBQUFELEVBQUF0RyxNQUFBekUsRUFBQSx5QkFBQVIsT0FBQWtCLFVBQUFxRCxTQUFBOUUsS0FBQStMLEdBQUEscUJBQXFHeEwsT0FBQXFDLEtBQUFtSixHQUFBeEosS0FBQSxVQUE4QndKLEVBQUEsSUFDcEosU0FBQW9xRCxHQUFBcnFELEdBQWUsU0FBQUMsSUFBQTdMLEdBQWdCLEdBQUE0TCxFQUFBLENBQU0sSUFBQTNMLEVBQUE0TCxFQUFBMGtELFdBQW1CLE9BQUF0d0QsS0FBQXd3RCxXQUFBendELEVBQUE2TCxFQUFBMGtELFdBQUF2d0QsR0FBQTZMLEVBQUEya0QsWUFBQTNrRCxFQUFBMGtELFdBQUF2d0QsRUFBc0VBLEVBQUF5d0QsV0FBQSxLQUFrQnp3RCxFQUFBNGhELFVBQUEsR0FBZSxTQUFBNWhELElBQUFDLEdBQWdCLElBQUEyTCxFQUFBLFlBQWtCLEtBQUssT0FBQTNMLEdBQVM0TCxFQUFBN0wsRUFBQUMsT0FBQWlkLFFBQW9CLFlBQVksU0FBQWpkLEVBQUEyTCxFQUFBQyxHQUFnQixJQUFBRCxFQUFBLElBQUFzcUQsSUFBYyxPQUFBcnFELEdBQVMsT0FBQUEsRUFBQTNLLElBQUEwSyxFQUFBcVksSUFBQXBZLEVBQUEzSyxJQUFBMkssR0FBQUQsRUFBQXFZLElBQUFwWSxFQUFBd1IsTUFBQXhSLE9BQUFxUixRQUEwRCxPQUFBdFIsRUFBUyxTQUFBaUQsRUFBQWpELEVBQUFDLEVBQUE3TCxHQUF1RCxPQUFyQzRMLEVBQUFpbEQsR0FBQWpsRCxFQUFBQyxJQUFZd1IsTUFBQSxFQUFVelIsRUFBQXNSLFFBQUEsS0FBZXRSLEVBQVMsU0FBQXFoQyxFQUFBcGhDLEVBQUE3TCxFQUFBQyxHQUE0QixPQUFWNEwsRUFBQXdSLE1BQUFwZCxFQUFVMkwsRUFBNkIsUUFBZDNMLEVBQUE0TCxFQUFBMjFDLFlBQWN2aEQsSUFBQW9kLE9BQUFyZCxHQUFBNkwsRUFBQSsxQyxVQUNsZCxFQUFBNWhELEdBQUFDLEdBQU80TCxFQUFBKzFDLFVBQUEsRUFBYzVoRCxHQURnYUEsRUFDdlosU0FBQStzQyxFQUFBbGhDLEdBQXFELE9BQXZDRCxHQUFBLE9BQUFDLEVBQUEyMUMsWUFBQTMxQyxFQUFBKzFDLFVBQUEsR0FBdUMvMUMsRUFBUyxTQUFBbWhDLEVBQUFwaEMsRUFBQUMsRUFBQTdMLEVBQUFDLEdBQW9CLGNBQUE0TCxHQUFBLElBQUFBLEVBQUE2RyxNQUFBN0csRUFBQW9sRCxHQUFBanhELEVBQUE0TCxFQUFBOUssS0FBQWIsSUFBQSswQyxPQUFBcHBDLEVBQUFDLEtBQTREQSxFQUFBZ0QsRUFBQWhELEVBQUE3TCxJQUFXZzFDLE9BQUFwcEMsRUFBV0MsR0FBUyxTQUFBd2dDLEVBQUF6Z0MsRUFBQUMsRUFBQTdMLEVBQUFDLEdBQW9CLGNBQUE0TCxLQUFBb2tELGNBQUFqd0QsRUFBQXNGLE9BQUFyRixFQUFBNE8sRUFBQWhELEVBQUE3TCxFQUFBaXRCLFFBQUF1aEIsSUFBQXNuQixHQUFBbHFELEVBQUFDLEVBQUE3TCxHQUFBQyxFQUFBKzBDLE9BQUFwcEMsRUFBQTNMLEtBQXlGQSxFQUFBNndELEdBQUE5d0QsRUFBQXNGLEtBQUF0RixFQUFBa0IsSUFBQWxCLEVBQUFpdEIsTUFBQSxLQUFBcmhCLEVBQUE5SyxLQUFBYixJQUF5Q3V1QyxJQUFBc25CLEdBQUFscUQsRUFBQUMsRUFBQTdMLEdBQWdCQyxFQUFBKzBDLE9BQUFwcEMsRUFBVzNMLEdBQVMsU0FBQUwsRUFBQWdNLEVBQUFDLEVBQUE3TCxFQUFBQyxHQUFvQixjQUFBNEwsR0FBQSxJQUFBQSxFQUFBNkcsS0FBQTdHLEVBQUF5b0MsVUFBQThTLGdCQUFBcG5ELEVBQUFvbkQsZUFBQXY3QyxFQUFBeW9DLFVBQUE1SyxpQkFDeloxcEMsRUFBQTBwQyxpQkFBQTc5QixFQUFBcWxELEdBQUFseEQsRUFBQTRMLEVBQUE5SyxLQUFBYixJQUFBKzBDLE9BQUFwcEMsRUFBQUMsS0FBc0RBLEVBQUFnRCxFQUFBaEQsRUFBQTdMLEVBQUErYyxVQUFBLEtBQXdCaTRCLE9BQUFwcEMsRUFBV0MsR0FBUyxTQUFBOUwsRUFBQTZMLEVBQUFDLEVBQUE3TCxFQUFBQyxFQUFBOHNDLEdBQXNCLGNBQUFsaEMsR0FBQSxJQUFBQSxFQUFBNkcsTUFBQTdHLEVBQUFrbEQsR0FBQS93RCxFQUFBNEwsRUFBQTlLLEtBQUFiLEVBQUE4c0MsSUFBQWlJLE9BQUFwcEMsRUFBQUMsS0FBOERBLEVBQUFnRCxFQUFBaEQsRUFBQTdMLElBQVdnMUMsT0FBQXBwQyxFQUFXQyxHQUFTLFNBQUFwTCxFQUFBbUwsRUFBQUMsRUFBQTdMLEdBQWtCLG9CQUFBNkwsR0FBQSxpQkFBQUEsRUFBQSxPQUFBQSxFQUFBb2xELEdBQUEsR0FBQXBsRCxFQUFBRCxFQUFBOUssS0FBQWQsSUFBQWcxQyxPQUFBcHBDLEVBQUFDLEVBQW9GLG9CQUFBQSxHQUFBLE9BQUFBLEVBQUEsQ0FBa0MsT0FBQUEsRUFBQWdqQyxVQUFtQixLQUFBME0sR0FBQSxPQUFBdjdDLEVBQUE4d0QsR0FBQWpsRCxFQUFBdkcsS0FBQXVHLEVBQUEzSyxJQUFBMkssRUFBQW9oQixNQUFBLEtBQUFyaEIsRUFBQTlLLEtBQUFkLElBQUF3dUMsSUFBQXNuQixHQUFBbHFELEVBQUEsS0FBQUMsR0FBQTdMLEVBQUFnMUMsT0FBQXBwQyxFQUFBNUwsRUFBd0YsS0FBQXc3QyxHQUFBLE9BQUEzdkMsRUFBQXFsRCxHQUFBcmxELEVBQUFELEVBQUE5SyxLQUFBZCxJQUFBZzFDLE9BQUFwcEMsRUFBQUMsRUFBNkMsR0FBQWdxRCxHQUFBaHFELElBQ3JmdXdDLEdBQUF2d0MsR0FBQSxPQUFBQSxFQUFBa2xELEdBQUFsbEQsRUFBQUQsRUFBQTlLLEtBQUFkLEVBQUEsT0FBQWcxQyxPQUFBcHBDLEVBQUFDLEVBQWdEbXFELEdBQUFwcUQsRUFBQUMsR0FBUSxZQUFZLFNBQUE5SCxFQUFBNkgsRUFBQUMsRUFBQTdMLEVBQUFDLEdBQW9CLElBQUE0TyxFQUFBLE9BQUFoRCxJQUFBM0ssSUFBQSxLQUEwQixvQkFBQWxCLEdBQUEsaUJBQUFBLEVBQUEsY0FBQTZPLEVBQUEsS0FBQW0rQixFQUFBcGhDLEVBQUFDLEVBQUEsR0FBQTdMLEVBQUFDLEdBQStFLG9CQUFBRCxHQUFBLE9BQUFBLEVBQUEsQ0FBa0MsT0FBQUEsRUFBQTZ1QyxVQUFtQixLQUFBME0sR0FBQSxPQUFBdjdDLEVBQUFrQixNQUFBMk4sRUFBQTdPLEVBQUFzRixPQUFBbTJDLEdBQUExN0MsRUFBQTZMLEVBQUFDLEVBQUE3TCxFQUFBaXRCLE1BQUFsUSxTQUFBOWMsRUFBQTRPLEdBQUF3OUIsRUFBQXpnQyxFQUFBQyxFQUFBN0wsRUFBQUMsR0FBQSxLQUFpRixLQUFBdTdDLEdBQUEsT0FBQXg3QyxFQUFBa0IsTUFBQTJOLEVBQUFqUCxFQUFBZ00sRUFBQUMsRUFBQTdMLEVBQUFDLEdBQUEsS0FBeUMsR0FBQTQxRCxHQUFBNzFELElBQUFvOEMsR0FBQXA4QyxHQUFBLGNBQUE2TyxFQUFBLEtBQUE5TyxFQUFBNkwsRUFBQUMsRUFBQTdMLEVBQUFDLEVBQUEsTUFBcUQrMUQsR0FBQXBxRCxFQUFBNUwsR0FBUSxZQUFZLFNBQUF5c0MsRUFBQTdnQyxFQUFBQyxFQUFBN0wsRUFBQUMsRUFBQTRPLEdBQXNCLG9CQUFBNU8sR0FBQSxpQkFBQUEsRUFBQSxPQUMvYytzQyxFQUFBbmhDLEVBRCtjRCxFQUMvY0EsRUFBQXBMLElBQUFSLElBQUEsUUFBQUMsRUFBQTRPLEdBQTZCLG9CQUFBNU8sR0FBQSxPQUFBQSxFQUFBLENBQWtDLE9BQUFBLEVBQUE0dUMsVUFBbUIsS0FBQTBNLEdBQUEsT0FBQTN2QyxJQUFBcEwsSUFBQSxPQUFBUCxFQUFBaUIsSUFBQWxCLEVBQUFDLEVBQUFpQixNQUFBLEtBQUFqQixFQUFBcUYsT0FBQW0yQyxHQUFBMTdDLEVBQUE4TCxFQUFBRCxFQUFBM0wsRUFBQWd0QixNQUFBbFEsU0FBQWxPLEVBQUE1TyxFQUFBaUIsS0FBQW1yQyxFQUFBeGdDLEVBQUFELEVBQUEzTCxFQUFBNE8sR0FBMEcsS0FBQTJzQyxHQUFBLE9BQUE1N0MsRUFBQWlNLEVBQUFELElBQUFwTCxJQUFBLE9BQUFQLEVBQUFpQixJQUFBbEIsRUFBQUMsRUFBQWlCLE1BQUEsS0FBQWpCLEVBQUE0TyxHQUE4RCxHQUFBZ25ELEdBQUE1MUQsSUFBQW04QyxHQUFBbjhDLEdBQUEsT0FBQUYsRUFBQThMLEVBQUFELElBQUFwTCxJQUFBUixJQUFBLEtBQUFDLEVBQUE0TyxFQUFBLE1BQXdEbW5ELEdBQUFucUQsRUFBQTVMLEdBQVEsWUFBWSxTQUFBMnNDLEVBQUEvOUIsRUFBQWsrQixFQUFBQyxFQUFBWCxHQUFvQixRQUFBenNDLEVBQUEsS0FBQTBzQyxFQUFBLEtBQUF2c0MsRUFBQWd0QyxFQUFBUixFQUFBUSxFQUFBLEVBQUF0ckMsRUFBQSxLQUF1QyxPQUFBMUIsR0FBQXdzQyxFQUFBUyxFQUFBMXBDLE9BQXFCaXBDLElBQUEsQ0FBS3hzQyxFQUFBc2QsTUFBQWt2QixHQUFBOXFDLEVBQUExQixJQUFBLE1BQUEwQixFQUFBMUIsRUFBQW1kLFFBQW1DLElBQUFpQixFQUFBcGEsRUFBQThLLEVBQUE5TyxFQUFBaXRDLEVBQUFULEdBQUFGLEdBQW9CLFVBQUFsdUIsRUFBQSxDQUFhLE9BQUFwZSxNQUFBMEIsR0FBZ0IsTUFBTW1LLEdBQ3JmN0wsR0FBQSxPQUFBb2UsRUFBQXFqQyxXQUFBMzFDLEVBQUFnRCxFQUFBOU8sR0FBOEJndEMsRUFBQUUsRUFBQTl1QixFQUFBNHVCLEVBQUFSLEdBQVcsT0FBQUQsRUFBQTFzQyxFQUFBdWUsRUFBQW11QixFQUFBcHZCLFFBQUFpQixFQUF5Qm11QixFQUFBbnVCLEVBQUlwZSxFQUFBMEIsRUFBSSxHQUFBOHFDLElBQUFTLEVBQUExcEMsT0FBQSxPQUFBdEQsRUFBQTZPLEVBQUE5TyxHQUFBSCxFQUFnQyxVQUFBRyxFQUFBLENBQWEsS0FBS3dzQyxFQUFBUyxFQUFBMXBDLE9BQVdpcEMsS0FBQXhzQyxFQUFBVSxFQUFBb08sRUFBQW0rQixFQUFBVCxHQUFBRixNQUFBVSxFQUFBRSxFQUFBbHRDLEVBQUFndEMsRUFBQVIsR0FBQSxPQUFBRCxFQUFBMXNDLEVBQUFHLEVBQUF1c0MsRUFBQXB2QixRQUFBbmQsRUFBQXVzQyxFQUFBdnNDLEdBQTZELE9BQUFILEVBQVMsSUFBQUcsRUFBQUUsRUFBQTRPLEVBQUE5TyxHQUFhd3NDLEVBQUFTLEVBQUExcEMsT0FBV2lwQyxLQUFBOXFDLEVBQUFnckMsRUFBQTFzQyxFQUFBOE8sRUFBQTA5QixFQUFBUyxFQUFBVCxHQUFBRixNQUFBemdDLEdBQUEsT0FBQW5LLEVBQUErL0MsV0FBQXpoRCxFQUFBbzJELE9BQUEsT0FBQTEwRCxFQUFBUCxJQUFBcXJDLEVBQUE5cUMsRUFBQVAsS0FBQTZyQyxFQUFBRSxFQUFBeHJDLEVBQUFzckMsRUFBQVIsR0FBQSxPQUFBRCxFQUFBMXNDLEVBQUE2QixFQUFBNnFDLEVBQUFwdkIsUUFBQXpiLEVBQUE2cUMsRUFBQTdxQyxHQUFnSyxPQUF6Q21LLEdBQUE3TCxFQUFBeUMsUUFBQSxTQUFBb0osR0FBeUIsT0FBQUMsRUFBQWdELEVBQUFqRCxLQUFnQmhNLEVBQVMsU0FBQXN2QyxFQUFBcmdDLEVBQUFrK0IsRUFBQUMsRUFBQVgsR0FBb0IsSUFBQXpzQyxFQUFBdzhDLEdBQUFwUCxHQUFZLG1CQUFBcHRDLEdBQUFpQixFQUFBLE9BQWtELE9BQVptc0MsRUFBQXB0QyxFQUFBRSxLQUFBa3RDLEtBQVluc0MsRUFBQSxPQUNoZSxRQUFBZCxFQUFBSCxFQUFBLEtBQUEwc0MsRUFBQVMsRUFBQVIsRUFBQVEsRUFBQSxFQUFBdHJDLEVBQUEsS0FBQTBjLEVBQUE2dUIsRUFBQXIrQixPQUE2QyxPQUFBMjlCLElBQUFudUIsRUFBQTdTLEtBQWtCaWhDLElBQUFwdUIsRUFBQTZ1QixFQUFBcitCLE9BQUEsQ0FBZ0IyOUIsRUFBQWp2QixNQUFBa3ZCLEdBQUE5cUMsRUFBQTZxQyxJQUFBLE1BQUE3cUMsRUFBQTZxQyxFQUFBcHZCLFFBQW1DLElBQUF5dkIsRUFBQTVvQyxFQUFBOEssRUFBQXk5QixFQUFBbnVCLEVBQUF2ZCxNQUFBeXJDLEdBQXVCLFVBQUFNLEVBQUEsQ0FBYUwsTUFBQTdxQyxHQUFTLE1BQU1tSyxHQUFBMGdDLEdBQUEsT0FBQUssRUFBQTZVLFdBQUEzMUMsRUFBQWdELEVBQUF5OUIsR0FBaUNTLEVBQUFFLEVBQUFOLEVBQUFJLEVBQUFSLEdBQVcsT0FBQXhzQyxFQUFBSCxFQUFBK3NDLEVBQUE1c0MsRUFBQW1kLFFBQUF5dkIsRUFBeUI1c0MsRUFBQTRzQyxFQUFJTCxFQUFBN3FDLEVBQUksR0FBQTBjLEVBQUE3UyxLQUFBLE9BQUF0TCxFQUFBNk8sRUFBQXk5QixHQUFBMXNDLEVBQTBCLFVBQUEwc0MsRUFBQSxDQUFhLE1BQUtudUIsRUFBQTdTLEtBQVFpaEMsSUFBQXB1QixFQUFBNnVCLEVBQUFyK0IsT0FBQSxRQUFBd1AsRUFBQTFkLEVBQUFvTyxFQUFBc1AsRUFBQXZkLE1BQUF5ckMsTUFBQVUsRUFBQUUsRUFBQTl1QixFQUFBNHVCLEVBQUFSLEdBQUEsT0FBQXhzQyxFQUFBSCxFQUFBdWUsRUFBQXBlLEVBQUFtZCxRQUFBaUIsRUFBQXBlLEVBQUFvZSxHQUFvRixPQUFBdmUsRUFBUyxJQUFBMHNDLEVBQUFyc0MsRUFBQTRPLEVBQUF5OUIsSUFBYW51QixFQUFBN1MsS0FBUWloQyxJQUFBcHVCLEVBQUE2dUIsRUFBQXIrQixPQUFBLFFBQUF3UCxFQUFBc3VCLEVBQUFILEVBQUF6OUIsRUFBQTA5QixFQUFBcHVCLEVBQUF2ZCxNQUFBeXJDLE1BQUF6Z0MsR0FBQSxPQUFBdVMsRUFBQXFqQyxXQUFBbFYsRUFBQTZwQixPQUFBLE9BQUFoNEMsRUFBQWpkLElBQUFxckMsRUFDeFpwdUIsRUFBQWpkLEtBQUE2ckMsRUFBQUUsRUFBQTl1QixFQUFBNHVCLEVBQUFSLEdBQUEsT0FBQXhzQyxFQUFBSCxFQUFBdWUsRUFBQXBlLEVBQUFtZCxRQUFBaUIsRUFBQXBlLEVBQUFvZSxHQUF5RixPQUF6Q3ZTLEdBQUEwZ0MsRUFBQTlwQyxRQUFBLFNBQUFvSixHQUF5QixPQUFBQyxFQUFBZ0QsRUFBQWpELEtBQWdCaE0sRUFBUyxnQkFBQWdNLEVBQUEzTCxFQUFBZ3RDLEVBQUFELEdBQXlCLElBQUFYLEVBQUEsaUJBQUFZLEdBQUEsT0FBQUEsS0FBQTNuQyxPQUFBbTJDLElBQUEsT0FBQXhPLEVBQUEvckMsSUFBK0RtckMsSUFBQVksSUFBQWhnQixNQUFBbFEsVUFBd0IsSUFBQW5kLEVBQUEsaUJBQUFxdEMsR0FBQSxPQUFBQSxFQUFvQyxHQUFBcnRDLEVBQUEsT0FBQXF0QyxFQUFBNEIsVUFBd0IsS0FBQTBNLEdBQUEzdkMsRUFBQSxDQUFtQixJQUFSaE0sRUFBQXF0QyxFQUFBL3JDLElBQVFtckMsRUFBQXBzQyxFQUFRLE9BQUFvc0MsR0FBUyxDQUFFLEdBQUFBLEVBQUFuckMsTUFBQXRCLEVBQUEsUUFBQXlzQyxFQUFBMzVCLElBQUF1NkIsRUFBQTNuQyxPQUFBbTJDLEdBQUFwUCxFQUFBNGpCLGNBQUFoakIsRUFBQTNuQyxLQUFBLENBQThEdEYsRUFBQTRMLEVBQUF5Z0MsRUFBQW52QixVQUFlamQsRUFBQTRPLEVBQUF3OUIsRUFBQVksRUFBQTNuQyxPQUFBbTJDLEdBQUF4TyxFQUFBaGdCLE1BQUFsUSxTQUFBa3dCLEVBQUFoZ0IsUUFBOEN1aEIsSUFBQXNuQixHQUFBbHFELEVBQUF5Z0MsRUFBQVksR0FBZ0JodEMsRUFBQSswQyxPQUFBcHBDLEVBQVdBLEVBQUEzTCxFQUFJLE1BQUEyTCxFQUFhNUwsRUFBQTRMLEVBQUF5Z0MsR0FBTyxNQUFNeGdDLEVBQUFELEVBQUF5Z0MsR0FBWUEsRUFDcGZBLEVBQUFudkIsUUFBVSt2QixFQUFBM25DLE9BQUFtMkMsS0FBQXg3QyxFQUFBOHdELEdBQUE5akIsRUFBQWhnQixNQUFBbFEsU0FBQW5SLEVBQUE5SyxLQUFBa3NDLEVBQUFDLEVBQUEvckMsTUFBQTh6QyxPQUFBcHBDLElBQUEzTCxLQUFBK3NDLEVBQUE4akIsR0FBQTdqQixFQUFBM25DLEtBQUEybkMsRUFBQS9yQyxJQUFBK3JDLEVBQUFoZ0IsTUFBQSxLQUFBcmhCLEVBQUE5SyxLQUFBa3NDLElBQUF3QixJQUFBc25CLEdBQUFscUQsRUFBQTNMLEVBQUFndEMsR0FBQUQsRUFBQWdJLE9BQUFwcEMsSUFBQW9oQyxHQUE2SSxPQUFBRCxFQUFBbmhDLEdBQVksS0FBQTR2QyxHQUFBNXZDLEVBQUEsQ0FBVyxJQUFBeWdDLEVBQUFZLEVBQUEvckMsSUFBWSxPQUFBakIsR0FBUyxDQUFFLEdBQUFBLEVBQUFpQixNQUFBbXJDLEVBQUEsUUFBQXBzQyxFQUFBeVMsS0FBQXpTLEVBQUFxMEMsVUFBQThTLGdCQUFBbmEsRUFBQW1hLGVBQUFubkQsRUFBQXEwQyxVQUFBNUssaUJBQUF1RCxFQUFBdkQsZUFBQSxDQUF1SDFwQyxFQUFBNEwsRUFBQTNMLEVBQUFpZCxVQUFlamQsRUFBQTRPLEVBQUE1TyxFQUFBZ3RDLEVBQUFsd0IsVUFBQSxLQUF3Qmk0QixPQUFBcHBDLEVBQVdBLEVBQUEzTCxFQUFJLE1BQUEyTCxFQUFhNUwsRUFBQTRMLEVBQUEzTCxHQUFPLE1BQU00TCxFQUFBRCxFQUFBM0wsR0FBWUEsSUFBQWlkLFNBQVlqZCxFQUFBaXhELEdBQUFqa0IsRUFBQXJoQyxFQUFBOUssS0FBQWtzQyxJQUFpQmdJLE9BQUFwcEMsRUFBV0EsRUFBQTNMLEVBQUksT0FBQThzQyxFQUFBbmhDLEdBQVksb0JBQUFxaEMsR0FBQSxpQkFBQUEsRUFBQSxPQUFBQSxFQUNoZCxHQUFBQSxFQUFBLE9BQUFodEMsR0FBQSxJQUFBQSxFQUFBeVMsS0FBQTFTLEVBQUE0TCxFQUFBM0wsRUFBQWlkLFVBQUFqZCxFQUFBNE8sRUFBQTVPLEVBQUFndEMsSUFBQStILE9BQUFwcEMsSUFBQTNMLElBQUFELEVBQUE0TCxFQUFBM0wsTUFBQWd4RCxHQUFBaGtCLEVBQUFyaEMsRUFBQTlLLEtBQUFrc0MsSUFBQWdJLE9BQUFwcEMsSUFBQTNMLEdBQUE4c0MsRUFBQW5oQyxHQUFrSCxHQUFBaXFELEdBQUE1b0IsR0FBQSxPQUFBTCxFQUFBaGhDLEVBQUEzTCxFQUFBZ3RDLEVBQUFELEdBQTJCLEdBQUFvUCxHQUFBblAsR0FBQSxPQUFBaUMsRUFBQXRqQyxFQUFBM0wsRUFBQWd0QyxFQUFBRCxHQUFzQyxHQUFYcHRDLEdBQUFvMkQsR0FBQXBxRCxFQUFBcWhDLFFBQVcsSUFBQUEsSUFBQVosRUFBQSxPQUFBemdDLEVBQUE4RyxLQUE0QyxjQUFBN1IsRUFBQSxPQUFBbXNDLEVBQUFwaEMsRUFBQXRHLE1BQUFnM0MsYUFBQXRQLEVBQUE5c0MsTUFBQSxhQUFtRSxPQUFBRixFQUFBNEwsRUFBQTNMLElBQWUsSUFBQW0yRCxHQUFBSCxJQUFBLEdBQUFJLEdBQUFKLElBQUEsR0FBQUssR0FBQSxLQUFBQyxHQUFBLEtBQUFDLElBQUEsRUFDalQsU0FBQUMsR0FBQTdxRCxFQUFBQyxHQUFpQixJQUFBN0wsRUFBQTJ1QyxHQUFBLGVBQXVCM3VDLEVBQUFpd0QsWUFBQSxVQUF3Qmp3RCxFQUFBc0YsS0FBQSxVQUFpQnRGLEVBQUFzMEMsVUFBQXpvQyxFQUFjN0wsRUFBQWcxQyxPQUFBcHBDLEVBQVc1TCxFQUFBNGhELFVBQUEsRUFBYyxPQUFBaDJDLEVBQUEya0QsWUFBQTNrRCxFQUFBMmtELFdBQUFFLFdBQUF6d0QsRUFBQTRMLEVBQUEya0QsV0FBQXZ3RCxHQUFBNEwsRUFBQTRrRCxZQUFBNWtELEVBQUEya0QsV0FBQXZ3RCxFQUE0RixTQUFBMDJELEdBQUE5cUQsRUFBQUMsR0FBaUIsT0FBQUQsRUFBQThHLEtBQWMsV0FBQTFTLEVBQUE0TCxFQUFBdEcsS0FBd0YsZUFBcEV1RyxFQUFBLElBQUFBLEVBQUExRyxVQUFBbkYsRUFBQWtLLGdCQUFBMkIsRUFBQWdFLFNBQUEzRixjQUFBLEtBQUEyQixLQUFvRUQsRUFBQTBvQyxVQUFBem9DLEdBQUEsR0FBc0Msc0JBQUFBLEVBQUEsS0FBQUQsRUFBQXNrRCxjQUFBLElBQUFya0QsRUFBQTFHLFNBQUEsS0FBQTBHLEtBQUFELEVBQUEwb0MsVUFBQXpvQyxHQUFBLEdBQTBGLGtCQUMzYyxTQUFBOHFELEdBQUEvcUQsR0FBZSxHQUFBNHFELEdBQUEsQ0FBTyxJQUFBM3FELEVBQUEwcUQsR0FBUyxHQUFBMXFELEVBQUEsQ0FBTSxJQUFBN0wsRUFBQTZMLEVBQVEsSUFBQTZxRCxHQUFBOXFELEVBQUFDLEdBQUEsQ0FBcUIsS0FBUkEsRUFBQTRpRCxHQUFBenVELE1BQVEwMkQsR0FBQTlxRCxFQUFBQyxHQUEyQyxPQUExQkQsRUFBQWcyQyxXQUFBLEVBQWU0VSxJQUFBLE9BQU1GLEdBQUExcUQsR0FBWTZxRCxHQUFBSCxHQUFBdDJELEdBQVNzMkQsR0FBQTFxRCxFQUFLMnFELEdBQUE3SCxHQUFBN2lELFFBQVNELEVBQUFnMkMsV0FBQSxFQUFBNFUsSUFBQSxFQUFBRixHQUFBMXFELEdBQWdDLFNBQUFnckQsR0FBQWhyRCxHQUFlLElBQUFBLElBQUFvcEMsT0FBZSxPQUFBcHBDLEdBQUEsSUFBQUEsRUFBQThHLEtBQUEsSUFBQTlHLEVBQUE4RyxLQUErQjlHLElBQUFvcEMsT0FBWXNoQixHQUFBMXFELEVBQUssU0FBQWlyRCxHQUFBanJELEdBQWUsR0FBQUEsSUFBQTBxRCxHQUFBLFNBQW1CLElBQUFFLEdBQUEsT0FBQUksR0FBQWhyRCxHQUFBNHFELElBQUEsS0FBNkIsSUFBQTNxRCxFQUFBRCxFQUFBdEcsS0FBYSxPQUFBc0csRUFBQThHLEtBQUEsU0FBQTdHLEdBQUEsU0FBQUEsSUFBQXdpRCxHQUFBeGlELEVBQUFELEVBQUEwa0QsZUFBQSxJQUFBemtELEVBQUEwcUQsR0FBc0UxcUQsR0FBRTRxRCxHQUFBN3FELEVBQUFDLEtBQUE0aUQsR0FBQTVpRCxHQUFrRCxPQUFqQytxRCxHQUFBaHJELEdBQU0ycUQsR0FBQUQsR0FBQTdILEdBQUE3aUQsRUFBQTBvQyxXQUFBLE1BQTJCLEVBQVMsU0FBQXdpQixLQUFjUCxHQUFBRCxHQUFBLEtBQVdFLElBQUEsRUFBTSxJQUFBTyxHQUFBMWIsR0FBQXhKLGtCQUN2ZSxTQUFBNUMsR0FBQXJqQyxFQUFBQyxFQUFBN0wsRUFBQUMsR0FBb0I0TCxFQUFBazJDLE1BQUEsT0FBQW4yQyxFQUFBeXFELEdBQUF4cUQsRUFBQSxLQUFBN0wsRUFBQUMsR0FBQW0yRCxHQUFBdnFELEVBQUFELEVBQUFtMkMsTUFBQS9oRCxFQUFBQyxHQUFrRCxTQUFBKzJELEdBQUFwckQsRUFBQUMsRUFBQTdMLEVBQUFDLEVBQUE0TyxHQUF1QjdPLElBQUE2d0MsT0FBVyxJQUFBNUQsRUFBQXBoQyxFQUFBMmlDLElBQXVELE9BQTNDa2xCLEdBQUE3bkQsR0FBUTVMLEVBQUFELEVBQUFDLEVBQUFndEMsR0FBU3BoQyxFQUFBKzFDLFdBQUEsRUFBZTNTLEdBQUFyakMsRUFBQUMsRUFBQTVMLEVBQUE0TyxHQUFXaEQsRUFBQWsyQyxNQUMvSixTQUFBa1YsR0FBQXJyRCxFQUFBQyxFQUFBN0wsRUFBQUMsRUFBQTRPLEVBQUFvK0IsR0FBeUIsVUFBQXJoQyxFQUFBLENBQWEsSUFBQW1oQyxFQUFBL3NDLEVBQUFzRixLQUFhLHlCQUFBeW5DLEdBQUE2akIsR0FBQTdqQixTQUFBLElBQUFBLEVBQUE2QixjQUFBLE9BQUE1dUMsRUFBQXVULGNBQUEsSUFBQXZULEVBQUE0dUMsZUFBOEloakMsRUFBQWtsRCxHQUFBOXdELEVBQUFzRixLQUFBLEtBQUFyRixFQUFBLEtBQUE0TCxFQUFBL0ssS0FBQW1zQyxJQUFrQ3VCLElBQUEzaUMsRUFBQTJpQyxJQUFZNWlDLEVBQUFvcEMsT0FBQW5wQyxFQUFXQSxFQUFBazJDLE1BQUFuMkMsSUFBdk1DLEVBQUE2RyxJQUFBLEdBQUE3RyxFQUFBdkcsS0FBQXluQyxFQUFBbXFCLEdBQUF0ckQsRUFBQUMsRUFBQWtoQyxFQUFBOXNDLEVBQUE0TyxFQUFBbytCLElBQWtPLE9BQVZGLEVBQUFuaEMsRUFBQW0yQyxNQUFVbHpDLEVBQUFvK0IsSUFBQXArQixFQUFBaytCLEVBQUF1akIsZUFBQXR3RCxFQUFBLFFBQUFBLElBQUF1VCxTQUFBdlQsRUFBQTBoRCxJQUFBN3lDLEVBQUE1TyxJQUFBMkwsRUFBQTRpQyxNQUFBM2lDLEVBQUEyaUMsS0FBQTJvQixHQUFBdnJELEVBQUFDLEVBQUFvaEMsSUFBK0ZwaEMsRUFBQSsxQyxXQUFBLEdBQWVoMkMsRUFBQWlsRCxHQUFBOWpCLEVBQUE5c0MsSUFBWXV1QyxJQUFBM2lDLEVBQUEyaUMsSUFBWTVpQyxFQUFBb3BDLE9BQUFucEMsRUFBV0EsRUFBQWsyQyxNQUFBbjJDLEdBQ3RhLFNBQUFzckQsR0FBQXRyRCxFQUFBQyxFQUFBN0wsRUFBQUMsRUFBQTRPLEVBQUFvK0IsR0FBeUIsY0FBQXJoQyxHQUFBaUQsRUFBQW8rQixHQUFBeVUsR0FBQTkxQyxFQUFBMGtELGNBQUFyd0QsSUFBQTJMLEVBQUE0aUMsTUFBQTNpQyxFQUFBMmlDLElBQUEyb0IsR0FBQXZyRCxFQUFBQyxFQUFBb2hDLEdBQUFtcUIsR0FBQXhyRCxFQUFBQyxFQUFBN0wsRUFBQUMsRUFBQWd0QyxHQUFtRixTQUFBb3FCLEdBQUF6ckQsRUFBQUMsR0FBaUIsSUFBQTdMLEVBQUE2TCxFQUFBMmlDLEtBQVksT0FBQTVpQyxHQUFBLE9BQUE1TCxHQUFBLE9BQUE0TCxLQUFBNGlDLE1BQUF4dUMsS0FBQTZMLEVBQUErMUMsV0FBQSxLQUE0RCxTQUFBd1YsR0FBQXhyRCxFQUFBQyxFQUFBN0wsRUFBQUMsRUFBQTRPLEdBQXVCLElBQUFvK0IsRUFBQXNCLEdBQUF2dUMsR0FBQSt1RCxHQUFBM2dCLEdBQUF6SCxRQUE2RSxPQUFyRHNHLEVBQUEraEIsR0FBQW5qRCxFQUFBb2hDLEdBQVV5bUIsR0FBQTduRCxHQUFRN0wsSUFBQUMsRUFBQWd0QyxHQUFTcGhDLEVBQUErMUMsV0FBQSxFQUFlM1MsR0FBQXJqQyxFQUFBQyxFQUFBN0wsRUFBQTZPLEdBQVdoRCxFQUFBazJDLE1BQ3pTLFNBQUF1VixHQUFBMXJELEVBQUFDLEVBQUE3TCxFQUFBQyxFQUFBNE8sR0FBdUIsR0FBQTAvQixHQUFBdnVDLEdBQUEsQ0FBUyxJQUFBaXRDLEdBQUEsRUFBU3lpQixHQUFBN2pELFFBQU1vaEMsR0FBQSxFQUFrQixHQUFSeW1CLEdBQUE3bkQsR0FBUSxPQUFBQSxFQUFBeW9DLFVBQUEsT0FBQTFvQyxNQUFBNDFDLFVBQUEsS0FBQTMxQyxFQUFBMjFDLFVBQUEsS0FBQTMxQyxFQUFBKzFDLFdBQUEsR0FBQXFULEdBQUFwcEQsRUFBQTdMLEVBQUFDLEdBQUFzMUQsR0FBQTFwRCxFQUFBN0wsRUFBQUMsRUFBQTRPLEdBQUE1TyxHQUFBLE9BQWdILFVBQUEyTCxFQUFBLENBQWtCLElBQUFtaEMsRUFBQWxoQyxFQUFBeW9DLFVBQUF0SCxFQUFBbmhDLEVBQUF5a0QsY0FBb0N2akIsRUFBQTlmLE1BQUErZixFQUFVLElBQUFYLEVBQUFVLEVBQUF4bUMsUUFBQTNHLEVBQUFJLEVBQUFrMUQsWUFBZ0MsaUJBQUF0MUQsR0FBQSxPQUFBQSxJQUFBMDBELEdBQUFqbUIsa0JBQUE4bUIsWUFBQXYxRCxLQUFBb3ZELEdBQUFuakQsRUFBQWpNLEVBQUEydUMsR0FBQXZ1QyxHQUFBK3VELEdBQUEzZ0IsR0FBQXpILFNBQW9HLElBQUE1bUMsRUFBQUMsRUFBQXcxRCx5QkFBQS8wRCxFQUFBLG1CQUFBVixHQUFBLG1CQUFBZ3RDLEVBQUEwb0Isd0JBQXdHaDFELEdBQUEsbUJBQUFzc0MsRUFBQXVvQixrQ0FDN2QsbUJBQUF2b0IsRUFBQXNvQiw0QkFBQXJvQixJQUFBL3NDLEdBQUFvc0MsSUFBQXpzQyxJQUFBdzFELEdBQUF2cEQsRUFBQWtoQyxFQUFBOXNDLEVBQUFMLEdBQTZFbXlELElBQUEsRUFBTSxJQUFBaHVELEVBQUE4SCxFQUFBdWtELGNBQXNCL2pCLEVBQUFVLEVBQUE5c0IsTUFBQWxjLEVBQVksSUFBQTBvQyxFQUFBNWdDLEVBQUF3a0QsWUFBb0IsT0FBQTVqQixJQUFBdW1CLEdBQUFubkQsRUFBQTRnQyxFQUFBeHNDLEVBQUE4c0MsRUFBQWwrQixHQUFBdzlCLEVBQUF4Z0MsRUFBQXVrRCxlQUE0Q3BqQixJQUFBL3NDLEdBQUE4RCxJQUFBc29DLEdBQUFpQyxHQUFBM0gsU0FBQW9yQixJQUFBLG1CQUFBaHlELElBQUF5MEQsR0FBQTNvRCxFQUFBN0wsRUFBQUQsRUFBQUUsR0FBQW9zQyxFQUFBeGdDLEVBQUF1a0QsZ0JBQUFwakIsRUFBQStrQixJQUFBZ0QsR0FBQWxwRCxFQUFBN0wsRUFBQWd0QyxFQUFBL3NDLEVBQUE4RCxFQUFBc29DLEVBQUF6c0MsS0FBQWEsR0FBQSxtQkFBQXNzQyxFQUFBMm9CLDJCQUFBLG1CQUFBM29CLEVBQUE0b0IscUJBQUEsbUJBQUE1b0IsRUFBQTRvQixvQkFBQTVvQixFQUFBNG9CLHFCQUFBLG1CQUFBNW9CLEVBQUEyb0IsMkJBQ3JMM29CLEVBQUEyb0IsNkJBQUEsbUJBQUEzb0IsRUFBQTZvQixvQkFBQS9wRCxFQUFBKzFDLFdBQUEsd0JBQUE3VSxFQUFBNm9CLG9CQUFBL3BELEVBQUErMUMsV0FBQSxHQUFBLzFDLEVBQUF5a0QsY0FBQXJ3RCxFQUFBNEwsRUFBQXVrRCxjQUFBL2pCLEdBQUFVLEVBQUE5ZixNQUFBaHRCLEVBQUE4c0MsRUFBQTlzQixNQUFBb3NCLEVBQUFVLEVBQUF4bUMsUUFBQTNHLEVBQUFLLEVBQUErc0MsSUFBQSxtQkFBQUQsRUFBQTZvQixvQkFBQS9wRCxFQUFBKzFDLFdBQUEsR0FBQTNoRCxHQUFBLFFBQWdTOHNDLEVBQUFsaEMsRUFBQXlvQyxVQUFBdEgsRUFBQW5oQyxFQUFBeWtELGNBQUF2akIsRUFBQTlmLE1BQUFwaEIsRUFBQXZHLE9BQUF1RyxFQUFBb2tELFlBQUFqakIsRUFBQWdDLEdBQUFuakMsRUFBQXZHLEtBQUEwbkMsR0FBQVgsRUFBQVUsRUFBQXhtQyxRQUFBLGlCQUFBM0csRUFBQUksRUFBQWsxRCxjQUFBLE9BQUF0MUQsSUFBQTAwRCxHQUFBam1CLGtCQUFBOG1CLFlBQUF2MUQsS0FBQW92RCxHQUFBbmpELEVBQUFqTSxFQUFBMnVDLEdBQUF2dUMsR0FBQSt1RCxHQUFBM2dCLEdBQUF6SCxVQUNoU2xtQyxFQUFBLG1CQURnU1YsRUFBQUMsRUFBQXcxRCwyQkFDaFMsbUJBQUF6b0IsRUFBQTBvQiwwQkFBQSxtQkFBQTFvQixFQUFBdW9CLGtDQUFBLG1CQUFBdm9CLEVBQUFzb0IsNEJBQUFyb0IsSUFBQS9zQyxHQUFBb3NDLElBQUF6c0MsSUFBQXcxRCxHQUFBdnBELEVBQUFraEMsRUFBQTlzQyxFQUFBTCxHQUFBbXlELElBQUEsRUFBQTFsQixFQUFBeGdDLEVBQUF1a0QsY0FBQXJzRCxFQUFBZ3BDLEVBQUE5c0IsTUFBQW9zQixFQUFBLFFBQUFJLEVBQUE1Z0MsRUFBQXdrRCxlQUFBMkMsR0FBQW5uRCxFQUFBNGdDLEVBQUF4c0MsRUFBQThzQyxFQUFBbCtCLEdBQUE5SyxFQUFBOEgsRUFBQXVrRCxlQUFBcGpCLElBQUEvc0MsR0FBQW9zQyxJQUFBdG9DLEdBQUF1cUMsR0FBQTNILFNBQUFvckIsSUFBQSxtQkFBQWh5RCxJQUFBeTBELEdBQUEzb0QsRUFBQTdMLEVBQUFELEVBQUFFLEdBQUE4RCxFQUFBOEgsRUFBQXVrRCxnQkFBQXJ3RCxFQUFBZ3lELElBQUFnRCxHQUFBbHBELEVBQUE3TCxFQUFBZ3RDLEVBQUEvc0MsRUFBQW9zQyxFQUFBdG9DLEVBQUFuRSxLQUFBYSxHQUFBLG1CQUFBc3NDLEVBQUF3cUIsNEJBQUEsbUJBQUF4cUIsRUFBQXlxQixzQkFDQSxtQkFBQXpxQixFQUFBeXFCLHFCQUFBenFCLEVBQUF5cUIsb0JBQUF2M0QsRUFBQThELEVBQUFuRSxHQUFBLG1CQUFBbXRDLEVBQUF3cUIsNEJBQUF4cUIsRUFBQXdxQiwyQkFBQXQzRCxFQUFBOEQsRUFBQW5FLElBQUEsbUJBQUFtdEMsRUFBQTBxQixxQkFBQTVyRCxFQUFBKzFDLFdBQUEsc0JBQUE3VSxFQUFBMG9CLDBCQUFBNXBELEVBQUErMUMsV0FBQSwwQkFBQTdVLEVBQUEwcUIsb0JBQUF6cUIsSUFBQXBoQyxFQUFBMGtELGVBQUFqa0IsSUFBQXpnQyxFQUFBd2tELGdCQUFBdmtELEVBQUErMUMsV0FBQSxzQkFBQTdVLEVBQUEwb0IseUJBQUF6b0IsSUFBQXBoQyxFQUFBMGtELGVBQUFqa0IsSUFBQXpnQyxFQUFBd2tELGdCQUFBdmtELEVBQUErMUMsV0FBQSxLQUFBLzFDLEVBQUF5a0QsY0FDQXJ3RCxFQUFBNEwsRUFBQXVrRCxjQUFBcnNELEdBQUFncEMsRUFBQTlmLE1BQUFodEIsRUFBQThzQyxFQUFBOXNCLE1BQUFsYyxFQUFBZ3BDLEVBQUF4bUMsUUFBQTNHLEVBQUFLLEVBQUFGLElBQUEsbUJBQUFndEMsRUFBQTBxQixvQkFBQXpxQixJQUFBcGhDLEVBQUEwa0QsZUFBQWprQixJQUFBemdDLEVBQUF3a0QsZ0JBQUF2a0QsRUFBQSsxQyxXQUFBLHNCQUFBN1UsRUFBQTBvQix5QkFBQXpvQixJQUFBcGhDLEVBQUEwa0QsZUFBQWprQixJQUFBemdDLEVBQUF3a0QsZ0JBQUF2a0QsRUFBQSsxQyxXQUFBLEtBQUEzaEQsR0FBQSxHQUFrUixPQUFBeTNELEdBQUE5ckQsRUFBQUMsRUFBQTdMLEVBQUFDLEVBQUFndEMsRUFBQXArQixHQUNsUixTQUFBNm9ELEdBQUE5ckQsRUFBQUMsRUFBQTdMLEVBQUFDLEVBQUE0TyxFQUFBbytCLEdBQXlCb3FCLEdBQUF6ckQsRUFBQUMsR0FBUSxJQUFBa2hDLEVBQUEsT0FBQWxoQyxFQUFBKzFDLFdBQTJCLElBQUEzaEQsSUFBQThzQyxFQUFBLE9BQUFsK0IsR0FBQStnRCxHQUFBL2pELEVBQUE3TCxHQUFBLEdBQUFtM0QsR0FBQXZyRCxFQUFBQyxFQUFBb2hDLEdBQXlDaHRDLEVBQUE0TCxFQUFBeW9DLFVBQWN5aUIsR0FBQXB3QixRQUFBOTZCLEVBQWEsSUFBQW1oQyxFQUFBRCxHQUFBLG1CQUFBL3NDLEVBQUEyM0QseUJBQUEsS0FBQTEzRCxFQUFBNHdDLFNBQTBNLE9BQWxJaGxDLEVBQUErMUMsV0FBQSxFQUFlLE9BQUFoMkMsR0FBQW1oQyxHQUFBbGhDLEVBQUFrMkMsTUFBQXFVLEdBQUF2cUQsRUFBQUQsRUFBQW0yQyxNQUFBLEtBQUE5VSxHQUFBcGhDLEVBQUFrMkMsTUFBQXFVLEdBQUF2cUQsRUFBQSxLQUFBbWhDLEVBQUFDLElBQUFnQyxHQUFBcmpDLEVBQUFDLEVBQUFtaEMsRUFBQUMsR0FBNkVwaEMsRUFBQXVrRCxjQUFBbndELEVBQUFnZ0IsTUFBd0JwUixHQUFBK2dELEdBQUEvakQsRUFBQTdMLEdBQUEsR0FBYzZMLEVBQUFrMkMsTUFBZSxTQUFBNlYsR0FBQWhzRCxHQUFlLElBQUFDLEVBQUFELEVBQUEwb0MsVUFBa0J6b0MsRUFBQWdzRCxlQUFBdEksR0FBQTNqRCxFQUFBQyxFQUFBZ3NELGVBQUFoc0QsRUFBQWdzRCxpQkFBQWhzRCxFQUFBdEYsU0FBQXNGLEVBQUF0RixTQUFBZ3BELEdBQUEzakQsRUFBQUMsRUFBQXRGLFNBQUEsR0FBbUcwdEQsR0FBQXJvRCxFQUFBQyxFQUFBdTdDLGVBQzdkLFNBQUEwUSxHQUFBbHNELEVBQUFDLEVBQUE3TCxHQUFtQixJQUFBQyxFQUFBNEwsRUFBQS9LLEtBQUErTixFQUFBaEQsRUFBQXFrRCxhQUFBampCLEVBQUFwaEMsRUFBQXVrRCxjQUFnRCxVQUFBdmtELEVBQUErMUMsV0FBQSxDQUF5QjNVLEVBQUEsS0FBTyxJQUFBRixHQUFBLE9BQVNFLEVBQUEsQ0FBUThxQixXQUFBLE9BQUE5cUIsSUFBQThxQixXQUFBLEdBQW1DaHJCLEdBQUEsRUFBQWxoQyxFQUFBKzFDLFlBQUEsR0FBdUIsVUFBQWgyQyxFQUFBLEdBQUFtaEMsRUFBQSxDQUFrQixJQUFBQyxFQUFBbitCLEVBQUFtcEQsU0FBaUJwc0QsRUFBQW1sRCxHQUFBLEtBQUE5d0QsRUFBQSxRQUFvQixNQUFBNEwsRUFBQS9LLFFBQUE4SyxFQUFBbTJDLE1BQUEsT0FBQWwyQyxFQUFBdWtELGNBQUF2a0QsRUFBQWsyQyxZQUFBbDJDLEVBQUFrMkMsT0FBdUU5aEQsRUFBQTh3RCxHQUFBL2pCLEVBQUEvc0MsRUFBQUQsRUFBQSxNQUFpQjRMLEVBQUFzUixRQUFBamQsR0FBWUQsRUFBQTRMLEdBQUlvcEMsT0FBQS8wQyxFQUFBKzBDLE9BQUFucEMsT0FBb0I3TCxFQUFBQyxFQUFBbzJELEdBQUF4cUQsRUFBQSxLQUFBZ0QsRUFBQWtPLFNBQUEvYyxRQUFpQyxPQUFBNEwsRUFBQXdrRCxlQUFBcGpCLEdBQUEvc0MsRUFBQTJMLEVBQUFtMkMsT0FBQTdrQyxRQUFBNnZCLEdBQUEvc0MsRUFBQTZPLEVBQUFtcEQsU0FBQW5wRCxFQUFBZ2lELEdBQUE1d0QsSUFBQWl3RCxjQUFBLE1BQUFya0QsRUFBQS9LLFNBQUFpc0MsRUFBQSxPQUNsWWxoQyxFQUFBdWtELGNBQUF2a0QsRUFBQWsyQyxZQUFBbDJDLEVBQUFrMkMsU0FBQTloRCxFQUFBOGhELFFBQUFsekMsRUFBQWt6QyxNQUFBaFYsSUFBQTlzQyxFQUFBNE8sRUFBQXFPLFFBQUEyekMsR0FBQTdqQixFQUFBaHRDLEVBQUFndEMsRUFBQTJqQixnQkFBQTN3RCxFQUFBNk8sSUFBQTZoRCxvQkFBQSxFQUFBMXdELEVBQUFnMUMsT0FBQS8wQyxFQUFBKzBDLE9BQUFucEMsR0FBQTdMLEVBQUFDLEVBQUFtMkQsR0FBQXZxRCxFQUFBNUwsRUFBQThoRCxNQUFBbHpDLEVBQUFrTyxTQUFBL2MsS0FBQWd0QyxFQUFBcGhDLEVBQUFtMkMsTUFBQWhWLEtBQUFsK0IsRUFBQW1wRCxVQUFBbnBELEVBQUFraUQsR0FBQSxLQUFBOXdELEVBQUEsU0FBQThoRCxNQUFBL1UsRUFBQSxNQUFBbmhDLEVBQUEvSyxRQUFBK04sRUFBQWt6QyxNQUFBLE9BQUFsMkMsRUFBQXVrRCxjQUFBdmtELEVBQUFrMkMsWUFBQWwyQyxFQUFBazJDLFFBQUE5aEQsRUFBQTRPLEVBQUFxTyxRQUFBNnpDLEdBQUFoa0IsRUFBQTlzQyxFQUFBRCxFQUFBLE9BQUE0aEQsV0FBQSxFQUFBNWhELEVBQUE2TyxJQUFBNmhELG9CQUFBLEVBQUExd0QsRUFBQWcxQyxPQUFBLzBDLEVBQUErMEMsT0FBQW5wQyxHQUFBNUwsRUFBQUQsRUFBQW8yRCxHQUFBdnFELEVBQUFtaEMsRUFBQW4rQixFQUFBa08sU0FBQS9jLElBQUE2TCxFQUFBeW9DLFVBQUExb0MsRUFBQTBvQyxVQUErZCxPQUE1QnpvQyxFQUFBdWtELGNBQUFuakIsRUFBa0JwaEMsRUFBQWsyQyxNQUFBL2hELEVBQVVDLEVBQy9kLFNBQUFrM0QsR0FBQXZyRCxFQUFBQyxFQUFBN0wsR0FBaUYsR0FBOUQsT0FBQTRMLElBQUFDLEVBQUFza0QsdUJBQUF2a0QsRUFBQXVrRCx3QkFBOER0a0QsRUFBQTZrRCxvQkFBQTF3RCxFQUFBLFlBQW1GLEdBQTVDLE9BQUE0TCxHQUFBQyxFQUFBazJDLFFBQUFuMkMsRUFBQW0yQyxPQUFBbGhELEVBQUEsT0FBNEMsT0FBQWdMLEVBQUFrMkMsTUFBQSxDQUErRSxJQUFsRC9oRCxFQUFBNndELEdBQVZqbEQsRUFBQUMsRUFBQWsyQyxNQUFVbjJDLEVBQUFza0QsYUFBQXRrRCxFQUFBK2tELGdCQUF3QzlrRCxFQUFBazJDLE1BQUEvaEQsRUFBVUEsRUFBQWcxQyxPQUFBbnBDLEVBQWUsT0FBQUQsRUFBQXNSLFNBQWlCdFIsSUFBQXNSLFNBQUFsZCxJQUFBa2QsUUFBQTJ6QyxHQUFBamxELElBQUFza0QsYUFBQXRrRCxFQUFBK2tELGlCQUFBM2IsT0FBQW5wQyxFQUEwRTdMLEVBQUFrZCxRQUFBLEtBQWUsT0FBQXJSLEVBQUFrMkMsTUFDNVcsU0FBQWtXLEdBQUFyc0QsRUFBQUMsRUFBQTdMLEdBQW1CLElBQUFDLEVBQUE0TCxFQUFBOGtELGVBQXVCLFVBQUEva0QsS0FBQTBrRCxnQkFBQXprRCxFQUFBcWtELGVBQUE1aEIsR0FBQTNILFNBQUExbUMsRUFBQUQsRUFBQSxDQUFnRSxPQUFBNkwsRUFBQTZHLEtBQWMsT0FBQWtsRCxHQUFBL3JELEdBQWFpckQsS0FBSyxNQUFNLE9BQUExQyxHQUFBdm9ELEdBQWEsTUFBTSxPQUFBMGlDLEdBQUExaUMsRUFBQXZHLE9BQUFvcUQsR0FBQTdqRCxHQUF3QixNQUFNLE9BQUFvb0QsR0FBQXBvRCxJQUFBeW9DLFVBQUE4UyxlQUF1QyxNQUFNLFFBQUFvTSxHQUFBM25ELElBQUF5a0QsY0FBQTF2RCxPQUFvQyxNQUFNLGtCQUFBaUwsRUFBQXVrRCxjQUFpRSxZQUE5Qm53RCxFQUFBNEwsRUFBQWsyQyxNQUFBMk8sc0JBQThCendELEdBQUFELEVBQUE4M0QsR0FBQWxzRCxFQUFBQyxFQUFBN0wsR0FBNEMsUUFBWjZMLEVBQUFzckQsR0FBQXZyRCxFQUFBQyxFQUFBN0wsSUFBWTZMLEVBQUFxUixRQUFBLEtBQWdDLE9BQUFpNkMsR0FBQXZyRCxFQUFBQyxFQUFBN0wsR0FBb0MsT0FBbkI2TCxFQUFBOGtELGVBQUEsRUFBbUI5a0QsRUFBQTZHLEtBQWMsT0FBQXpTLEVBQUE0TCxFQUFBb2tELFlBQXVCLE9BQzllcmtELE1BQUE0MUMsVUFBQSxLQUFBMzFDLEVBQUEyMUMsVUFBQSxLQUFBMzFDLEVBQUErMUMsV0FBQSxHQUFzRGgyQyxFQUFBQyxFQUFBcWtELGFBQWlCLElBQUFyaEQsRUFBQW1nRCxHQUFBbmpELEVBQUF1aUMsR0FBQXpILFNBQXNELEdBQWhDK3NCLEdBQUE3bkQsR0FBUWdELEVBQUE1TyxFQUFBMkwsRUFBQWlELEdBQVNoRCxFQUFBKzFDLFdBQUEsRUFBZSxpQkFBQS95QyxHQUFBLE9BQUFBLEdBQUEsbUJBQUFBLEVBQUFnaUMsYUFBQSxJQUFBaGlDLEVBQUFnZ0MsU0FBQSxDQUE2RixHQUFSaGpDLEVBQUE2RyxJQUFBLEVBQVE2N0IsR0FBQXR1QyxHQUFBLENBQVMsSUFBQWd0QyxHQUFBLEVBQVN5aUIsR0FBQTdqRCxRQUFNb2hDLEdBQUEsRUFBVXBoQyxFQUFBdWtELGNBQUEsT0FBQXZoRCxFQUFBb1IsWUFBQSxJQUFBcFIsRUFBQW9SLE1BQUFwUixFQUFBb1IsTUFBQSxLQUE4RCxJQUFBOHNCLEVBQUE5c0MsRUFBQXUxRCx5QkFBaUMsbUJBQUF6b0IsR0FBQXluQixHQUFBM29ELEVBQUE1TCxFQUFBOHNDLEVBQUFuaEMsR0FBbUNpRCxFQUFBKytCLFFBQUE2bUIsR0FBYTVvRCxFQUFBeW9DLFVBQUF6bEMsRUFBY0EsRUFBQTZsRCxvQkFBQTdvRCxFQUF3QjBwRCxHQUFBMXBELEVBQUE1TCxFQUFBMkwsRUFBQTVMLEdBQVk2TCxFQUFBNnJELEdBQUEsS0FBQTdyRCxFQUFBNUwsR0FBQSxFQUFBZ3RDLEVBQUFqdEMsUUFBc0I2TCxFQUFBNkcsSUFBQSxFQUFBdThCLEdBQUEsS0FBQXBqQyxFQUFBZ0QsRUFBQTdPLEdBQUE2TCxJQUFBazJDLE1BQ25kLE9BQUFsMkMsRUFBUyxRQUF1SixPQUF2SmdELEVBQUFoRCxFQUFBb2tELFlBQXdCLE9BQUFya0QsTUFBQTQxQyxVQUFBLEtBQUEzMUMsRUFBQTIxQyxVQUFBLEtBQUEzMUMsRUFBQSsxQyxXQUFBLEdBQTZEM1UsRUFBQXBoQyxFQUFBcWtELGFBQWlCdGtELEVBckNLLFNBQUFBLEdBQWUsSUFBQUMsRUFBQUQsRUFBQXFsQyxRQUFnQixPQUFBcmxDLEVBQUFvbEMsU0FBa0IsY0FBQW5sQyxFQUFnQixPQUFlLGFBQUFBLEVBQWUsY0FBQUQsRUFBQW9sQyxRQUFBLEdBQUFubEMsS0FBQUQsRUFBQW1sQyxVQUFBbHlCLEtBQUEsU0FBQWhULEdBQTZELElBQUFELEVBQUFvbEMsVUFBQW5sQyxJQUFBa21DLFFBQUFubUMsRUFBQW9sQyxRQUFBLEVBQUFwbEMsRUFBQXFsQyxRQUFBcGxDLElBQXFELFNBQUFBLEdBQWEsSUFBQUQsRUFBQW9sQyxVQUFBcGxDLEVBQUFvbEMsUUFBQSxFQUFBcGxDLEVBQUFxbEMsUUFBQXBsQyxLQUF5Q0QsRUFBQXFsQyxRQUFBcGxDLEtBcUM1UXFzRCxDQUFBcnBELEdBQVFoRCxFQUFBdkcsS0FBQXNHLEVBQVNpRCxFQUFBaEQsRUFBQTZHLElBdkRsRSxTQUFBOUcsR0FBZSxzQkFBQUEsRUFBQSxPQUFBZ2xELEdBQUFobEQsR0FBQSxJQUEwQyxTQUFBQSxFQUFBLENBQXNDLElBQWJBLElBQUFpakMsWUFBYWtOLEdBQUEsVUFBb0IsR0FBQW53QyxJQUFBcXdDLEdBQUEsVUFBb0IsU0F1RHJFa2MsQ0FBQXZzRCxHQUFjcWhDLEVBQUErQixHQUFBcGpDLEVBQUFxaEMsR0FBU0YsT0FBQSxFQUFTbCtCLEdBQVUsT0FBQWsrQixFQUFBcXFCLEdBQUEsS0FBQXZyRCxFQUFBRCxFQUFBcWhDLEVBQUFqdEMsR0FBMEIsTUFBTSxPQUFBK3NDLEVBQUF1cUIsR0FBQSxLQUFBenJELEVBQUFELEVBQUFxaEMsRUFBQWp0QyxHQUEwQixNQUFNLFFBQUErc0MsRUFBQWlxQixHQUFBLEtBQUFuckQsRUFBQUQsRUFBQXFoQyxFQUFBanRDLEdBQTJCLE1BQU0sUUFBQStzQyxFQUFBa3FCLEdBQUEsS0FBQXByRCxFQUFBRCxFQUFBb2pDLEdBQUFwakMsRUFBQXRHLEtBQUEybkMsR0FBQWh0QyxFQUFBRCxHQUF1QyxNQUFNLFFBQUFhLEVBQUEsTUFBQStLLEVBQUEsSUFBc0IsT0FBQW1oQyxFQUFTLGNBQUE5c0MsRUFBQTRMLEVBQUF2RyxLQUFBdUosRUFBQWhELEVBQUFxa0QsYUFBQWtILEdBQUF4ckQsRUFBQUMsRUFBQTVMLEVBQUE0TyxFQUFBaEQsRUFBQW9rRCxjQUFBaHdELEVBQUE0TyxFQUFBbWdDLEdBQUEvdUMsRUFBQTRPLEdBQUE3TyxHQUFtRixjQUFBQyxFQUFBNEwsRUFBQXZHLEtBQUF1SixFQUFBaEQsRUFBQXFrRCxhQUFBb0gsR0FBQTFyRCxFQUFBQyxFQUMxYTVMLEVBRDBhNE8sRUFBQWhELEVBQUFva0QsY0FBQWh3RCxFQUFBNE8sRUFBQW1nQyxHQUFBL3VDLEVBQUE0TyxHQUMxYTdPLEdBQU8sT0FBc1csT0FBdFc0M0QsR0FBQS9yRCxHQUE2QixRQUFoQjVMLEVBQUE0TCxFQUFBd2tELGNBQWdCeHZELEVBQUEsT0FBMkNnTyxFQUFBLFFBQWxCQSxFQUFBaEQsRUFBQXVrRCxlQUFrQnZoRCxFQUFBdXBELFFBQUEsS0FBMEJwRixHQUFBbm5ELEVBQUE1TCxFQUFBNEwsRUFBQXFrRCxhQUFBLEtBQUFsd0QsSUFBOEJDLEVBQUE0TCxFQUFBdWtELGNBQUFnSSxXQUEwQnZwRCxHQUFBaW9ELEtBQUFqckQsRUFBQXNyRCxHQUFBdnJELEVBQUFDLEVBQUE3TCxLQUErQjZPLEVBQUFoRCxFQUFBeW9DLFdBQWN6bEMsR0FBQSxPQUFBakQsR0FBQSxPQUFBQSxFQUFBbTJDLFFBQUFsekMsRUFBQXdwRCxXQUFBOUIsR0FBQTdILEdBQUE3aUQsRUFBQXlvQyxVQUFBOFMsZUFBQWtQLEdBQUF6cUQsRUFBQWdELEVBQUEybkQsSUFBQSxHQUF5RjNuRCxHQUFBaEQsRUFBQSsxQyxXQUFBLEVBQUEvMUMsRUFBQWsyQyxNQUFBc1UsR0FBQXhxRCxFQUFBLEtBQUE1TCxFQUFBRCxLQUFBaXZDLEdBQUFyakMsRUFBQUMsRUFBQTVMLEVBQUFELEdBQUE4MkQsTUFBNERqckQsSUFBQWsyQyxPQUFVbDJDLEVBQVMsY0FBQXVvRCxHQUFBdm9ELEdBQUEsT0FBQUQsR0FBQStxRCxHQUFBOXFELEdBQUE1TCxFQUFBNEwsRUFBQXZHLEtBQUF1SixFQUFBaEQsRUFBQXFrRCxhQUFBampCLEVBQUEsT0FBQXJoQyxJQUFBMGtELGNBQUEsS0FBQXZqQixFQUFBbCtCLEVBQUFrTyxTQUFBc3hDLEdBQUFwdUQsRUFBQTRPLEdBQUFrK0IsRUFBQSxZQUN0WEUsR0FBQW9oQixHQUFBcHVELEVBQUFndEMsS0FBQXBoQyxFQUFBKzFDLFdBQUEsSUFBQXlWLEdBQUF6ckQsRUFBQUMsR0FBQSxJQUFBN0wsR0FBQSxFQUFBNkwsRUFBQS9LLE1BQUErTixFQUFBeXFCLFFBQUF6dEIsRUFBQThrRCxlQUFBLEVBQUE5a0QsRUFBQSxPQUFBb2pDLEdBQUFyakMsRUFBQUMsRUFBQWtoQyxFQUFBL3NDLEdBQUE2TCxJQUFBazJDLE9BQUFsMkMsRUFBcUgscUJBQUFELEdBQUErcUQsR0FBQTlxRCxHQUFBLEtBQW1DLGVBQUFpc0QsR0FBQWxzRCxFQUFBQyxFQUFBN0wsR0FBeUIsY0FBQWkwRCxHQUFBcG9ELElBQUF5b0MsVUFBQThTLGVBQUFubkQsRUFBQTRMLEVBQUFxa0QsYUFBQSxPQUFBdGtELEVBQUFDLEVBQUFrMkMsTUFBQXFVLEdBQUF2cUQsRUFBQSxLQUFBNUwsRUFBQUQsR0FBQWl2QyxHQUFBcmpDLEVBQUFDLEVBQUE1TCxFQUFBRCxHQUFBNkwsRUFBQWsyQyxNQUFrSCxlQUFBOWhELEVBQUE0TCxFQUFBdkcsS0FBQXVKLEVBQUFoRCxFQUFBcWtELGFBQUE4RyxHQUFBcHJELEVBQUFDLEVBQUE1TCxFQUFBNE8sRUFBQWhELEVBQUFva0QsY0FBQWh3RCxFQUFBNE8sRUFBQW1nQyxHQUFBL3VDLEVBQUE0TyxHQUFBN08sR0FBb0YsY0FBQWl2QyxHQUFBcmpDLEVBQUFDLElBQUFxa0QsYUFBQWx3RCxHQUFBNkwsRUFBQWsyQyxNQUE4QyxPQUF1RCxlQUFBOVMsR0FBQXJqQyxFQUFBQyxJQUFBcWtELGFBQUFuekMsU0FDNWQvYyxHQUFBNkwsRUFBQWsyQyxNQUFXLFFBQUFuMkMsRUFBQSxDQUFrRixHQUF2RTNMLEVBQUE0TCxFQUFBdkcsS0FBQXFyQyxTQUFrQjloQyxFQUFBaEQsRUFBQXFrRCxhQUFpQm5qQixFQUFBbGhDLEVBQUF5a0QsY0FBNEJrRCxHQUFBM25ELEVBQVZvaEMsRUFBQXArQixFQUFBak8sT0FBa0IsT0FBQW1zQyxFQUFBLENBQWEsSUFBQUMsRUFBQUQsRUFBQW5zQyxNQUFrSixRQUFwSXFzQyxFQUFBRCxJQUFBQyxJQUFBLElBQUFELEdBQUEsRUFBQUEsR0FBQSxFQUFBQyxJQUFBRCxNQUFBQyxLQUFBLHdCQUFBaHRDLEVBQUFvd0Msc0JBQUFwd0MsRUFBQW93QyxzQkFBQXJELEVBQUFDLEdBQUEsY0FBOEksR0FBQUYsRUFBQWh3QixXQUFBbE8sRUFBQWtPLFdBQUF1eEIsR0FBQTNILFFBQUEsQ0FBd0M5NkIsRUFBQXNyRCxHQUFBdnJELEVBQUFDLEVBQUE3TCxHQUFZLE1BQUE0TCxRQUFTLFlBQUFtaEMsRUFBQWxoQyxFQUFBazJDLFNBQUFoVixFQUFBaUksT0FBQW5wQyxHQUEwQyxPQUFBa2hDLEdBQVMsQ0FBNkIsV0FBM0JDLEVBQUFELEVBQUFvakIsd0JBQXdDLEdBQUcsR0FBQW5qQixFQUFBem1DLFVBQUF0RyxHQUFBLElBQUErc0MsRUFBQTRtQixhQUFBM21CLEdBQUEsQ0FBMEMsT0FBQUYsRUFBQXI2QixJQUFBLENBQWMsSUFBQTI1QixFQUFBb21CLEdBQUF6eUQsR0FBWXFzQyxFQUFBMzVCLElBQUEsRUFBUWtnRCxHQUFBN2xCLEVBQUFWLEdBQVFVLEVBQUE0akIsZUFDdmYzd0QsSUFBQStzQyxFQUFBNGpCLGVBQUEzd0QsR0FBc0MsUUFBZHFzQyxFQUFBVSxFQUFBeVUsWUFBY25WLEVBQUFza0IsZUFBQTN3RCxJQUFBcXNDLEVBQUFza0IsZUFBQTN3RCxHQUFtRCxRQUFBSixFQUFBbXRDLEVBQUFpSSxPQUFtQixPQUFBcDFDLEdBQVMsQ0FBZ0IsR0FBZHlzQyxFQUFBenNDLEVBQUE0aEQsVUFBYzVoRCxFQUFBOHdELG9CQUFBMXdELEVBQUFKLEVBQUE4d0Qsb0JBQUExd0QsRUFBQSxPQUFBcXNDLEtBQUFxa0Isb0JBQUExd0QsSUFBQXFzQyxFQUFBcWtCLG9CQUFBMXdELE9BQWdILGFBQUFxc0MsS0FBQXFrQixvQkFBQTF3RCxHQUFrRSxNQUFsRXFzQyxFQUFBcWtCLG9CQUFBMXdELEVBQTZFSixJQUFBbzFDLFFBQVkzSSxFQUFBVSxFQUFBZ1YsTUFBVS9VLElBQUFyK0IsV0FBUyxPQUFBcStCLFFBQWdCWCxFQUFBLEtBQUFVLEVBQUFyNkIsS0FBQXE2QixFQUFBem5DLE9BQUF1RyxFQUFBdkcsS0FBQSxLQUFBeW5DLEVBQUFnVixNQUF1RCxVQUFBMVYsSUFBQTJJLE9BQUFqSSxPQUF1QixJQUFBVixFQUFBVSxFQUFhLE9BQUFWLEdBQVMsQ0FBRSxHQUFBQSxJQUFBeGdDLEVBQUEsQ0FBVXdnQyxFQUFBLEtBQU8sTUFDeGUsV0FEOGVVLEVBQUFWLEVBQUFudkIsU0FDOWUsQ0FBYTZ2QixFQUFBaUksT0FBQTNJLEVBQUEySSxPQUFrQjNJLEVBQUFVLEVBQUksTUFBTVYsSUFBQTJJLE9BQVdqSSxFQUFBVixHQUFLNEMsR0FBQXJqQyxFQUFBQyxFQUFBZ0QsRUFBQWtPLFNBQUEvYyxHQUFvQjZMLElBQUFrMkMsTUFBVSxPQUFBbDJDLEVBQVMsY0FBQWdELEVBQUFoRCxFQUFBdkcsS0FBQXJGLEdBQUFndEMsRUFBQXBoQyxFQUFBcWtELGNBQUFuekMsU0FBQTIyQyxHQUFBN25ELEdBQUE1TCxJQUFBNE8sRUFBQThrRCxHQUFBOWtELEVBQUFvK0IsRUFBQXFyQix3QkFBQXpzRCxFQUFBKzFDLFdBQUEsRUFBQTNTLEdBQUFyakMsRUFBQUMsRUFBQTVMLEVBQUFELEdBQUE2TCxFQUFBazJDLE1BQXNJLGVBQUE5VSxFQUFBK0IsR0FBQW5nQyxFQUFBaEQsRUFBQXZHLEtBQUF1RyxFQUFBcWtELGNBQUErRyxHQUFBcnJELEVBQUFDLEVBQUFnRCxFQUFBbytCLEVBQUErQixHQUFBbmdDLEVBQUF2SixLQUFBMm5DLEdBQUFodEMsRUFBQUQsR0FBNEUsZUFBQWszRCxHQUFBdHJELEVBQUFDLElBQUF2RyxLQUFBdUcsRUFBQXFrRCxhQUFBandELEVBQUFELEdBQWlELGVBQUFDLEVBQUE0TCxFQUFBdkcsS0FBQXVKLEVBQUFoRCxFQUFBcWtELGFBQUFyaEQsRUFBQWhELEVBQUFva0QsY0FBQWh3RCxFQUFBNE8sRUFBQW1nQyxHQUFBL3VDLEVBQUE0TyxHQUFBLE9BQUFqRCxNQUFBNDFDLFVBQUEsS0FBQTMxQyxFQUFBMjFDLFVBQUEsS0FBQTMxQyxFQUFBKzFDLFdBQUEsR0FBQS8xQyxFQUFBNkcsSUFBQSxFQUFBNjdCLEdBQUF0dUMsSUFBQTJMLEdBQ25XLEVBQUE4akQsR0FBQTdqRCxJQUFBRCxHQUFBLEVBQUE4bkQsR0FBQTduRCxHQUFBb3BELEdBQUFwcEQsRUFBQTVMLEVBQUE0TyxHQUFBMG1ELEdBQUExcEQsRUFBQTVMLEVBQUE0TyxFQUFBN08sR0FBQTAzRCxHQUFBLEtBQUE3ckQsRUFBQTVMLEdBQUEsRUFBQTJMLEVBQUE1TCxHQUFtRSxRQUFBYSxFQUFBLFFBQWtCLFNBQUEwM0QsR0FBQTNzRCxHQUFlQSxFQUFBZzJDLFdBQUEsRUFBZSxJQUFBNFcsUUFBQSxFQUFBQyxRQUFBLEVBQUFDLFFBQUEsRUFBQUMsUUFBQSxFQUE0Q0gsR0FBQSxTQUFBNXNELEVBQUFDLEdBQWlCLFFBQUE3TCxFQUFBNkwsRUFBQWsyQyxNQUFrQixPQUFBL2hELEdBQVMsQ0FBRSxPQUFBQSxFQUFBMFMsS0FBQSxJQUFBMVMsRUFBQTBTLElBQUE5RyxFQUFBM0YsWUFBQWpHLEVBQUFzMEMsZ0JBQW1ELE9BQUF0MEMsRUFBQTBTLEtBQUEsT0FBQTFTLEVBQUEraEQsTUFBQSxDQUFtQy9oRCxFQUFBK2hELE1BQUEvTSxPQUFBaDFDLEVBQWlCQSxJQUFBK2hELE1BQVUsU0FBUyxHQUFBL2hELElBQUE2TCxFQUFBLE1BQWUsS0FBSyxPQUFBN0wsRUFBQWtkLFNBQWlCLENBQUUsVUFBQWxkLEVBQUFnMUMsUUFBQWgxQyxFQUFBZzFDLFNBQUFucEMsRUFBQSxPQUF3QzdMLElBQUFnMUMsT0FBV2gxQyxFQUFBa2QsUUFBQTgzQixPQUFBaDFDLEVBQUFnMUMsT0FBMEJoMUMsSUFBQWtkLFVBQWN1N0MsR0FBQSxhQUN6Y0MsR0FBQSxTQUFBOXNELEVBQUFDLEVBQUE3TCxFQUFBQyxFQUFBNE8sR0FBdUIsSUFBQW8rQixFQUFBcmhDLEVBQUEwa0QsY0FBc0IsR0FBQXJqQixJQUFBaHRDLEVBQUEsQ0FBVSxJQUFBOHNDLEVBQUFsaEMsRUFBQXlvQyxVQUF1QyxPQUFyQjBmLEdBQUFqbEIsR0FBQXBJLFNBQWMvNkIsRUFBQSxLQUFPNUwsR0FBVSxZQUFBaXRDLEVBQUE0USxHQUFBOVEsRUFBQUUsR0FBdUJodEMsRUFBQTQ5QyxHQUFBOVEsRUFBQTlzQyxHQUFVMkwsRUFBQSxHQUFLLE1BQU0sYUFBQXFoQyxFQUFBb2MsR0FBQXRjLEVBQUFFLEdBQXdCaHRDLEVBQUFvcEQsR0FBQXRjLEVBQUE5c0MsR0FBVTJMLEVBQUEsR0FBSyxNQUFNLGFBQUFxaEMsRUFBQTdyQyxFQUFBLEdBQW9CNnJDLEVBQUEsQ0FBSXJzQyxXQUFBLElBQWVYLEVBQUFtQixFQUFBLEdBQU1uQixFQUFBLENBQUlXLFdBQUEsSUFBZWdMLEVBQUEsR0FBSyxNQUFNLGVBQUFxaEMsRUFBQXdjLEdBQUExYyxFQUFBRSxHQUEwQmh0QyxFQUFBd3BELEdBQUExYyxFQUFBOXNDLEdBQVUyTCxFQUFBLEdBQUssTUFBTSwyQkFBQXFoQyxFQUFBMnJCLFNBQUEsbUJBQUEzNEQsRUFBQTI0RCxVQUFBN3JCLEVBQUE4ckIsUUFBQTdLLElBQXFGSCxHQUFBN3RELEVBQUFDLEdBQVE4c0MsRUFBQS9zQyxPQUFBLEVBQVcsSUFBQWd0QyxFQUFBLEtBQVcsSUFBQWh0QyxLQUFBaXRDLEVBQUEsSUFBQWh0QyxFQUFBdUIsZUFBQXhCLElBQUFpdEMsRUFBQXpyQyxlQUFBeEIsSUFBQSxNQUFBaXRDLEVBQUFqdEMsR0FBQSxhQUM5YUEsRUFBQSxDQUFHLElBQUFxc0MsRUFBQVksRUFBQWp0QyxHQUFXLElBQUErc0MsS0FBQVYsSUFBQTdxQyxlQUFBdXJDLEtBQUFDLE1BQUEsSUFBeUNBLEVBQUFELEdBQUEsUUFBVyw0QkFBQS9zQyxHQUFBLGFBQUFBLEdBQUEsbUNBQUFBLEdBQUEsNkJBQUFBLEdBQUEsY0FBQUEsSUFBQWt6QyxFQUFBMXhDLGVBQUF4QixHQUFBNEwsTUFBQSxLQUFBQSxLQUFBLElBQUFuSCxLQUFBekUsRUFBQSxPQUFrTSxJQUFBQSxLQUFBQyxFQUFBLENBQVksSUFBQUwsRUFBQUssRUFBQUQsR0FBaUMsR0FBdEJxc0MsRUFBQSxNQUFBWSxJQUFBanRDLFFBQUEsRUFBc0JDLEVBQUF1QixlQUFBeEIsSUFBQUosSUFBQXlzQyxJQUFBLE1BQUF6c0MsR0FBQSxNQUFBeXNDLEdBQUEsYUFBQXJzQyxFQUFBLEdBQUFxc0MsRUFBQSxDQUF1RSxJQUFBVSxLQUFBVixLQUFBN3FDLGVBQUF1ckMsSUFBQW50QyxLQUFBNEIsZUFBQXVyQyxLQUFBQyxNQUFBLElBQWtFQSxFQUFBRCxHQUFBLElBQVcsSUFBQUEsS0FBQW50QyxJQUFBNEIsZUFBQXVyQyxJQUFBVixFQUFBVSxLQUFBbnRDLEVBQUFtdEMsS0FBQUMsSUFDcmNBLEVBQUEsSUFBS0EsRUFBQUQsR0FBQW50QyxFQUFBbXRDLFNBQWFDLElBQUFwaEMsTUFBQSxJQUFBQSxFQUFBbkgsS0FBQXpFLEVBQUFndEMsTUFBQXB0QyxNQUFvQyw0QkFBQUksR0FBQUosTUFBQTB1RCxZQUFBLEVBQUFqaUIsTUFBQWlpQixZQUFBLFFBQUExdUQsR0FBQXlzQyxJQUFBenNDLElBQUFnTSxLQUFBLElBQUFuSCxLQUFBekUsRUFBQSxHQUFBSixJQUFBLGFBQUFJLEVBQUFxc0MsSUFBQXpzQyxHQUFBLGlCQUFBQSxHQUFBLGlCQUFBQSxJQUFBZ00sS0FBQSxJQUFBbkgsS0FBQXpFLEVBQUEsR0FBQUosR0FBQSxtQ0FBQUksR0FBQSw2QkFBQUEsSUFBQWt6QyxFQUFBMXhDLGVBQUF4QixJQUFBLE1BQUFKLEdBQUFtdUQsR0FBQWwvQyxFQUFBN08sR0FBQTRMLEdBQUF5Z0MsSUFBQXpzQyxJQUFBZ00sRUFBQSxNQUFBQSxLQUFBLElBQUFuSCxLQUFBekUsRUFBQUosSUFBK1ZvdEMsSUFBQXBoQyxLQUFBLElBQUFuSCxLQUFBLFFBQUF1b0MsR0FBNkJuK0IsRUFBQWpELEdBQUlDLEVBQUF3a0QsWUFBQXhoRCxJQUFBMHBELEdBQUExc0QsS0FBMkI4c0QsR0FBQSxTQUFBL3NELEVBQUFDLEVBQUE3TCxFQUFBQyxHQUFxQkQsSUFBQUMsR0FBQXM0RCxHQUFBMXNELElBQ3RlLElBQUFpdEQsR0FBQSxtQkFBQUMsZ0JBQUFwSyxJQUErQyxTQUFBcUssR0FBQXB0RCxFQUFBQyxHQUFpQixJQUFBN0wsRUFBQTZMLEVBQUEvSSxPQUFBN0MsRUFBQTRMLEVBQUF3VyxNQUF5QixPQUFBcGlCLEdBQUEsT0FBQUQsSUFBQUMsRUFBQXM4QyxHQUFBdjhDLElBQThCLE9BQUFBLEdBQUFxOEMsR0FBQXI4QyxFQUFBc0YsTUFBcUJ1RyxJQUFBakwsTUFBVSxPQUFBZ0wsR0FBQSxJQUFBQSxFQUFBOEcsS0FBQTJwQyxHQUFBendDLEVBQUF0RyxNQUFnQyxJQUFJN0IsUUFBQUMsTUFBQW1JLEdBQWlCLE1BQUFnRCxHQUFTOFMsV0FBQSxXQUFzQixNQUFBOVMsS0FBWSxTQUFBb3FELEdBQUFydEQsR0FBZSxJQUFBQyxFQUFBRCxFQUFBNGlDLElBQVksVUFBQTNpQyxFQUFBLHNCQUFBQSxFQUFBLElBQXlDQSxFQUFBLE1BQVEsTUFBQTdMLEdBQVNrNUQsR0FBQXR0RCxFQUFBNUwsUUFBUTZMLEVBQUE4NkIsUUFBQSxLQUduVixTQUFBd3lCLEdBQUF2dEQsR0FBNkMsT0FBOUIsbUJBQUFra0QsT0FBQWxrRCxHQUE4QkEsRUFBQThHLEtBQWMsbUNBQUE3RyxFQUFBRCxFQUFBeWtELFlBQW1ELFVBQUF4a0QsR0FBQSxRQUFBQSxJQUFBMGtELFlBQUEsQ0FBd0MsSUFBQXZ3RCxFQUFBNkwsSUFBQThDLEtBQWUsR0FBRyxJQUFBMU8sRUFBQUQsRUFBQW81RCxRQUFnQixVQUFBbjVELEVBQUEsQ0FBYSxJQUFBNE8sRUFBQWpELEVBQVEsSUFBSTNMLElBQUksTUFBQWd0QyxHQUFTaXNCLEdBQUFycUQsRUFBQW8rQixJQUFTanRDLElBQUEyTyxXQUFTM08sSUFBQTZMLEdBQWEsTUFBTSxPQUEyQixHQUEzQm90RCxHQUFBcnRELEdBQTJCLG1CQUFkQyxFQUFBRCxFQUFBMG9DLFdBQWMra0IscUJBQUEsSUFBa0R4dEQsRUFBQW9oQixNQUFBcmhCLEVBQUEwa0QsY0FBQXprRCxFQUFBb1UsTUFBQXJVLEVBQUF3a0QsY0FBQXZrRCxFQUFBd3RELHVCQUF5RSxNQUFBcHNCLEdBQVNpc0IsR0FBQXR0RCxFQUFBcWhDLEdBQVEsTUFBTSxPQUFBZ3NCLEdBQUFydEQsR0FBYSxNQUFNLE9BQUEwdEQsR0FBQTF0RCxJQUNuYyxTQUFBMnRELEdBQUEzdEQsR0FBZSxXQUFBQSxFQUFBOEcsS0FBQSxJQUFBOUcsRUFBQThHLEtBQUEsSUFBQTlHLEVBQUE4RyxJQUNmLFNBQUE4bUQsR0FBQTV0RCxHQUFlQSxFQUFBLENBQUcsUUFBQUMsRUFBQUQsRUFBQW9wQyxPQUFtQixPQUFBbnBDLEdBQVMsQ0FBRSxHQUFBMHRELEdBQUExdEQsR0FBQSxDQUFVLElBQUE3TCxFQUFBNkwsRUFBUSxNQUFBRCxFQUFRQyxJQUFBbXBDLE9BQVduMEMsRUFBQSxPQUFTYixPQUFBLEVBQVMsSUFBQUMsRUFBQTRMLE9BQUEsRUFBZSxPQUFBN0wsRUFBQTBTLEtBQWMsT0FBQTdHLEVBQUE3TCxFQUFBczBDLFVBQXFCcjBDLEdBQUEsRUFBSyxNQUFNLE9BQThDLE9BQUE0TCxFQUFBN0wsRUFBQXMwQyxVQUFBOFMsY0FBbUNubkQsR0FBQSxFQUFLLE1BQU0sUUFBQVksRUFBQSxPQUFpQixHQUFBYixFQUFBNGhELFlBQUFpSixHQUFBaC9DLEVBQUEsSUFBQTdMLEVBQUE0aEQsWUFBQSxJQUE0Q2gyQyxFQUFBQyxFQUFBLElBQUE3TCxFQUFBNEwsSUFBYSxDQUFFLEtBQUssT0FBQTVMLEVBQUFrZCxTQUFpQixDQUFFLFVBQUFsZCxFQUFBZzFDLFFBQUF1a0IsR0FBQXY1RCxFQUFBZzFDLFFBQUEsQ0FBa0NoMUMsRUFBQSxLQUFPLE1BQUE0TCxFQUFRNUwsSUFBQWcxQyxPQUFxQyxJQUExQmgxQyxFQUFBa2QsUUFBQTgzQixPQUFBaDFDLEVBQUFnMUMsT0FBMEJoMUMsSUFBQWtkLFFBQWdCLElBQUFsZCxFQUFBMFMsS0FBQSxJQUFBMVMsRUFBQTBTLEtBQXFCLENBQUUsS0FBQTFTLEVBQUE0aEQsVUFBQSxTQUFBLzFDLEVBQ2plLFVBQUE3TCxFQUFBK2hELE9BQUEsSUFBQS9oRCxFQUFBMFMsSUFBQSxTQUFBN0csRUFBd0M3TCxFQUFBK2hELE1BQUEvTSxPQUFBaDFDLE1BQUEraEQsTUFBZ0MsT0FBQS9oRCxFQUFBNGhELFdBQUEsQ0FBcUI1aEQsSUFBQXMwQyxVQUFjLE1BQUExb0MsR0FBUyxRQUFBaUQsRUFBQWpELElBQWEsQ0FBRSxPQUFBaUQsRUFBQTZELEtBQUEsSUFBQTdELEVBQUE2RCxJQUFBLEdBQUExUyxFQUFBLEdBQUFDLEVBQUEsQ0FBbUMsSUFBQWd0QyxFQUFBcGhDLEVBQUFraEMsRUFBQWwrQixFQUFBeWxDLFVBQUF0SCxFQUFBaHRDLEVBQTBCLElBQUFpdEMsRUFBQTluQyxTQUFBOG5DLEVBQUEvbUMsV0FBQXVyQixhQUFBc2IsRUFBQUMsR0FBQUMsRUFBQXhiLGFBQUFzYixFQUFBQyxRQUFrRW5oQyxFQUFBNGxCLGFBQUE1aUIsRUFBQXlsQyxVQUFBdDBDLFFBQW1DQyxHQUFBOHNDLEVBQUFsaEMsRUFBQW1oQyxFQUFBbitCLEVBQUF5bEMsVUFBQSxJQUFBdkgsRUFBQTVuQyxVQUFBOG5DLEVBQUFGLEVBQUE3bUMsWUFBQXVyQixhQUFBdWIsRUFBQUQsSUFBQUUsRUFBQUYsR0FBQTltQyxZQUFBK21DLEdBQUEsT0FBQUQsSUFBQTBzQixzQkFBQSxPQUFBeHNCLEVBQUE0ckIsVUFBQTVyQixFQUFBNHJCLFFBQUE3SyxLQUFBbmlELEVBQUE1RixZQUFBNEksRUFBQXlsQyxnQkFDclMsT0FBQXpsQyxFQUFBNkQsS0FBQSxPQUFBN0QsRUFBQWt6QyxNQUFBLENBQW1DbHpDLEVBQUFrekMsTUFBQS9NLE9BQUFubUMsRUFBaUJBLElBQUFrekMsTUFBVSxTQUFTLEdBQUFsekMsSUFBQWpELEVBQUEsTUFBZSxLQUFLLE9BQUFpRCxFQUFBcU8sU0FBaUIsQ0FBRSxVQUFBck8sRUFBQW1tQyxRQUFBbm1DLEVBQUFtbUMsU0FBQXBwQyxFQUFBLE9BQXdDaUQsSUFBQW1tQyxPQUFXbm1DLEVBQUFxTyxRQUFBODNCLE9BQUFubUMsRUFBQW1tQyxPQUEwQm5tQyxJQUFBcU8sU0FDM0wsU0FBQW84QyxHQUFBMXRELEdBQWUsUUFBQUMsRUFBQUQsRUFBQTVMLEdBQUEsRUFBQUMsT0FBQSxFQUFBNE8sT0FBQSxJQUFvQyxDQUFFLElBQUE3TyxFQUFBLENBQU9BLEVBQUE2TCxFQUFBbXBDLE9BQVdwcEMsRUFBQSxPQUFRLENBQTJCLE9BQXpCLE9BQUE1TCxHQUFBYSxFQUFBLE9BQXlCYixFQUFBMFMsS0FBYyxPQUFBelMsRUFBQUQsRUFBQXMwQyxVQUFxQnpsQyxHQUFBLEVBQUssTUFBQWpELEVBQVEsT0FBZ0QsT0FBQTNMLEVBQUFELEVBQUFzMEMsVUFBQThTLGNBQW1DdjRDLEdBQUEsRUFBSyxNQUFBakQsRUFBUTVMLElBQUFnMUMsT0FBV2gxQyxHQUFBLEVBQUssT0FBQTZMLEVBQUE2RyxLQUFBLElBQUE3RyxFQUFBNkcsSUFBQSxDQUF5QjlHLEVBQUEsUUFBQXFoQyxFQUFBcGhDLEVBQUFraEMsRUFBQUUsSUFBbUIsR0FBQWtzQixHQUFBcHNCLEdBQUEsT0FBQUEsRUFBQWdWLE9BQUEsSUFBQWhWLEVBQUFyNkIsSUFBQXE2QixFQUFBZ1YsTUFBQS9NLE9BQUFqSSxNQUFBZ1YsVUFBK0QsQ0FBSyxHQUFBaFYsSUFBQUUsRUFBQSxNQUFlLEtBQUssT0FBQUYsRUFBQTd2QixTQUFpQixDQUFFLFVBQUE2dkIsRUFBQWlJLFFBQUFqSSxFQUFBaUksU0FBQS9ILEVBQUEsTUFBQXJoQyxFQUF5Q21oQyxJQUFBaUksT0FBV2pJLEVBQUE3dkIsUUFBQTgzQixPQUFBakksRUFBQWlJLE9BQTBCakksSUFBQTd2QixRQUFZck8sR0FDM2ZvK0IsRUFBQWh0QyxFQUFBOHNDLEVBQUFsaEMsRUFBQXlvQyxVQUFBLElBQUFySCxFQUFBOW5DLFNBQUE4bkMsRUFBQS9tQyxXQUFBQyxZQUFBNG1DLEdBQUFFLEVBQUE5bUMsWUFBQTRtQyxJQUFBOXNDLEVBQUFrRyxZQUFBMEYsRUFBQXlvQyxnQkFBMkcsT0FBQXpvQyxFQUFBNkcsS0FBQXpTLEVBQUE0TCxFQUFBeW9DLFVBQUE4UyxjQUFBdjRDLEdBQUEsR0FBQXNxRCxHQUFBdHRELEdBQUEsT0FBQUEsRUFBQWsyQyxNQUFBLENBQTJFbDJDLEVBQUFrMkMsTUFBQS9NLE9BQUFucEMsRUFBaUJBLElBQUFrMkMsTUFBVSxTQUFTLEdBQUFsMkMsSUFBQUQsRUFBQSxNQUFlLEtBQUssT0FBQUMsRUFBQXFSLFNBQWlCLENBQUUsVUFBQXJSLEVBQUFtcEMsUUFBQW5wQyxFQUFBbXBDLFNBQUFwcEMsRUFBQSxPQUFtRCxLQUFYQyxJQUFBbXBDLFFBQVd0aUMsTUFBQTFTLEdBQUEsR0FBa0I2TCxFQUFBcVIsUUFBQTgzQixPQUFBbnBDLEVBQUFtcEMsT0FBMEJucEMsSUFBQXFSLFNBQ2hXLFNBQUF3OEMsR0FBQTl0RCxFQUFBQyxHQUFpQixPQUFBQSxFQUFBNkcsS0FBYywrQkFBcUMsYUFBYSxXQUFBMVMsRUFBQTZMLEVBQUF5b0MsVUFBeUIsU0FBQXQwQyxFQUFBLENBQVksSUFBQUMsRUFBQTRMLEVBQUF5a0QsY0FBc0Ixa0QsRUFBQSxPQUFBQSxJQUFBMGtELGNBQUFyd0QsRUFBNkIsSUFBQTRPLEVBQUFoRCxFQUFBdkcsS0FBQTJuQyxFQUFBcGhDLEVBQUF3a0QsWUFBNkJ4a0QsRUFBQXdrRCxZQUFBLEtBQW1CLE9BQUFwakIsR0FsRnpOLFNBQUFyaEMsRUFBQUMsRUFBQTdMLEVBQUFDLEVBQUE0TyxHQUF1QmpELEVBQUE4b0MsR0FBQTdsQyxFQUFRLFVBQUE3TyxHQUFBLFVBQUE2TyxFQUFBdkosTUFBQSxNQUFBdUosRUFBQTNPLE1BQUFrK0MsR0FBQXh5QyxFQUFBaUQsR0FBcURpL0MsR0FBQTl0RCxFQUFBQyxHQUFRQSxFQUFBNnRELEdBQUE5dEQsRUFBQTZPLEdBQVUsUUFBQW8rQixFQUFBLEVBQVlBLEVBQUFwaEMsRUFBQXZJLE9BQVcycEMsR0FBQSxHQUFNLElBQUFGLEVBQUFsaEMsRUFBQW9oQyxHQUFBRCxFQUFBbmhDLEVBQUFvaEMsRUFBQSxHQUFvQixVQUFBRixFQUFBK2YsR0FBQWxoRCxFQUFBb2hDLEdBQUEsNEJBQUFELEVBQUEwZCxHQUFBNytDLEVBQUFvaEMsR0FBQSxhQUFBRCxFQUFBOGQsR0FBQWovQyxFQUFBb2hDLEdBQUF1USxHQUFBM3hDLEVBQUFtaEMsRUFBQUMsRUFBQS9zQyxHQUE2RixPQUFBRCxHQUFVLFlBQUFxK0MsR0FBQXp5QyxFQUFBaUQsR0FBcUIsTUFBTSxlQUFBKzZDLEdBQUFoK0MsRUFBQWlELEdBQXdCLE1BQU0sYUFBQWhELEVBQUFELEVBQUFteUMsY0FBQTRiLFlBQUEvdEQsRUFBQW15QyxjQUFBNGIsY0FBQTlxRCxFQUFBK3FELFNBQUEsT0FBQTU1RCxFQUFBNk8sRUFBQWpPLE9BQUEyb0QsR0FBQTM5QyxJQUFBaUQsRUFBQStxRCxTQUFBNTVELEdBQUEsR0FBQTZMLE1BQUFnRCxFQUFBK3FELFdBQUEsTUFBQS9xRCxFQUFBZ04sYUFBQTB0QyxHQUFBMzlDLElBQUFpRCxFQUFBK3FELFNBQUEvcUQsRUFBQWdOLGNBQ3ZULEdBQUEwdEMsR0FBQTM5QyxJQUFBaUQsRUFBQStxRCxTQUFBL3FELEVBQUErcUQsU0FBQSxZQWlGeU5DLENBQUE3NUQsRUFBQWl0QyxFQUFBcCtCLEVBQUFqRCxFQUFBM0wsR0FBMEIsTUFBTSxjQUFBNEwsRUFBQXlvQyxXQUFBenpDLEVBQUEsT0FBMENnTCxFQUFBeW9DLFVBQUE3L0IsVUFBQTVJLEVBQUF5a0QsY0FBc0MsTUFBTSxPQUFhLGNBQWMsUUFDMVcsR0FEMFd0d0QsRUFBQTZMLEVBQUF1a0QsY0FBMEJud0QsT0FBQSxFQUFTMkwsRUFBQUMsRUFBSSxPQUFBN0wsRUFBQUMsR0FBQSxHQUFBQSxHQUFBLEVBQUEyTCxFQUFBQyxFQUFBazJDLE1BQUEsSUFBQS9oRCxFQUFBKzNELGFBQUEvM0QsRUFBQSszRCxXQUFBcEQsT0FBcUUsT0FBQS9vRCxHQVR0ZCxTQUFBQSxFQUFBQyxHQUFpQixRQUFBN0wsRUFBQTRMLElBQWEsQ0FBRSxPQUFBNUwsRUFBQTBTLElBQUEsQ0FBYyxJQUFBelMsRUFBQUQsRUFBQXMwQyxVQUFrQixHQUFBem9DLEVBQUE1TCxFQUFBNGxCLE1BQUFDLFFBQUEsV0FBNEIsQ0FBSzdsQixFQUFBRCxFQUFBczBDLFVBQWMsSUFBQXpsQyxFQUFBN08sRUFBQXN3RCxjQUFBenFDLE1BQTRCaFgsRUFBQSxNQUFBQSxLQUFBck4sZUFBQSxXQUFBcU4sRUFBQWlYLFFBQUEsS0FBbUU3bEIsRUFBQTRsQixNQUFBQyxRQUFBK21DLEdBQUEsVUFBQWgrQyxTQUFpQyxPQUFBN08sRUFBQTBTLElBQUExUyxFQUFBczBDLFVBQUE3L0IsVUFBQTVJLEVBQUEsR0FBQTdMLEVBQUFzd0Qsa0JBQTZELFNBQUF0d0QsRUFBQTBTLEtBQUEsT0FBQTFTLEVBQUFvd0QsY0FBQSxFQUE0Q253RCxFQUFBRCxFQUFBK2hELE1BQUE3a0MsU0FBa0I4M0IsT0FBQWgxQyxFQUFXQSxFQUFBQyxFQUFJLFNBQVMsVUFBQUQsRUFBQStoRCxNQUFBLENBQXdCL2hELEVBQUEraEQsTUFBQS9NLE9BQUFoMUMsRUFBaUJBLElBQUEraEQsTUFBVSxVQUFTLEdBQUEvaEQsSUFBQTRMLEVBQUEsTUFBZSxLQUFLLE9BQUE1TCxFQUFBa2QsU0FBaUIsQ0FBRSxVQUFBbGQsRUFBQWcxQyxRQUNyZWgxQyxFQUFBZzFDLFNBQUFwcEMsRUFBQSxPQUFvQjVMLElBQUFnMUMsT0FBV2gxQyxFQUFBa2QsUUFBQTgzQixPQUFBaDFDLEVBQUFnMUMsT0FBMEJoMUMsSUFBQWtkLFNBUTZaNDhDLENBQUFsdUQsRUFBQTNMLEdBQ3RkLFFBRHdlRCxFQUFBNkwsRUFBQXdrRCxhQUN4ZSxDQUFheGtELEVBQUF3a0QsWUFBQSxLQUFtQixJQUFBdGpCLEVBQUFsaEMsRUFBQXlvQyxVQUFrQixPQUFBdkgsTUFBQWxoQyxFQUFBeW9DLFVBQUEsSUFBQXdrQixJQUFpQzk0RCxFQUFBd0MsUUFBQSxTQUFBb0osR0FBc0IsSUFBQTVMLEVBc0J6RyxTQUFBNEwsRUFBQUMsR0FBaUIsSUFBQTdMLEVBQUE0TCxFQUFBMG9DLFVBQWtCLE9BQUF0MEMsS0FBQW0yRCxPQUFBdHFELEdBQTZCQSxFQUFBK29ELEdBQVAvb0QsRUFBQThvRCxLQUFPL29ELEdBQW9CLFFBQVZBLEVBQUEyYyxHQUFBM2MsRUFBQUMsTUFBVXVsRCxHQUFBeGxELEVBQUFDLEdBQUEsS0FBQUEsRUFBQUQsRUFBQStrRCxpQkFBQW9KLEdBQUFudUQsRUFBQUMsS0F0QnFCMUssS0FBQSxLQUFBMEssRUFBQUQsR0FBd0JtaEMsRUFBQWoyQixJQUFBbEwsS0FBQW1oQyxFQUFBeHZCLElBQUEzUixLQUFBaVQsS0FBQTdlLFFBQW1DLE1BQU0sY0FBYyxRQUFBYSxFQUFBLFFBQWtCLElBQUFtNUQsR0FBQSxtQkFBQUMsZ0JBQUEvRCxJQUErQyxTQUFBZ0UsR0FBQXR1RCxFQUFBQyxFQUFBN0wsSUFBbUJBLEVBQUF5eUQsR0FBQXp5RCxJQUFRMFMsSUFBQSxFQUFRMVMsRUFBQTB5RCxRQUFBLENBQVcwRixRQUFBLE1BQWMsSUFBQW40RCxFQUFBNEwsRUFBQWpMLE1BQW1ELE9BQXJDWixFQUFBc0gsU0FBQSxXQUFzQjZ5RCxHQUFBbDZELEdBQU0rNEQsR0FBQXB0RCxFQUFBQyxJQUFTN0wsRUFDeFcsU0FBQW82RCxHQUFBeHVELEVBQUFDLEVBQUE3TCxJQUFtQkEsRUFBQXl5RCxHQUFBenlELElBQVEwUyxJQUFBLEVBQVEsSUFBQXpTLEVBQUEyTCxFQUFBdEcsS0FBQXF5RCx5QkFBc0Msc0JBQUExM0QsRUFBQSxDQUEwQixJQUFBNE8sRUFBQWhELEVBQUFqTCxNQUFjWixFQUFBMHlELFFBQUEsV0FBcUIsT0FBQXp5RCxFQUFBNE8sSUFBYSxJQUFBbytCLEVBQUFyaEMsRUFBQTBvQyxVQUEwUCxPQUF4TyxPQUFBckgsR0FBQSxtQkFBQUEsRUFBQW90QixvQkFBQXI2RCxFQUFBc0gsU0FBQSxXQUEwRSxtQkFBQXJILElBQUEsT0FBQXE2RCxNQUFBLElBQUEzTCxJQUFBLENBQUF6cUQsT0FBQW8yRCxHQUFBLzhDLElBQUFyWixPQUFtRSxJQUFBbEUsRUFBQTZMLEVBQUFqTCxNQUFBaU8sRUFBQWhELEVBQUF3VyxNQUF3QjIyQyxHQUFBcHRELEVBQUFDLEdBQVEzSCxLQUFBbTJELGtCQUFBcjZELEVBQUEsQ0FBMEJ1NkQsZUFBQSxPQUFBMXJELElBQUEsT0FBaUM3TyxFQUM3WSxTQUFBdzZELEdBQUE1dUQsR0FBZSxPQUFBQSxFQUFBOEcsS0FBYyxPQUFBNjdCLEdBQUEzaUMsRUFBQXRHLE9BQUErcEQsS0FBd0IsSUFBQXhqRCxFQUFBRCxFQUFBZzJDLFVBQWtCLFlBQUEvMUMsR0FBQUQsRUFBQWcyQyxXQUFBLEtBQUEvMUMsRUFBQSxHQUFBRCxHQUFBLEtBQThDLGNBQUF1b0QsS0FBQTdFLEtBQUEsUUFBQXpqRCxFQUFBRCxFQUFBZzJDLGFBQUEvZ0QsRUFBQSxPQUFBK0ssRUFBQWcyQyxXQUFBLEtBQUEvMUMsRUFBQSxHQUFBRCxFQUE0RixjQUFBeW9ELEdBQUF6b0QsR0FBQSxLQUF5QixxQkFBQUMsRUFBQUQsRUFBQWcyQyxZQUFBaDJDLEVBQUFnMkMsV0FBQSxLQUFBLzFDLEVBQUEsR0FBQUQsR0FBQSxLQUFvRSxjQUFBdW9ELEtBQUEsS0FBeUIsZUFBQVYsR0FBQTduRCxHQUFBLEtBQTBCLHFCQUNqVyxJQUFBNnVELEdBQUEsQ0FBUXRGLFlBQUF4QixJQUFlK0csR0FBQXJmLEdBQUF4SixrQkFBQThvQixHQUFBLFdBQUF4c0QsR0FBQSxFQUFBeXNELElBQUEsRUFBQXhyQixHQUFBLEtBQUFFLEdBQUEsS0FBQUMsR0FBQSxFQUFBc3JCLElBQUEsRUFBQUMsSUFBQSxFQUFBenJCLEdBQUEsS0FBQTByQixJQUFBLEVBQUFDLEdBQUEsS0FBQUMsR0FBQSxLQUFBWCxHQUFBLEtBQXFILFNBQUFZLEtBQWMsVUFBQTlyQixHQUFBLFFBQUF4akMsRUFBQXdqQyxHQUFBNEYsT0FBK0IsT0FBQXBwQyxHQUFTLENBQUUsSUFBQUMsRUFBQUQsRUFBUSxPQUFBQyxFQUFBNkcsS0FBYyxXQUFBMVMsRUFBQTZMLEVBQUF2RyxLQUFBOHBELGtCQUFzQyxNQUFBcHZELEdBQUFxdkQsS0FBNEIsTUFBTSxPQUFBOEUsS0FBYTdFLEtBQU0sTUFBTSxPQUFBK0UsR0FBQXhvRCxHQUFhLE1BQU0sT0FBQXNvRCxLQUFhLE1BQU0sUUFBQVYsR0FBQTVuRCxHQUFjRCxJQUFBb3BDLE9BQVcxRixHQUFBLEtBQU9DLEdBQUEsRUFBSXNyQixJQUFBLEVBQU1DLElBQUEsRUFBTTFyQixHQUFBLEtBQU8sU0FBQXlsQixLQUFjLE9BQUFvRyxLQUFBcHJCLEVBQUFzckIsd0JBQUFILElBQUFDLE1BQ3RhLFNBQUFHLEdBQUF4dkQsR0FBZSxPQUFNLENBQUUsSUFBQUMsRUFBQUQsRUFBQTQxQyxVQUFBeGhELEVBQUE0TCxFQUFBb3BDLE9BQUEvMEMsRUFBQTJMLEVBQUFzUixRQUF5QyxZQUFBdFIsRUFBQWcyQyxXQUFBLENBQTJCeFMsR0FBQXhqQyxFQUFJQSxFQUFBLENBQUcsSUFBQWlELEVBQUFoRCxFQUFZb2hDLEVBQUFzQyxHQUFReEMsR0FBWmxoQyxFQUFBRCxHQUFZc2tELGFBQXFCLE9BQUFya0QsRUFBQTZHLEtBQWMsT0FBYSxjQUFjLHFCQUFxQixPQUFBNjdCLEdBQUExaUMsRUFBQXZHLE9BQUErcEQsS0FBd0IsTUFBTSxPQUFBOEUsS0FBYTdFLE1BQU12aUIsRUFBQWxoQyxFQUFBeW9DLFdBQWN1akIsaUJBQUE5cUIsRUFBQXhtQyxRQUFBd21DLEVBQUE4cUIsZUFBQTlxQixFQUFBOHFCLGVBQUEsTUFBcUUsT0FBQWhwRCxHQUFBLE9BQUFBLEVBQUFrekMsUUFBQThVLEdBQUFockQsS0FBQSsxQyxZQUFBLEdBQWtENlcsR0FBQTVzRCxHQUFNLE1BQU0sT0FBQXdvRCxHQUFBeG9ELEdBQWEsSUFBQW1oQyxFQUFBZ25CLEdBQUFELEdBQUFwdEIsU0FBOEIsR0FBVHNHLEVBQUFwaEMsRUFBQXZHLEtBQVMsT0FBQXVKLEdBQUEsTUFBQWhELEVBQUF5b0MsVUFBQW9rQixHQUFBN3BELEVBQUFoRCxFQUFBb2hDLEVBQUFGLEVBQUFDLEdBQUFuK0IsRUFBQTIvQixNQUFBM2lDLEVBQUEyaUMsTUFBQTNpQyxFQUFBKzFDLFdBQ3RiLFVBQUssR0FBQTdVLEVBQUEsQ0FBVyxJQUFBVixFQUFBMm5CLEdBQUFqbEIsR0FBQXBJLFNBQW9CLEdBQUFrd0IsR0FBQWhyRCxHQUFBLENBQWNnRCxHQUFKaytCLEVBQUFsaEMsR0FBSXlvQyxVQUFjLElBQUExMEMsRUFBQW10QyxFQUFBem5DLEtBQUF2RixFQUFBZ3RDLEVBQUF1akIsY0FBQTd2RCxFQUFBdXNDLEVBQWdFLE9BQTdCbitCLEVBQUE0bEMsR0FBQTFILEVBQVFsK0IsRUFBQTZsQyxHQUFBMzBDLEVBQVFrdEMsT0FBQSxFQUFTRCxFQUFBcHRDLEdBQWMsMEJBQUFpdUMsR0FBQSxPQUFBaC9CLEdBQXdDLE1BQU0sNEJBQUFqUCxFQUFBLEVBQWtDQSxFQUFBMjJDLEdBQUFqekMsT0FBWTFELElBQUFpdUMsR0FBQTBJLEdBQUEzMkMsR0FBQWlQLEdBQWUsTUFBTSxhQUFBZy9CLEdBQUEsUUFBQWgvQixHQUEyQixNQUFNLGlDQUFBZy9CLEdBQUEsUUFBQWgvQixHQUFpRGcvQixHQUFBLE9BQUFoL0IsR0FBWSxNQUFNLFdBQUFnL0IsR0FBQSxRQUFBaC9CLEdBQXlCZy9CLEdBQUEsU0FBQWgvQixHQUFjLE1BQU0sY0FBQWcvQixHQUFBLFNBQUFoL0IsR0FBNkIsTUFBTSxZQUFBb3ZDLEdBQUFwdkMsRUFBQTlPLEdBQXFCOHRDLEdBQUEsVUFBQWgvQixHQUFlay9DLEdBQUF0dEQsRUFBQSxZQUFpQixNQUFNLGFBQUFvTyxFQUFBa3ZDLGNBQzFlLENBQUM0YixjQUFBNTVELEVBQUE2NUQsVUFBMEIvckIsR0FBQSxVQUFBaC9CLEdBQWVrL0MsR0FBQXR0RCxFQUFBLFlBQWlCLE1BQU0sZUFBQWtwRCxHQUFBOTZDLEVBQUE5TyxHQUFBOHRDLEdBQUEsVUFBQWgvQixHQUFBay9DLEdBQUF0dEQsRUFBQSxZQUF1RSxJQUFBd3NDLEtBQWY0Z0IsR0FBQTdnQixFQUFBanRDLEdBQVFILEVBQUEsS0FBT0csSUFBQXlCLGVBQUF5ckMsS0FBQVosRUFBQXRzQyxFQUFBa3RDLEdBQUEsYUFBQUEsRUFBQSxpQkFBQVosRUFBQXg5QixFQUFBMEYsY0FBQTgzQixJQUFBenNDLEVBQUEsWUFBQXlzQyxJQUFBLGlCQUFBQSxHQUFBeDlCLEVBQUEwRixjQUFBLEdBQUE4M0IsSUFBQXpzQyxFQUFBLGVBQUF5c0MsSUFBQTZHLEVBQUExeEMsZUFBQXlyQyxJQUFBLE1BQUFaLEdBQUEwaEIsR0FBQXR0RCxFQUFBd3NDLElBQTBOLE9BQUFELEdBQVUsWUFBQTZOLEdBQUFoc0MsR0FBbUIwdkMsR0FBQTF2QyxFQUFBOU8sR0FBQSxHQUFXLE1BQU0sZUFBQTg2QyxHQUFBaHNDLEdBQXNCZzdDLEdBQUFoN0MsR0FBUSxNQUFNLGdDQUFrQywyQkFBQTlPLEVBQUE2NEQsVUFDdGQvcEQsRUFBQWdxRCxRQUFBN0ssSUFBZS9nQixFQUFBcnRDLEVBQUltdEMsRUFBQXNqQixZQUFBcGpCLEdBQWdCRixFQUFBLE9BQUFFLElBQWlCc3JCLEdBQUExc0QsT0FBUyxDQUFLOUwsRUFBQThMLEVBQUlnRCxFQUFBbytCLEVBQUl4c0MsRUFBQXNzQyxFQUFJbnRDLEVBQUEsSUFBQW90QyxFQUFBN25DLFNBQUE2bkMsSUFBQTM5QixjQUFtQ2c5QixJQUFBOGQsR0FBQXQ1QixPQUFBd2IsRUFBQWllLEdBQUF6N0MsSUFBdUJ3OUIsSUFBQThkLEdBQUF0NUIsS0FBQSxXQUFBaGlCLE1BQUFqUCxFQUFBa0csY0FBQSxRQUFBOE0sVUFBQSxxQkFBQWhULEVBQUFpUCxFQUFBMUksWUFBQTBJLEVBQUEyRixhQUFBLGlCQUFBL1QsRUFBQTBiLEdBQUF2YyxJQUFBa0csY0FBQStJLEVBQUEsQ0FBaUtzTixHQUFBMWIsRUFBQTBiLE1BQVF2YyxJQUFBa0csY0FBQStJLEdBQUEsV0FBQUEsR0FBQXBPLEVBQUFtNUQsV0FBQWg2RCxFQUFBZzZELFVBQUEsSUFBQWg2RCxJQUFBeTdELGdCQUFBaHZCLEVBQUF4OUIsSUFBNEZBLEVBQUFqUCxHQUFJNjBDLEdBQUExMEMsRUFBUThPLEVBQUE2bEMsR0FBQTNILEVBQVF5ckIsR0FBQTNwRCxFQUFBaEQsR0FBQSxNQUFjcEwsRUFBQW9PLEVBQVksSUFBQTlLLEVBQUFpcEMsRUFBQVAsRUFBQXFoQixHQUFSbHVELEVBQUFxdEMsRUFBSWx0QyxFQUFBZ3RDLEdBQXNCLE9BQUFudEMsR0FBVSwwQkFBQWl1QyxHQUFBLE9BQ3ZkcHRDLEdBQUd1c0MsRUFBQWp0QyxFQUFJLE1BQU0sNEJBQUFpdEMsRUFBQSxFQUFrQ0EsRUFBQXVKLEdBQUFqekMsT0FBWTBwQyxJQUFBYSxHQUFBMEksR0FBQXZKLEdBQUF2c0MsR0FBZXVzQyxFQUFBanRDLEVBQUksTUFBTSxhQUFBOHRDLEdBQUEsUUFBQXB0QyxHQUEyQnVzQyxFQUFBanRDLEVBQUksTUFBTSxpQ0FBQTh0QyxHQUFBLFFBQUFwdEMsR0FBaURvdEMsR0FBQSxPQUFBcHRDLEdBQVl1c0MsRUFBQWp0QyxFQUFJLE1BQU0sV0FBQTh0QyxHQUFBLFFBQUFwdEMsR0FBeUJvdEMsR0FBQSxTQUFBcHRDLEdBQWN1c0MsRUFBQWp0QyxFQUFJLE1BQU0sY0FBQTh0QyxHQUFBLFNBQUFwdEMsR0FBNkJ1c0MsRUFBQWp0QyxFQUFJLE1BQU0sWUFBQWsrQyxHQUFBeDlDLEVBQUFWLEdBQXFCaXRDLEVBQUE2USxHQUFBcDlDLEVBQUFWLEdBQVU4dEMsR0FBQSxVQUFBcHRDLEdBQWVzdEQsR0FBQWhxRCxFQUFBLFlBQWlCLE1BQU0sYUFBQWlwQyxFQUFBcWMsR0FBQTVvRCxFQUFBVixHQUF3QixNQUFNLGFBQUFVLEVBQUFzOUMsY0FBQSxDQUErQjRiLGNBQUE1NUQsRUFBQTY1RCxVQUEwQjVzQixFQUFBNXJDLEVBQUEsR0FBTXJCLEVBQUEsQ0FBSWEsV0FBQSxJQUFlaXRDLEdBQUEsVUFBQXB0QyxHQUFlc3RELEdBQUFocUQsRUFBQSxZQUFpQixNQUFNLGVBQUE0bEQsR0FBQWxwRCxFQUNuZlYsR0FBR2l0QyxFQUFBeWMsR0FBQWhwRCxFQUFBVixHQUFVOHRDLEdBQUEsVUFBQXB0QyxHQUFlc3RELEdBQUFocUQsRUFBQSxZQUFpQixNQUFNLFFBQUFpcEMsRUFBQWp0QyxFQUFZOHRELEdBQUFqdUQsRUFBQW90QyxHQUFRWCxPQUFBLEVBQVMsSUFBQU8sRUFBQWh0QyxFQUFBc3ZDLEVBQUF6dUMsRUFBQTBkLEVBQUE2dUIsRUFBZ0IsSUFBQVgsS0FBQWx1QixFQUFBLEdBQUFBLEVBQUEzYyxlQUFBNnFDLEdBQUEsQ0FBbUMsSUFBQUMsRUFBQW51QixFQUFBa3VCLEdBQVcsVUFBQUEsRUFBQXlnQixHQUFBNWQsRUFBQTVDLEdBQUEsNEJBQUFELEVBQUEsT0FBQUMsTUFBQWdpQixZQUFBLElBQUE3RCxHQUFBdmIsRUFBQTVDLEdBQUEsYUFBQUQsRUFBQSxpQkFBQUMsR0FBQSxhQUFBTSxHQUFBLEtBQUFOLElBQUF1ZSxHQUFBM2IsRUFBQTVDLEdBQUEsaUJBQUFBLEdBQUF1ZSxHQUFBM2IsRUFBQSxHQUFBNUMsR0FBQSxtQ0FBQUQsR0FBQSw2QkFBQUEsR0FBQSxjQUFBQSxJQUFBNkcsRUFBQTF4QyxlQUFBNnFDLEdBQUEsTUFBQUMsR0FBQXloQixHQUFBaHFELEVBQUFzb0MsR0FBQSxNQUFBQyxHQUFBaVIsR0FBQXJPLEVBQUE3QyxFQUFBQyxFQUFBRyxJQUFrVixPQUFBN3NDLEdBQVUsWUFBQWk3QyxHQUFBcDZDLEdBQzFlODlDLEdBQUE5OUMsRUFBQVYsR0FBQSxHQUFXLE1BQU0sZUFBQTg2QyxHQUFBcDZDLEdBQXNCb3BELEdBQUFwcEQsR0FBUSxNQUFNLG1CQUFBVixFQUFBYSxPQUFBSCxFQUFBc1AsYUFBQSxXQUFBNnRDLEdBQUE3OUMsRUFBQWEsUUFBb0UsTUFBTSxjQUFBb3NDLEVBQUF2c0MsR0FBa0JtNUQsV0FBQTc1RCxFQUFBNjVELFNBQWtDLE9BQVZuNUQsRUFBQVYsRUFBQWEsT0FBVTJvRCxHQUFBdmMsSUFBQWp0QyxFQUFBNjVELFNBQUFuNUQsR0FBQSxTQUFBVixFQUFBOGIsY0FBQTB0QyxHQUFBdmMsSUFBQWp0QyxFQUFBNjVELFNBQUE3NUQsRUFBQThiLGNBQUEsR0FBMkYsTUFBTSwyQkFBQW14QixFQUFBNHJCLFVBQUFuNEQsRUFBQW80RCxRQUFBN0ssS0FBc0RqaEIsRUFBQW9oQixHQUFBbGhCLEVBQUFGLEtBQUF3ckIsR0FBQTFzRCxHQUFtQkEsRUFBQXlvQyxVQUFBemxDLEVBQWMsT0FBQWhELEVBQUEyaUMsTUFBQTNpQyxFQUFBKzFDLFdBQUEsVUFBaUMsT0FBQS8xQyxFQUFBeW9DLFdBQUF6ekMsRUFBQSxPQUF3QyxNQUFNLE9BQUFnTyxHQUFBLE1BQUFoRCxFQUFBeW9DLFVBQUFxa0IsR0FBQTlwRCxFQUFBaEQsRUFBQWdELEVBQUF5aEQsY0FBQXZqQixJQUFBLGlCQUMxYkEsSUFBQSxPQUFBbGhDLEVBQUF5b0MsV0FBQXp6QyxFQUFBLFFBQUFnTyxFQUFBbWxELEdBQUFELEdBQUFwdEIsU0FBQXF0QixHQUFBamxCLEdBQUFwSSxTQUFBa3dCLEdBQUFockQsSUFBQW9oQyxHQUFBRixFQUFBbGhDLEdBQUF5b0MsVUFBQXpsQyxFQUFBaytCLEVBQUF1akIsY0FBQXJqQixFQUFBd0gsR0FBQTFILEtBQUFFLEVBQUF4NEIsWUFBQTVGLElBQUEwcEQsR0FBQTFzRCxLQUFBb2hDLEVBQUFwaEMsR0FBQWtoQyxHQUFBLElBQUFsK0IsRUFBQTFKLFNBQUEwSixJQUFBUSxlQUFBOFosZUFBQTRqQixJQUFBMEgsR0FBQTVvQyxFQUFBb2hDLEVBQUFxSCxVQUFBdkgsSUFBaVAsTUFBTSxjQUFjLFFBQTBCLEdBQTFCQSxFQUFBbGhDLEVBQUF1a0QsY0FBMEIsT0FBQXZrRCxFQUFBKzFDLFdBQUEsQ0FBeUIvMUMsRUFBQThrRCxlQUFBMWpCLEVBQW1CbUMsR0FBQXZqQyxFQUFJLE1BQUFELEVBQVFtaEMsRUFBQSxPQUFBQSxFQUFXRSxFQUFBLE9BQUFwK0IsR0FBQSxPQUFBQSxFQUFBdWhELGNBQW1DLE9BQUF2aEQsSUFBQWsrQixHQUFBRSxJQUFBLFFBQUFwK0IsSUFBQWt6QyxNQUFBN2tDLFdBQUEsUUFBQTh2QixFQUFBbmhDLEVBQUEya0QsY0FBQTNrRCxFQUFBMmtELFlBQUEzaEQsSUFBQTRoRCxXQUFBempCLElBQUFuaEMsRUFBQTJrRCxZQUNyWTNrRCxFQUFBMGtELFdBQUExaEQsSUFBQTRoRCxXQUFBLE1BQUE1aEQsRUFBQSt5QyxVQUFBLEtBQWtEN1UsSUFBQUUsR0FBQSxNQUFBcGhDLEVBQUErMUMsWUFBQTdVLEtBQUFsaEMsRUFBQSsxQyxXQUFBLEdBQWdELE1BQU0sT0FBYSxPQUFhLGNBQWMsT0FBQXVTLEtBQWFzRSxHQUFBNXNELEdBQU0sTUFBTSxRQUFBNG5ELEdBQUE1bkQsR0FBYyxNQUFNLE9BQWEsY0FBYyxRQUFBMGlDLEdBQUExaUMsRUFBQXZHLE9BQUErcEQsS0FBeUIsTUFBTSxRQUFBeHVELEVBQUEsT0FBaUJ1dUMsR0FBQSxLQUFXLEdBQUp2akMsRUFBQUQsRUFBSSxJQUFBMmpDLElBQUEsSUFBQTFqQyxFQUFBNmtELG9CQUFBLENBQXlDLElBQUozakIsRUFBQSxFQUFJRSxFQUFBcGhDLEVBQUFrMkMsTUFBYyxPQUFBOVUsSUFBU3ArQixFQUFBbytCLEVBQUEwakIsZ0JBQUE1akIsTUFBQWwrQixJQUFBbStCLEVBQUFDLEVBQUF5akIscUJBQUEzakIsTUFBQUMsR0FBQUMsSUFBQS92QixRQUE4RXJSLEVBQUE2a0Qsb0JBQUEzakIsRUFBd0IsVUFBQXFDLEdBQUEsT0FBQUEsR0FBcUIsT0FBQXB2QyxHQUFBLFNBQUFBLEVBQUE0aEQsYUFBQSxPQUM5YzVoRCxFQUFBd3dELGNBQUF4d0QsRUFBQXd3RCxZQUFBNWtELEVBQUE0a0QsYUFBQSxPQUFBNWtELEVBQUEya0QsYUFBQSxPQUFBdndELEVBQUF1d0QsYUFBQXZ3RCxFQUFBdXdELFdBQUFFLFdBQUE3a0QsRUFBQTRrRCxhQUFBeHdELEVBQUF1d0QsV0FBQTNrRCxFQUFBMmtELFlBQUEsRUFBQTNrRCxFQUFBZzJDLFlBQUEsT0FBQTVoRCxFQUFBdXdELFdBQUF2d0QsRUFBQXV3RCxXQUFBRSxXQUFBN2tELEVBQUE1TCxFQUFBd3dELFlBQUE1a0QsRUFBQTVMLEVBQUF1d0QsV0FBQTNrRCxRQUEwUCxDQUFlLFdBQVZBLEVBQUE0dUQsR0FBQTV1RCxJQUFVLE9BQUFBLEVBQUFnMkMsV0FBQSxLQUFBaDJDLEVBQXVDLE9BQUE1TCxNQUFBd3dELFlBQUF4d0QsRUFBQXV3RCxXQUFBLEtBQUF2d0QsRUFBQTRoRCxXQUFBLE1BQThELFVBQUEzaEQsRUFBQSxPQUFBQSxFQUFxQixVQUFBRCxFQUFnQixNQUFoQjRMLEVBQUE1TCxFQUEyQixZQUM5WixTQUFBczdELEdBQUExdkQsR0FBZSxJQUFBQyxFQUFBb3NELEdBQUFyc0QsRUFBQTQxQyxVQUFBNTFDLEVBQUEyakMsSUFBNkYsT0FBbkUzakMsRUFBQTBrRCxjQUFBMWtELEVBQUFza0QsYUFBK0IsT0FBQXJrRCxNQUFBdXZELEdBQUF4dkQsSUFBb0I4dUQsR0FBQS96QixRQUFBLEtBQWdCOTZCLEVBQzVHLFNBQUEwdkQsR0FBQTN2RCxFQUFBQyxHQUFpQit1RCxJQUFBLzVELEVBQUEsT0FBbUJnMEQsS0FBSytGLElBQUEsRUFBTUYsR0FBQXJzQixrQkFBQW9zQixHQUF3QixJQUFBejZELEVBQUE0TCxFQUFBa21ELDJCQUFtQzl4RCxJQUFBdXZDLElBQUEzakMsSUFBQTBqQyxJQUFBLE9BQUFGLEtBQUE4ckIsS0FBQTNyQixHQUFBdnZDLEVBQUFvdkMsR0FBQXloQixJQUFBdmhCLEdBQUExakMsR0FBQSs2QixRQUFBLE1BQUEvNkIsRUFBQTR2RCw0QkFBQSxHQUF1RyxJQUFULElBQUF2N0QsR0FBQSxJQUFTLENBQUcsSUFBSSxHQUFBNEwsRUFBQSxLQUFVLE9BQUF1akMsS0FBQXFzQixNQUFnQnJzQixHQUFBa3NCLEdBQUFsc0IsU0FBUyxLQUFVLE9BQUFBLElBQVNBLEdBQUFrc0IsR0FBQWxzQixJQUFTLE1BQUF4QyxHQUFTLEdBQUEybUIsR0FBQUQsR0FBQUQsR0FBQSxZQUFBamtCLEdBQUFudkMsR0FBQSxFQUFBazZELEdBQUF2dEIsT0FBcUMsQ0FBSyxPQUFBd0MsSUFBQXZ1QyxFQUFBLE9BQXlCLElBQUFnTyxFQUFBdWdDLEdBQUFuQyxFQUFBcCtCLEVBQUFtbUMsT0FBbUIsVUFBQS9ILEVBQXVCLENBQUtyaEMsRUFBQSxDQUFHLElBQUFtaEMsRUFBQW5oQyxFQUFBb2hDLEVBQUFDLEVBQUFaLEVBQUF4OUIsRUFBQWpQLEVBQUFndEMsRUFBMEUsR0FBdERLLEVBQUFzQyxHQUFJbEQsRUFBQXVWLFdBQUEsS0FBa0J2VixFQUFBbWtCLFlBQUFua0IsRUFBQWtrQixXQUFBLEtBQWdDLE9BQUEzd0QsR0FBQSxpQkFDL2RBLEdBQUEsbUJBQUFBLEVBQUFpZixLQUFBLENBQXNDLElBQUE5ZSxFQUFBSCxFQUFRQSxFQUFBb3RDLEVBQUksSUFBQXZzQyxHQUFBLEVBQUFzRCxHQUFBLEVBQWMsR0FBRyxRQUFBbkUsRUFBQThTLElBQUEsQ0FBZSxJQUFBKzVCLEVBQUE3c0MsRUFBQTRoRCxVQUFrQixVQUFBL1UsR0FBQSxRQUFBQSxJQUFBMmpCLGVBQUEsQ0FBMkNyc0QsRUFBQSxlQUFBMG9DLEVBQUFzckIsWUFBK0IsTUFBbUMsaUJBQTdCdHJCLEVBQUE3c0MsRUFBQXN3RCxhQUFBd0wsZUFBNkIsR0FBQWp2QixFQUFBaHNDLEVBQUEsSUFBbUMsSUFBQUEsR0FBQWdzQyxFQUFBaHNDLE9BQUFnc0MsSUFBd0I3c0MsSUFBQW8xQyxhQUFXLE9BQUFwMUMsR0FBZ0JBLEVBQUFvdEMsRUFBSSxHQUFpRixJQUE5RVAsRUFBQSxLQUFBN3NDLEVBQUE4UyxPQUFBKzVCLE9BQUEsSUFBQTdzQyxFQUFBMHdELGNBQUEwSCxVQUFBLE9BQUFwNEQsRUFBQXd3RCxlQUE4RTNqQixFQUFBLENBQW1FLEdBQTdDLFFBQWhCTyxFQUFBcHRDLEVBQUF5d0QsYUFBZ0J6d0QsRUFBQXl3RCxZQUFBLElBQUExQixJQUFBLENBQUE1dUQsSUFBQWl0QyxFQUFBenZCLElBQUF4ZCxHQUE2QyxNQUFBSCxFQUFBa0IsTUFBQSxDQUFtQmxCLEVBQUFnaUQsV0FBQSxHQUFnQnZWLEVBQUF1VixZQUFBLEtBQ2xlLElBQUF2VixFQUFBMzVCLE1BQUEsT0FBQTI1QixFQUFBbVYsVUFBQW5WLEVBQUEzNUIsSUFBQSxLQUFBdTZCLEVBQUF3bEIsR0FBQSxhQUFBLy9DLElBQUEsRUFBQWtnRCxHQUFBdm1CLEVBQUFZLEtBQTRFWixFQUFBc2tCLGVBQUEsV0FBNEIsTUFBQS9rRCxFQUFzQixRQUFkeWdDLEVBQUFVLEVBQUE0dUIsWUFBY3R2QixFQUFBVSxFQUFBNHVCLFVBQUEsSUFBQTNCLEdBQUFodEIsRUFBQSxJQUFBMmhCLElBQUF0aUIsRUFBQXBvQixJQUFBbGtCLEVBQUFpdEMsU0FBQSxLQUFBQSxFQUFBWCxFQUFBN3JDLElBQUFULE1BQUFpdEMsRUFBQSxJQUFBMmhCLElBQUF0aUIsRUFBQXBvQixJQUFBbGtCLEVBQUFpdEMsSUFBcUdBLEVBQUFsMkIsSUFBQW0yQixLQUFBRCxFQUFBenZCLElBQUEwdkIsR0FBQVosRUFBQXV2QixHQUFBejZELEtBQUEsS0FBQTRyQyxFQUFBaHRDLEVBQUFrdEMsR0FBQWx0QyxFQUFBOGUsS0FBQXd0QixPQUF1RCxJQUFBNXJDLEVBQUFzc0MsRUFBQSxpQkFBQWhwQyxNQUFBLGVBQUE4dEQsR0FBQTlrQixFQUFBRSxJQUFBLEtBQUFGLEVBQUFocEMsRUFBQXRELEdBQW9FLEdBQUFzc0MsR0FBQTh0QixHQUFBOXRCLElBQUE4dEIsR0FBQTl0QixHQUFtQm50QyxFQUFBZ2lELFdBQUEsS0FBa0JoaUQsRUFBQSt3RCxlQUFBMWpCLEVBQW1CLE1BQUFyaEMsRUFBUWhNLElBQUFvMUMsYUFBVyxPQUFBcDFDLEdBQWdCQSxFQUFBb0UsT0FBQXE0QyxHQUFBaFEsRUFBQS9tQyxPQUFBLDZNQUN6YmkzQyxHQUFBbFEsSUFBT3l1QixJQUFBLEVBQU1sN0QsRUFBQXV6RCxHQUFBdnpELEVBQUF5c0MsR0FBVVUsRUFBQUMsRUFBSSxHQUFHLE9BQUFELEVBQUFyNkIsS0FBYyxPQUFBcTZCLEVBQUE2VSxXQUFBLEtBQXlCN1UsRUFBQTRqQixlQUFBMWpCLEVBQStCNGxCLEdBQUE5bEIsRUFBWkUsRUFBQWl0QixHQUFBbnRCLEVBQUFudEMsRUFBQXF0QyxJQUFvQixNQUFBcmhDLEVBQVEsVUFBQTdMLEVBQUFILEVBQUFhLEVBQUFzc0MsRUFBQXpuQyxLQUFBdkIsRUFBQWdwQyxFQUFBdUgsVUFBQSxPQUFBdkgsRUFBQTZVLGFBQUEsbUJBQUFuaEQsRUFBQWszRCwwQkFBQSxPQUFBNXpELEdBQUEsbUJBQUFBLEVBQUFzMkQsb0JBQUEsT0FBQUMsUUFBQXhqRCxJQUFBL1MsS0FBQSxDQUF5TGdwQyxFQUFBNlUsV0FBQSxLQUFrQjdVLEVBQUE0akIsZUFBQTFqQixFQUErQjRsQixHQUFBOWxCLEVBQVpFLEVBQUFtdEIsR0FBQXJ0QixFQUFBaHRDLEVBQUFrdEMsSUFBb0IsTUFBQXJoQyxHQUFTbWhDLElBQUFpSSxhQUFXLE9BQUFqSSxHQUFnQnFDLEdBQUFnc0IsR0FBQXZzRCxHQUFRLFNBSDVCNU8sR0FBQSxFQUFBazZELEdBQUF2dEIsSUFHdUMsTUFBd0QsR0FBekNndUIsSUFBQSxFQUFNckgsR0FBQUQsR0FBQUQsR0FBQXFILEdBQUFyc0Isa0JBQUEsS0FBbUNwdUMsRUFBQXF2QyxHQUFBLEtBQUExakMsRUFBQWl3RCxhQUFBLFVBQ3JkLFVBQUF6c0IsR0FBQXhqQyxFQUFBaXdELGFBQUEsU0FBcUMsQ0FBMkQsR0FBaEMsUUFBdEI1N0QsRUFBQTJMLEVBQUErNkIsUUFBQTZhLFlBQXNCM2dELEVBQUEsT0FBeUJ5dUMsR0FBQSxLQUFPd3JCLEdBQUEsQ0FBMEUsR0FBbkVqc0QsRUFBQWpELEVBQUEybEQsa0JBQXNCdGtCLEVBQUFyaEMsRUFBQWdtRCxvQkFBd0I3a0IsRUFBQW5oQyxFQUFBOGxELGlCQUFxQixJQUFBN2lELEtBQUE3TyxHQUFBLElBQUFpdEMsS0FBQWp0QyxHQUFBLElBQUErc0MsS0FBQS9zQyxFQUE2RSxPQUF0Q3l4RCxHQUFBN2xELEVBQUE1TCxRQUFRODdELEdBQUFsd0QsRUFBQTNMLEVBQUFELEVBQUE0TCxFQUFBK2tELGdCQUFBLEdBQXFDLElBQUEva0QsRUFBQXlsRCxVQUFBeGxELEVBQStHLE9BQTVGRCxFQUFBeWxELFVBQUEsRUFBY3J4RCxFQUFBNEwsRUFBQWttRCwyQkFBQTl4RCxFQUFpQzZMLEVBQUFELEVBQUEra0QsZUFBQSxnQkFBOEJtTCxHQUFBbHdELEVBQUEzTCxFQUFBRCxFQUFBNkwsR0FBQSxHQUF1QkEsSUFBQSxJQUFBZ3ZELElBQUFwSixHQUFBN2xELEVBQUE1TCxJQUFBNkwsRUFBQSxlQUFBZ21ELEdBQUFqbUQsRUFBQTVMLEtBQUE2NkQsUUFBQWh2RCxLQUFBLGVBQUE4b0QsTUFBQTlvRCxFQUFBZ3ZELEdBQUFodkQsRUFBQWl3RCxHQUFBbHdELEVBQUEzTCxFQUFBRCxFQUFBNEwsRUFBQStrRCxlQUFBLEVBQUE5a0QsRUFBQSxFQUFBQSxLQUFBRCxFQUFBNHZELDRCQUNyWHg3RCxFQUFBNEwsRUFBQWl3RCxhQUFBNTdELElBQXFCLFNBQUFpNUQsR0FBQXR0RCxFQUFBQyxHQUFpQixRQUFBN0wsRUFBQTRMLEVBQUFvcEMsT0FBbUIsT0FBQWgxQyxHQUFTLENBQUUsT0FBQUEsRUFBQTBTLEtBQWMsV0FBQXpTLEVBQUFELEVBQUFzMEMsVUFBeUIsc0JBQUF0MEMsRUFBQXNGLEtBQUFxeUQsMEJBQUEsbUJBQUExM0QsRUFBQW82RCxvQkFBQSxPQUFBQyxRQUFBeGpELElBQUE3VyxJQUFrTCxPQUF6QjJ5RCxHQUFBNXlELEVBQXJCNEwsRUFBQXd1RCxHQUFBcDZELEVBQVY0TCxFQUFBdW5ELEdBQUF0bkQsRUFBQUQsR0FBVSxrQkFBNkJrcEQsR0FBQTkwRCxFQUFBLFlBQXdCLE1BQU0sT0FBK0QsT0FBekI0eUQsR0FBQTV5RCxFQUFyQjRMLEVBQUFzdUQsR0FBQWw2RCxFQUFqQjRMLEVBQUF1bkQsR0FBQXRuRCxFQUFBRCxHQUFpQixrQkFBNkJrcEQsR0FBQTkwRCxFQUFBLFlBQXdCQSxJQUFBZzFDLE9BQVcsSUFBQXBwQyxFQUFBOEcsTUFBQWtnRCxHQUFBaG5ELEVBQUE1TCxFQUFBazZELEdBQUF0dUQsRUFBQTVMLEVBQUFtekQsR0FBQXRuRCxFQUFBRCxHQUFBLGFBQUFrcEQsR0FBQWxwRCxFQUFBLGFBQzNYLFNBQUFncEQsR0FBQWhwRCxFQUFBQyxHQUFzTixPQUFyTSxJQUFBc0MsR0FBQXZDLEVBQUF1QyxHQUFBeXNELEdBQUFodkQsRUFBQW12RCxHQUFBLFdBQUF4ckIsR0FBQSxFQUFBMWpDLEVBQUEvSyxNQUFBOEssRUFBQW13RCxHQUFBLDhCQUFBbndELEVBQUEseUNBQUFBLEVBQUEsbUJBQUEwakMsSUFBQTFqQyxJQUFBMmpDLE1BQUEzakMsS0FBQSxXQUEwS213RCxLQUFBLElBQUFDLElBQUFwd0QsRUFBQW93RCxTQUFBcHdELEdBQTJCQSxFQUFTLFNBQUFnd0QsR0FBQWh3RCxFQUFBQyxFQUFBN0wsR0FBbUIsSUFBQUMsRUFBQTJMLEVBQUErdkQsVUFBa0IsT0FBQTE3RCxLQUFBazJELE9BQUF0cUQsR0FBc0IsT0FBQXlqQyxJQUFBQyxLQUFBdnZDLEVBQUFzdkMsR0FBQSxNQUEwQnpqQyxFQUFBRCxFQUFBK2xELHNCQUFBMXhELEVBQUEyTCxFQUFBZ21ELG9CQUFBLElBQUEvbEQsR0FBQTdMLEdBQUE2TCxHQUFBN0wsR0FBQUMsSUFBNkUyTCxFQUFBeWxELFVBQUEsR0FBbUMsS0FBckJ4bEQsRUFBQUQsRUFBQThsRCxtQkFBcUI3bEQsRUFBQTdMLEtBQUE0TCxFQUFBOGxELGlCQUFBMXhELEdBQW1Dd3hELEdBQUF4eEQsRUFBQTRMLEdBQTJCLEtBQW5CNUwsRUFBQTRMLEVBQUEra0QsaUJBQW1Cb0osR0FBQW51RCxFQUFBNUwsS0FFbGUsU0FBQXVvQixHQUFBM2MsRUFBQUMsR0FBaUJELEVBQUEra0QsZUFBQTlrRCxJQUFBRCxFQUFBK2tELGVBQUE5a0QsR0FBeUMsSUFBQTdMLEVBQUE0TCxFQUFBNDFDLFVBQWtCLE9BQUF4aEQsS0FBQTJ3RCxlQUFBOWtELElBQUE3TCxFQUFBMndELGVBQUE5a0QsR0FBbUQsSUFBQTVMLEVBQUEyTCxFQUFBb3BDLE9BQUFubUMsRUFBQSxLQUFzQixVQUFBNU8sR0FBQSxJQUFBMkwsRUFBQThHLElBQUE3RCxFQUFBakQsRUFBQTBvQyxlQUFxQyxLQUFVLE9BQUFyMEMsR0FBUyxDQUFnSSxHQUE5SEQsRUFBQUMsRUFBQXVoRCxVQUFjdmhELEVBQUF5d0Qsb0JBQUE3a0QsSUFBQTVMLEVBQUF5d0Qsb0JBQUE3a0QsR0FBbUQsT0FBQTdMLEtBQUEwd0Qsb0JBQUE3a0QsSUFBQTdMLEVBQUEwd0Qsb0JBQUE3a0QsR0FBNkQsT0FBQTVMLEVBQUErMEMsUUFBQSxJQUFBLzBDLEVBQUF5UyxJQUFBLENBQStCN0QsRUFBQTVPLEVBQUFxMEMsVUFBYyxNQUFNcjBDLElBQUErMEMsT0FBVyxPQUFBbm1DLEVBQzNZLFNBQUFpbUQsR0FBQWxwRCxFQUFBQyxHQUEyQixRQUFWRCxFQUFBMmMsR0FBQTNjLEVBQUFDLE9BQVUrdUQsSUFBQSxJQUFBcnJCLElBQUExakMsRUFBQTBqQyxJQUFBMnJCLEtBQUE5SixHQUFBeGxELEVBQUFDLEdBQUErdUQsS0FBQUcsSUFBQXpyQixLQUFBMWpDLEdBQUFtdUQsR0FBQW51RCxJQUFBK2tELGdCQUFBc0wsR0FBQUMsS0FBQUQsR0FBQSxFQUFBcDdELEVBQUEsU0FBd0csU0FBQXM3RCxHQUFBdndELEVBQUFDLEVBQUE3TCxFQUFBQyxFQUFBNE8sR0FBdUIsSUFBQW8rQixFQUFBOStCLEdBQVNBLEdBQUEsV0FBYyxJQUFJLE9BQUF2QyxFQUFBQyxFQUFBN0wsRUFBQUMsRUFBQTRPLEdBQWtCLFFBQVFWLEdBQUE4K0IsR0FBTSxJQUFBbXZCLEdBQUEsS0FBQXhzQixHQUFBLEtBQUF5c0IsR0FBQSxFQUFBQyxRQUFBLEVBQUF4c0IsSUFBQSxFQUFBeXNCLEdBQUEsS0FBQXpxQixHQUFBLEVBQUFrcUIsR0FBQSxFQUFBUSxJQUFBLEVBQUFDLEdBQUEsS0FBQXpxQixJQUFBLEVBQUEwcUIsSUFBQSxFQUFBWCxJQUFBLEVBQUFZLEdBQUEsS0FBQUMsR0FBQS9zQixFQUFBZ3RCLGVBQUFDLEdBQUEsWUFBQUYsR0FBQSxNQUFBRyxHQUFBRCxHQUFBWixHQUFBLEdBQUFELEdBQUEsRUFBQWUsR0FBQSxLQUFxSyxTQUFBQyxLQUFjSCxHQUFBLGFBQUFqdEIsRUFBQWd0QixlQUFBRCxJQUFBLE1BQ3hZLFNBQUFNLEdBQUF0eEQsRUFBQUMsR0FBaUIsT0FBQXd3RCxHQUFBLENBQVcsR0FBQXh3RCxFQUFBd3dELEdBQUEsT0FBZSxPQUFBQyxJQUFBenNCLEVBQUFzckIsd0JBQUFtQixJQUEwQ0QsR0FBQXh3RCxFQUFLRCxFQUFBaWtDLEVBQUFndEIsZUFBQUQsR0FBdUJOLEdBQUF6c0IsRUFBQXN0QiwwQkFBQUMsR0FBQSxDQUFvQ2xnQyxRQUFBLGVBQUFyeEIsR0FBQUQsSUFBOEIsU0FBQWt3RCxHQUFBbHdELEVBQUFDLEVBQUE3TCxFQUFBQyxFQUFBNE8sR0FBdUJqRCxFQUFBK2tELGVBQUExd0QsRUFBbUIsSUFBQTRPLEdBQUE0c0QsS0FBQSxFQUFBNXNELElBQUFqRCxFQUFBeXhELGNBQUE5TyxHQUFnSCxTQUFBM2lELEVBQUFDLEVBQUE3TCxHQUFtQjRMLEVBQUE0dkQsNEJBQUF4N0QsRUFBZ0M0TCxFQUFBaXdELGFBQUFod0QsRUFBaUJveEQsS0FBS0YsR0FBQUQsR0FBTVEsR0FBQTF4RCxFQUFBNUwsSUFBL0xtQixLQUFBLEtBQUF5SyxFQUFBQyxFQUFBN0wsR0FBQTZPLEtBQUFqRCxFQUFBNHZELDRCQUFBeDdELEVBQUE0TCxFQUFBaXdELGFBQUFod0QsR0FBdU0sU0FBQThvRCxLQUFjLE9BQUE3a0IsR0FBQWl0QixJQUFlUSxLQUFLLElBQUF6ckIsSUFBQSxJQUFBQSxLQUFBbXJCLEtBQUFGLEdBQUFELElBQTJCQyxJQUNqZSxTQUFBaEQsR0FBQW51RCxFQUFBQyxHQUFpQixPQUFBRCxFQUFBNHhELG1CQUFBNXhELEVBQUEra0QsZUFBQTlrRCxFQUFBLE9BQUErakMsSUFBQXdzQixHQUFBeHNCLEdBQUFoa0MsSUFBQTR4RCxrQkFBQTV4RCxJQUFBZ2tDLE1BQUE0dEIsa0JBQUE1eEQsR0FBQTR4RCxrQkFBQXBCLElBQUF2d0QsRUFBQUQsRUFBQStrRCxpQkFBQS9rRCxFQUFBK2tELGVBQUE5a0QsR0FBa0xpa0MsS0FBQWtDLEdBQUEwcUIsS0FBQUgsR0FBQTN3RCxFQUFBa21DLEdBQUEsV0FBQTJyQixHQUFBN3hELEVBQUEsNkJBQUFDLEVBQUE2eEQsR0FBQSxlQUFBUixHQUFBdHhELEVBQUFDLElBQ25NLFNBQUEweEQsS0FBYyxJQUFBM3hELEVBQUEsRUFBQUMsRUFBQSxLQUFlLFVBQUErakMsR0FBQSxRQUFBNXZDLEVBQUE0dkMsR0FBQTN2QyxFQUFBbThELEdBQTZCLE9BQUFuOEQsR0FBUyxDQUFFLElBQUE0TyxFQUFBNU8sRUFBQTB3RCxlQUF1QixPQUFBOWhELEVBQUEsQ0FBNkMsSUFBbkMsT0FBQTdPLEdBQUEsT0FBQTR2QyxLQUFBL3VDLEVBQUEsT0FBbUNaLE1BQUF1OUQsa0JBQUEsQ0FBNEJwQixHQUFBeHNCLEdBQUEzdkMsRUFBQXU5RCxrQkFBQSxLQUE4QixNQUFNLEdBQUF2OUQsSUFBQW04RCxNQUFBdnRELEVBQUE1TyxFQUFBdTlELGtCQUFBNXRCLEdBQUE0dEIsa0JBQUEzdUQsRUFBQTVPLEVBQUF1OUQsa0JBQUEsU0FBdUYsSUFBQXY5RCxJQUFBMnZDLEdBQUEsRUFBZUEsR0FBQTV2QyxHQUFJdzlELGtCQUFBcEIsR0FBdUJuOEQsRUFBQXU5RCxrQkFBQSxLQUF5QixNQUFNeDlELEVBQUF3OUQsa0JBQUF2OUQsRUFBQXU5RCxrQkFBQXY5RCxFQUFBdTlELGtCQUFBLEtBQXNFdjlELEVBQUFELEVBQUF3OUQsc0JBQXNCLENBQW9CLEdBQWYzdUQsRUFBQWpELE1BQUFpRCxFQUFBaEQsRUFBQTVMLEdBQWVBLElBQUEydkMsR0FBQSxNQUFlLGdCQUN4ZWhrQyxFQUFBLE1BQVE1TCxFQUFBQyxFQUFJQSxJQUFBdTlELG1CQUF1QmpCLEdBQUExd0QsRUFBS2ltQyxHQUFBbG1DLEVBQUksSUFBQSt4RCxJQUFBLEVBQVUsU0FBQWxDLEtBQWMsUUFBQWtDLE1BQUE5dEIsRUFBQSt0Qix5QkFBQUQsSUFBQSxHQUFnRCxTQUFBUCxLQUFjLElBQUksSUFBQTNCLE1BQUEsT0FBQVcsR0FBQSxDQUFxQmEsS0FBSyxJQUFBcnhELEVBQUF3d0QsR0FBUyxHQUFHLElBQUF2d0QsRUFBQUQsRUFBQStrRCxlQUF1QixJQUFBOWtELEdBQUFpeEQsSUFBQWp4RCxJQUFBRCxFQUFBa21ELDJCQUFBZ0wsSUFBZ0RseEQsSUFBQTR4RCx3QkFBc0I1eEQsSUFBQXd3RCxJQUFjc0IsR0FBQSxNQUFTLFFBQVFDLElBQUEsR0FDeFMsU0FBQUQsR0FBQTl4RCxFQUFBQyxHQUFzQixHQUFMMHhELEtBQUsxeEQsRUFBQSxJQUFBb3hELEtBQUFGLEdBQUFELEdBQW9CLE9BQUFQLElBQUEsSUFBQXpxQixJQUFBbG1DLEdBQUFrbUMsTUFBQTZyQixJQUFBYixHQUFBaHJCLEtBQW9DMnJCLEdBQUFsQixHQUFBenFCLEdBQUFnckIsR0FBQWhyQixJQUFBeXJCLEtBQUFOLEtBQUFGLEdBQUFELFFBQStCLEtBQVUsT0FBQVAsSUFBQSxJQUFBenFCLElBQUFsbUMsR0FBQWttQyxJQUF1QjJyQixHQUFBbEIsR0FBQXpxQixJQUFBLEdBQUF5ckIsS0FBaUUsR0FBL0MxeEQsSUFBQXd3RCxHQUFBLEVBQUFDLEdBQUEsTUFBa0IsSUFBQXhxQixJQUFBb3JCLEdBQUFYLEdBQUF6cUIsSUFBZ0JtcUIsR0FBQSxFQUFLZSxHQUFBLEtBQVEsT0FBQUwsR0FBQSxJQUFBL3dELEVBQUErd0QsTUFBQSxLQUFBOXdELEVBQUEsRUFBa0NBLEVBQUFELEVBQUF0SSxPQUFXdUksSUFBQSxDQUFLLElBQUE3TCxFQUFBNEwsRUFBQUMsR0FBVyxJQUFJN0wsRUFBQTY5RCxjQUFnQixNQUFBNTlELEdBQVN1OEQsU0FBQSxFQUFBQyxHQUFBeDhELElBQWtCLEdBQUF1OEQsR0FBQSxNQUFBNXdELEVBQUE2d0QsTUFBQSxLQUFBRCxJQUFBLEVBQUE1d0QsRUFBa0MsU0FBQTB4RCxHQUFBMXhELEVBQUFDLEdBQWlCaWtDLElBQUFqdkMsRUFBQSxPQUFrQjA3RCxHQUFBM3dELEVBQUtrbUMsR0FBQWptQyxFQUFJNHhELEdBQUE3eEQsRUFBQUMsR0FBQSxHQUFXNnhELEdBQUEsZUFDcFosU0FBQUQsR0FBQTd4RCxFQUFBQyxFQUFBN0wsR0FBMEMsR0FBdkI4dkMsSUFBQWp2QyxFQUFBLE9BQWtCaXZDLElBQUEsRUFBSzl2QyxFQUFBLENBQU0sSUFBQUMsRUFBQTJMLEVBQUFpd0QsYUFBcUIsT0FBQTU3RCxFQUFBNjlELEdBQUFseUQsRUFBQTNMLEVBQUE0TCxJQUFBRCxFQUFBaXdELGFBQUEsV0FBQTU3RCxFQUFBMkwsRUFBQXl4RCxpQkFBQXp4RCxFQUFBeXhELGVBQUEsRUFBQTdPLEdBQUF2dUQsSUFBQXM3RCxHQUFBM3ZELEVBQUE1TCxHQUFBLFFBQUFDLEVBQUEyTCxFQUFBaXdELGdCQUFBSixLQUFBN3ZELEVBQUFpd0QsYUFBQTU3RCxFQUFBNjlELEdBQUFseUQsRUFBQTNMLEVBQUE0TCxVQUFtSyxRQUFBNUwsRUFBQTJMLEVBQUFpd0QsY0FBQWlDLEdBQUFseUQsRUFBQTNMLEVBQUE0TCxJQUFBRCxFQUFBaXdELGFBQUEsV0FBQTU3RCxFQUFBMkwsRUFBQXl4RCxpQkFBQXp4RCxFQUFBeXhELGVBQUEsRUFBQTdPLEdBQUF2dUQsSUFBQXM3RCxHQUFBM3ZELEVBQUE1TCxHQUFBLFFBQUFDLEVBQUEyTCxFQUFBaXdELGVBQUFpQyxHQUFBbHlELEVBQUEzTCxFQUFBNEwsSUFBaUtpa0MsSUFBQSxFQUN6WSxTQUFBZ3VCLEdBQUFseUQsRUFBQUMsRUFBQTdMLEdBQW1CLElBQUFDLEVBQUEyTCxFQUFBbXlELFdBQW1CLFVBQUE5OUQsS0FBQSs5RCxpQkFBQWgrRCxJQUFBLE9BQUEyOEQsTUFBQSxDQUFBMThELEdBQUEwOEQsR0FBQWw0RCxLQUFBeEUsS0FBQWcrRCxRQUErRyxPQUFwQ3J5RCxFQUFBaXdELGFBQUFod0QsT0FBaUJELEVBQUEra0QsZUFBQSxHQUEwQi9rRCxFQUFBaXdELGFBQUEsS0FBb0Jqd0QsSUFBQW94RCxHQUFBZixNQUFBZSxHQUFBcHhELEVBQUFxd0QsR0FBQSxHQUF3QmxCLEdBQUFILElBQUEsRUFBU2h2RCxFQUFBKzZCLFVBQUE5NkIsR0FBQWhMLEVBQUEsT0FBOEQsS0FBaENiLEVBQUE0TCxFQUFBNHZELDhCQUFnQzM2RCxFQUFBLE9BQXNCK0ssRUFBQTR2RCw0QkFBQSxFQUFnQ3Y3RCxFQUFBNEwsRUFBQThrRCxlQUFtQixJQUFBOWhELEVBQUFoRCxFQUFBNmtELG9CQUNtSixHQUR2SHp3RCxFQUFBNE8sRUFBQTVPLEVBQUE0TyxFQUFBNU8sRUFBVTJMLEVBQUF5bEQsVUFBQSxFQUFjLElBQUFweEQsR0FBQTJMLEVBQUEwbEQsb0JBQUEsRUFBQTFsRCxFQUFBMmxELGtCQUFBLEVBQUEzbEQsRUFBQStsRCxzQkFBQSxFQUFBL2xELEVBQUFnbUQsb0JBQUEsRUFBQWhtRCxFQUFBOGxELGlCQUM1WSxJQUFBenhELEVBQUEyTCxFQUFBOGxELG1CQUFBOWxELEVBQUE4bEQsaUJBQUEsUUFBQTdpRCxFQUFBakQsRUFBQTJsRCxxQkFBQTFpRCxFQUFBNU8sRUFBQTJMLEVBQUEwbEQsb0JBQUExbEQsRUFBQTJsRCxrQkFBQSxFQUFBM2xELEVBQUEwbEQsb0JBQUFyeEQsSUFBQTJMLEVBQUEwbEQsb0JBQUExbEQsRUFBQTJsRCxvQkFBQSxLQUFBMWlELEVBQUFqRCxFQUFBK2xELHVCQUFBUCxHQUFBeGxELEVBQUEzTCxLQUFBMkwsRUFBQWdtRCxxQkFBQWhtRCxFQUFBK2xELHNCQUFBLEVBQUEvbEQsRUFBQWdtRCxvQkFBQSxFQUFBaG1ELEVBQUE4bEQsaUJBQUEsRUFBQU4sR0FBQXhsRCxFQUFBM0wsTUFBQTRPLEdBQUF1aUQsR0FBQXhsRCxFQUFBM0wsSUFBb1d1eEQsR0FBQSxFQUFBNWxELEdBQVE4dUQsR0FBQS96QixRQUFBLEtBQWdCLEVBQUE5NkIsRUFBQSsxQyxVQUFBLE9BQUEvMUMsRUFBQTBrRCxZQUFBMWtELEVBQUEwa0QsV0FBQUUsV0FBQTVrRCxFQUFBNUwsRUFBQTRMLEVBQUEya0QsYUFBQXZ3RCxFQUFBNEwsRUFBQTVMLEVBQUE0TCxFQUFBMmtELFlBQWtHdkMsR0FBQTNHLEdBQWFhLEdBQVB0NUMsRUFBQW81QyxNQUFPLENBQVUsc0JBQ3JmcDVDLEVBQUEsSUFBQW8rQixFQUFBLENBQVNoM0IsTUFBQXBILEVBQUErNUMsZUFBQTlnRCxJQUFBK0csRUFBQWc2QyxtQkFBMkNqOUMsRUFBQSxDQUFxRCxJQUFBbWhDLEdBQTdDRSxLQUFBcCtCLEVBQUFRLGdCQUFBNDlCLEVBQUFuN0IsYUFBQTdOLFFBQTZDOGtELGNBQUE5YixFQUFBOGIsZUFBdUMsR0FBQWhjLEdBQUEsSUFBQUEsRUFBQW14QixXQUFBLENBQXdCanhCLEVBQUFGLEVBQUErYixXQUFlLElBQUE5YixFQUFBRCxFQUFBaWMsYUFBQTNjLEVBQUFVLEVBQUFrYyxVQUFtQ2xjLElBQUFtYyxZQUFnQixJQUFJamMsRUFBQTluQyxTQUFBa25DLEVBQUFsbkMsU0FBc0IsTUFBQWc1RCxHQUFVbHhCLEVBQUEsS0FBTyxNQUFBcmhDLEVBQVEsSUFBQWhNLEVBQUEsRUFBQUcsR0FBQSxFQUFBVSxHQUFBLEVBQUFzRCxFQUFBLEVBQUEwb0MsRUFBQSxFQUFBRyxFQUFBLzlCLEVBQUFxZ0MsRUFBQSxLQUFxQ3JqQyxFQUFBLE9BQVEsQ0FBRSxRQUFBc1MsRUFBYXl1QixJQUFBSyxHQUFBLElBQUFELEdBQUEsSUFBQUosRUFBQXpuQyxXQUFBcEYsRUFBQUgsRUFBQW90QyxHQUFzQ0osSUFBQVAsR0FBQSxJQUFBVSxHQUFBLElBQUFILEVBQUF6bkMsV0FBQTFFLEVBQUFiLEVBQUFtdEMsR0FBc0MsSUFBQUgsRUFBQXpuQyxXQUFBdkYsR0FBQWd0QyxFQUFBbjRCLFVBQUFuUixRQUF3QyxRQUFBNmEsRUFBQXl1QixFQUFBcDRCLGFBQWlDMDZCLEVBQUF0QyxFQUFJQSxFQUFBenVCLEVBQUksT0FBTSxDQUFFLEdBQUF5dUIsSUFDOWYvOUIsRUFBQSxNQUFBaEQsRUFBc0QsR0FBNUNxakMsSUFBQWpDLEtBQUFscEMsSUFBQWlwQyxJQUFBanRDLEVBQUFILEdBQXNCc3ZDLElBQUE3QyxLQUFBSSxJQUFBTSxJQUFBdHNDLEVBQUFiLEdBQXNCLFFBQUF1ZSxFQUFBeXVCLEVBQUF6N0IsYUFBQSxNQUFzQys5QixHQUFKdEMsRUFBQXNDLEdBQUlocEMsV0FBZTBtQyxFQUFBenVCLEVBQUk4dUIsR0FBQSxJQUFBbHRDLElBQUEsSUFBQVUsRUFBQSxNQUF1QndWLE1BQUFsVyxFQUFBK0gsSUFBQXJILFFBQWV3c0MsRUFBQSxLQUFZQSxLQUFBLENBQU1oM0IsTUFBQSxFQUFBbk8sSUFBQSxRQUFlbWxDLEVBQUEsS0FBc0QsSUFBMUNpaEIsR0FBQSxDQUFJa1EsWUFBQXZ2RCxFQUFBd3ZELGVBQUFweEIsR0FBZ0NxYSxJQUFBLEVBQU1qWSxHQUFBcHZDLEVBQVEsT0FBQW92QyxJQUFTLENBQUV4Z0MsR0FBQSxFQUFLbytCLE9BQUEsRUFBUyxJQUFJLEtBQUssT0FBQW9DLElBQVMsQ0FBRSxPQUFBQSxHQUFBdVMsVUFBQWgyQyxFQUFBLENBQXNCLElBQUEwZ0MsRUFBQStDLEdBQUFtUyxVQUFzQixRQUFKeFUsRUFBQXFDLElBQUkzOEIsS0FBYyw2QkFBQTlHLEVBQStCLGNBQUFvaEMsRUFBQTRVLFdBQUEsT0FBQXRWLEVBQUEsQ0FBcUMsSUFBQUMsRUFBQUQsRUFBQWdrQixjQUFBM2pCLEVBQUFMLEVBQUE4akIsY0FBQWtPLEVBQUF0eEIsRUFBQXNILFVBQUFpcUIsRUFBQUQsRUFBQTdJLHdCQUFBem9CLEVBQUFpakIsY0FDL1pqakIsRUFBQTFuQyxLQUFBaW5DLEVBQUF5QyxHQUFBaEMsRUFBQTFuQyxLQUFBaW5DLEdBQUFJLEdBQXdCMnhCLEVBQUFFLG9DQUFBRCxFQUEwQyxNQUFBM3lELEVBQVEsMENBQUFBLEVBQTRDLFFBQUEvSyxFQUFBLFFBQWtCd3VDLE1BQUFvaEIsWUFBZ0IsTUFBQTBOLEdBQVV0dkQsR0FBQSxFQUFBbytCLEVBQUFreEIsRUFBVXR2RCxJQUFBLE9BQUF3Z0MsSUFBQXh1QyxFQUFBLE9BQUFxNEQsR0FBQTdwQixHQUFBcEMsR0FBQSxPQUFBb0MsV0FBQW9oQixhQUFpRSxJQUFBcGhCLEdBQUFwdkMsRUFBUSxPQUFBb3ZDLElBQVMsQ0FBRS9DLEdBQUEsRUFBS0MsT0FBQSxFQUFTLElBQUksS0FBSyxPQUFBOEMsSUFBUyxDQUFFLElBQUE3QyxFQUFBNkMsR0FBQXVTLFVBQTJDLEdBQXpCLEdBQUFwVixHQUFBcWUsR0FBQXhiLEdBQUFpRixVQUFBLElBQXlCLElBQUE5SCxFQUFBLENBQVUsSUFBQUssRUFBQXdDLEdBQUFtUyxVQUFrQixVQUFBM1UsRUFBQSxDQUFhLElBQUFwckMsRUFBQW9yQyxFQUFBMkIsSUFBWSxPQUFBL3NDLElBQUEsbUJBQUFBLElBQUEsTUFBQUEsRUFBQWtsQyxRQUFBLE9BQTBELFVBQUE2RixHQUFhLE9BQUFndEIsR0FBQW5xQixJQUFhQSxHQUFBdVMsWUFBQSxFQUFnQixNQUFNLE9BQUE0WCxHQUFBbnFCLElBQzVlQSxHQUFBdVMsWUFBQSxFQUFnQjhYLEdBQUFycUIsR0FBQW1TLFVBQUFuUyxJQUFrQixNQUFNLE9BQUFxcUIsR0FBQXJxQixHQUFBbVMsVUFBQW5TLElBQXlCLE1BQU0sT0FBV2lxQixHQUFYM3NCLEVBQUEwQyxJQUFpQjFDLEVBQUFxSSxPQUFBLEtBQWNySSxFQUFBb1YsTUFBQSxLQUFhcFYsRUFBQXlqQixjQUFBLEtBQXFCempCLEVBQUEwakIsWUFBQSxLQUFtQixJQUFBM2lCLEVBQUFmLEVBQUE2VSxVQUFrQixPQUFBOVQsTUFBQXNILE9BQUEsS0FBQXRILEVBQUFxVSxNQUFBLEtBQUFyVSxFQUFBMGlCLGNBQUEsS0FBQTFpQixFQUFBMmlCLFlBQUEsTUFBK0VoaEIsTUFBQW9oQixZQUFnQixNQUFBME4sR0FBVTd4QixHQUFBLEVBQUFDLEVBQUE0eEIsRUFBVTd4QixJQUFBLE9BQUErQyxJQUFBeHVDLEVBQUEsT0FBQXE0RCxHQUFBN3BCLEdBQUE5QyxHQUFBLE9BQUE4QyxXQUFBb2hCLGFBQWdILEdBQS9DaHZELEVBQUF5c0QsR0FBS3JoQixFQUFBb2IsS0FBT3piLEVBQUEvcUMsRUFBQTI4RCxZQUFnQjl4QixFQUFBN3FDLEVBQUE0OEQsZUFBbUJ4eEIsSUFBQUwsUUFBQW45QixlQTFJbEwsU0FBQW92RCxFQUFBN3lELEVBQUFDLEdBQWlCLFNBQUFELElBQUFDLEtBQUFELElBQUFDLEtBQUFELEdBQUEsSUFBQUEsRUFBQXpHLFlBQUEwRyxHQUFBLElBQUFBLEVBQUExRyxTQUFBczVELEVBQUE3eUQsRUFBQUMsRUFBQTNGLFlBQUEsYUFBQTBGLElBQUFWLFNBQUFXLEtBQUFELEVBQUF3SCw0QkFBQSxHQUFBeEgsRUFBQXdILHdCQUFBdkgsTUEwSWlLNHlELENBQUFqeUIsRUFBQW45QixjQUFBc0MsZ0JBQUE2NkIsR0FBQSxDQUFxRSxPQUFBRixHQUFBNmIsR0FBQTNiLEtBQUFLLEVBQUFQLEVBQUFyMkIsV0FDcmQsS0FEcWR4VSxFQUFBNnFDLEVBQUF4a0MsT0FDcmRyRyxFQUFBb3JDLEdBQUEsbUJBQUFMLEtBQUFvYyxlQUFBL2IsRUFBQUwsRUFBQXFjLGFBQUFqZ0QsS0FBQTgxRCxJQUFBajlELEVBQUErcUMsRUFBQTVyQyxNQUFBMEMsVUFBQTdCLEdBQUFvckMsRUFBQUwsRUFBQW45QixlQUFBdkwsV0FBQStvQyxFQUFBLzZCLGFBQUE3TixRQUFBOGtELGVBQUF0bkQsSUFBQXNuRCxlQUFBeGMsRUFBQUMsRUFBQWo0QixZQUFBalIsT0FBQW9xQyxFQUFBOWtDLEtBQUE4MUQsSUFBQXB5QixFQUFBcjJCLE1BQUFzMkIsR0FBQUQsT0FBQSxJQUFBQSxFQUFBeGtDLElBQUE0bEMsRUFBQTlrQyxLQUFBODFELElBQUFweUIsRUFBQXhrQyxJQUFBeWtDLElBQUE5cUMsRUFBQXdHLFFBQUF5bEMsRUFBQXBCLElBQUFDLEVBQUFELElBQUFvQixJQUFBbkIsS0FBQXliLEdBQUF4YixFQUFBa0IsR0FBQWYsRUFBQXFiLEdBQUF4YixFQUFBRixHQUFBQyxHQUFBSSxJQUFBLElBQUFsckMsRUFBQXk4RCxZQUFBejhELEVBQUFxbkQsYUFBQXZjLEVBQUEzbUMsTUFBQW5FLEVBQUF1bkQsZUFBQXpjLEVBQUF4QyxRQUFBdG9DLEVBQUF3bkQsWUFBQXRjLEVBQUEvbUMsTUFBQW5FLEVBQUF5bkQsY0FBQXZjLEVBQUE1QyxXQUFBOEMsSUFBQTh4QixlQUFBQyxTQUFBcnlCLEVBQUEzbUMsS0FBQTJtQyxFQUFBeEMsUUFBQXRvQyxFQUFBbzlELGtCQUNBbnhCLEVBQUFwQixHQUFBN3FDLEVBQUFxOUQsU0FBQWp5QixHQUFBcHJDLEVBQUF3RyxPQUFBMGtDLEVBQUEvbUMsS0FBQSttQyxFQUFBNUMsVUFBQThDLEVBQUFreUIsT0FBQXB5QixFQUFBL21DLEtBQUErbUMsRUFBQTVDLFFBQUF0b0MsRUFBQXE5RCxTQUFBanlCLE9BQTRGQSxFQUFBLEdBQUssSUFBQXByQyxFQUFBK3FDLEVBQVEvcUMsSUFBQXlFLFlBQWUsSUFBQXpFLEVBQUEwRCxVQUFBMG5DLEVBQUFwb0MsS0FBQSxDQUF5QjJ6RCxRQUFBMzJELEVBQUFpMkIsS0FBQWoyQixFQUFBbTNCLFdBQUE3bUIsSUFBQXRRLEVBQUFrM0IsWUFBcUYsSUFBdkMsbUJBQUE2VCxFQUFBbjFCLE9BQUFtMUIsRUFBQW4xQixRQUF1Q20xQixFQUFBLEVBQVFBLEVBQUFLLEVBQUF2cEMsT0FBV2twQyxLQUFBL3FDLEVBQUFvckMsRUFBQUwsSUFBQTRyQixRQUFBeC9CLFdBQUFuM0IsRUFBQWkyQixLQUFBajJCLEVBQUEyMkQsUUFBQXovQixVQUFBbDNCLEVBQUFzUSxJQUFxRyxJQUFwQ204QyxHQUFBLEtBQVE1RyxLQUFBMkcsR0FBUUEsR0FBQSxLQUFRcmlELEVBQUErNkIsUUFBQTk2QixFQUFZd2pDLEdBQUFwdkMsRUFBUSxPQUFBb3ZDLElBQVMsQ0FBRXB2QyxHQUFBLEVBQUt1c0MsT0FBQSxFQUFTLElBQUksSUFBQUssRUFBQTdzQyxFQUFRLE9BQUFxdkMsSUFBUyxDQUFFLElBQUEydkIsRUFBQTN2QixHQUFBdVMsVUFBbUIsTUFBQW9kLEVBQUEsQ0FBVSxJQUFBQyxFQUFBNXZCLEdBQUFtUyxVQUEyQixPQUFKOVQsRUFBQWIsR0FBSnByQyxFQUFBNHRDLElBQVEzOEIsS0FBYyw2QkFDNWQsV0FBQXdzRCxFQUFBejlELEVBQUE2eUMsVUFBMEIsS0FBQTd5QyxFQUFBbWdELFVBQUEsVUFBQXFkLEVBQUFDLEVBQUF0Six3QkFBcUQsQ0FBSyxJQUFBdUosRUFBQTE5RCxFQUFBd3VELGNBQUF4dUQsRUFBQTZELEtBQUEyNUQsRUFBQTNPLGNBQUF0aEIsR0FBQXZ0QyxFQUFBNkQsS0FBQTI1RCxFQUFBM08sZUFBMEU0TyxFQUFBekgsbUJBQUEwSCxFQUFBRixFQUFBN08sY0FBQThPLEVBQUFWLHFDQUFrRixJQUFBWSxFQUFBMzlELEVBQUE0dUQsWUFBcUIsT0FBQStPLEdBQUFuTSxHQUFBeHhELEVBQUEyOUQsRUFBQUYsR0FBeUIsTUFBTSxXQUFBRyxFQUFBNTlELEVBQUE0dUQsWUFBNEIsVUFBQWdQLEVBQUEsQ0FBcUIsR0FBUC95QixFQUFBLEtBQU8sT0FBQTdxQyxFQUFBc2dELE1BQUEsT0FBQXRnRCxFQUFBc2dELE1BQUFydkMsS0FBc0MsT0FBQTQ1QixFQUFBN3FDLEVBQUFzZ0QsTUFBQXpOLFVBQTJCLE1BQU0sT0FBQWhJLEVBQUE3cUMsRUFBQXNnRCxNQUFBek4sVUFBMkIyZSxHQUFBeHhELEVBQUE0OUQsRUFBQS95QixHQUFhLE1BQU0sV0FBQWd6QixFQUFBNzlELEVBQUE2eUMsVUFBMEIsT0FBQTJxQixHQUNwZSxFQURvZXg5RCxFQUFBbWdELFdBQ3BldU0sR0FBQTFzRCxFQUFBNkQsS0FBQTdELEVBQUE2dUQsZ0JBQUFnUCxFQUFBam9ELFFBQTBDLE1BQU0sT0FBYSxPQUFhLFFBQWMsUUFBYyxjQUFjLFFBQUF4VyxFQUFBLFFBQWtCLE9BQUFtK0QsRUFBQSxDQUFXLElBQUFPLEVBQUFsd0IsR0FBQWIsSUFBYSxVQUFBK3dCLEVBQUEsQ0FBYyxJQUFBQyxFQUFBbndCLEdBQUFpRixVQUFtQixPQUFBakYsR0FBQTM4QixLQUFjLFdBQUErc0QsRUFBQUQsRUFBaUIsTUFBTSxRQUFBQyxFQUFBRCxFQUFjLG1CQUFBRCxJQUFBRSxHQUFBRixFQUFBNTRCLFFBQUE4NEIsR0FBNkNwd0IsTUFBQW9oQixZQUFnQixNQUFBME4sR0FBVWwrRCxHQUFBLEVBQUF1c0MsRUFBQTJ4QixFQUFVbCtELElBQUEsT0FBQW92QyxJQUFBeHVDLEVBQUEsT0FBQXE0RCxHQUFBN3BCLEdBQUE3QyxHQUFBLE9BQUE2QyxXQUFBb2hCLGFBQWlFbUssR0FBQUcsSUFBQSxFQUFTLG1CQUFBbEwsT0FBQWhrRCxFQUFBeW9DLFdBQXdDMHFCLEVBQUFuekQsRUFBQThrRCxlQUF3RCxLQUFaOWtELEdBQXhCQSxJQUFBNmtELHFCQUF3QnNPLEVBQUFuekQsRUFBQW16RCxLQUFZMUUsR0FDN2UsTUFBTTF1RCxFQUFBK2tELGVBQUE5a0QsRUFBbUJELEVBQUFpd0QsYUFBQSxLQUFvQixTQUFBMUIsR0FBQXZ1RCxHQUFlLE9BQUEyd0QsSUFBQTE3RCxFQUFBLE9BQTBCMDdELEdBQUE1TCxlQUFBLEVBQW9CNkwsU0FBQSxFQUFBQyxHQUFBN3dELEdBQWlCLFNBQUE4ekQsR0FBQTl6RCxFQUFBQyxHQUFpQixJQUFBN0wsRUFBQWd5QyxHQUFRQSxJQUFBLEVBQUssSUFBSSxPQUFBcG1DLEVBQUFDLEdBQVksU0FBUW1tQyxHQUFBaHlDLElBQUE4dkMsSUFBQTR0QixHQUFBLGdCQUE2QixTQUFBaUMsR0FBQS96RCxFQUFBQyxHQUFpQixHQUFBbW1DLEtBQUEwcUIsR0FBQSxDQUFXQSxJQUFBLEVBQU0sSUFBSSxPQUFBOXdELEVBQUFDLEdBQVksUUFBUTZ3RCxJQUFBLEdBQU8sT0FBQTl3RCxFQUFBQyxHQUFZLFNBQUErekQsR0FBQWgwRCxFQUFBQyxFQUFBN0wsR0FBbUIsR0FBQSs3RCxHQUFBLE9BQUFud0QsRUFBQUMsRUFBQTdMLEdBQW9CZ3lDLElBQUFsQyxJQUFBLElBQUFrc0IsS0FBQTBCLEdBQUExQixJQUFBLEdBQUFBLEdBQUEsR0FBK0IsSUFBQS83RCxFQUFBODdELEdBQUFsdEQsRUFBQW1qQyxHQUFhQSxHQUFBK3BCLElBQUEsRUFBUSxJQUFJLE9BQUFud0QsRUFBQUMsRUFBQTdMLEdBQWMsUUFBUSs3RCxHQUFBOTdELEdBQUEreEMsR0FBQW5qQyxJQUFBaWhDLElBQUE0dEIsR0FBQSxnQkFDaFosU0FBQW1DLEdBQUFqMEQsRUFBQUMsRUFBQTdMLEVBQUFDLEVBQUE0TyxHQUF1QixJQUFBbytCLEVBQUFwaEMsRUFBQTg2QixRQUFnQi82QixFQUFBLEdBQUE1TCxFQUFBLENBQWdDNkwsRUFBQSxDQUFHLElBQUE4MUMsR0FBM0IzaEQsSUFBQTAwRCxzQkFBMkIsSUFBQTEwRCxFQUFBMFMsS0FBQTdSLEVBQUEsT0FBcUMsSUFBQWtzQyxFQUFBL3NDLEVBQVEsR0FBRyxPQUFBK3NDLEVBQUFyNkIsS0FBYyxPQUFBcTZCLElBQUF1SCxVQUFBL3RDLFFBQTZCLE1BQUFzRixFQUFRLFVBQUEwaUMsR0FBQXhCLEVBQUF6bkMsTUFBQSxDQUFxQnluQyxJQUFBdUgsVUFBQXFiLDBDQUF3RCxNQUFBOWpELEdBQVNraEMsSUFBQWlJLGFBQVcsT0FBQWpJLEdBQWdCbHNDLEVBQUEsT0FBU2tzQyxPQUFBLEVBQVMsT0FBQS9zQyxFQUFBMFMsSUFBQSxDQUFjLElBQUFzNkIsRUFBQWh0QyxFQUFBc0YsS0FBYSxHQUFBaXBDLEdBQUF2QixHQUFBLENBQVNodEMsRUFBQXd2RCxHQUFBeHZELEVBQUFndEMsRUFBQUQsR0FBWSxNQUFBbmhDLEdBQVM1TCxFQUFBK3NDLE9BQUkvc0MsRUFBQTh1RCxHQUN4VixPQURrVyxPQUFBampELEVBQUF0RixRQUFBc0YsRUFBQXRGLFFBQUF2RyxFQUFBNkwsRUFBQWdzRCxlQUFBNzNELEVBQWdENkwsRUFBQWdELEdBQUlBLEVBQUE0akQsR0FBQXh5RCxJQUFReXlELFFBQUEsQ0FBVzBGLFFBQUF4c0QsR0FBK0IsUUFBcEJDLE9BQUEsSUFBQUEsRUFBQSxLQUFBQSxLQUFvQmdELEVBQUF2SCxTQUFBdUUsR0FDN2RncEQsS0FBS2pDLEdBQUEzbEIsRUFBQXArQixHQUFRaW1ELEdBQUE3bkIsRUFBQWh0QyxHQUFRQSxFQUFTLFNBQUE2L0QsR0FBQWwwRCxFQUFBQyxFQUFBN0wsRUFBQUMsR0FBcUIsSUFBQTRPLEVBQUFoRCxFQUFBODZCLFFBQWlDLE9BQUFrNUIsR0FBQWowRCxFQUFBQyxFQUFBN0wsRUFBVjZPLEVBQUErbEQsR0FBdkJELEtBQXVCOWxELEdBQVU1TyxHQUFxQixTQUFBOC9ELEdBQUFuMEQsR0FBMkIsS0FBWkEsSUFBQSs2QixTQUFZb2IsTUFBQSxZQUF3QixPQUFBbjJDLEVBQUFtMkMsTUFBQXJ2QyxLQUFvQixPQUFnQyxlQUFBOUcsRUFBQW0yQyxNQUFBek4sV0FFaE4sU0FBQTByQixHQUFBcDBELEdBQWUsSUFBQUMsRUFBQSw4QkFBQThvRCxLQUFBLFlBQXFEOW9ELEdBQUE4dUQsS0FBQTl1RCxFQUFBOHVELEdBQUEsR0FBZ0J6MkQsS0FBQTg1RCxnQkFBQXJELEdBQUE5dUQsRUFBMEIzSCxLQUFBKzdELE1BQUFyMEQsRUFBYTFILEtBQUFnOEQsV0FBQWg4RCxLQUFBaThELE1BQUEsS0FBZ0NqOEQsS0FBQWs4RCxhQUFBbDhELEtBQUFtOEQsY0FBQSxFQUF1Q244RCxLQUFBbzhELFVBQUEsS0FBb0JwOEQsS0FBQSs1RCxRQUFBLEVBR3ZDLFNBQUFzQyxLQUFjcjhELEtBQUFnOEQsV0FBQSxLQUFxQmg4RCxLQUFBczhELFlBQUEsRUFBbUJ0OEQsS0FBQXU4RCxVQUFBdjhELEtBQUF1OEQsVUFBQXQvRCxLQUFBK0MsTUFFck8sU0FBQXc4RCxHQUFBOTBELEVBQUFDLEVBQUE3TCxHQUEwQzRMLEVBQUEsQ0FBRys2QixRQUExQjk2QixFQUFBOGlDLEdBQUEsWUFBQTlpQyxFQUFBLEtBQTBCdTdDLGNBQUF4N0MsRUFBQXVsRCxnQkFBQSxLQUFBd0ssVUFBQSxLQUFBckssb0JBQUEsRUFBQUMsa0JBQUEsRUFBQUksc0JBQUEsRUFBQUMsb0JBQUEsRUFBQUYsaUJBQUEsRUFBQUwsVUFBQSxFQUFBbUssNEJBQUEsRUFBQUssYUFBQSxLQUFBd0IsZUFBQSxFQUFBOTJELFFBQUEsS0FBQXN4RCxlQUFBLEtBQUFRLFFBQUFyNEQsRUFBQTh4RCwyQkFBQSxFQUFBbkIsZUFBQSxFQUFBb04sV0FBQSxLQUFBUCxrQkFBQSxNQUF1WHQ1RCxLQUFBeThELGNBQUE5MEQsRUFBQXlvQyxVQUFBMW9DLEVBRXJLLFNBQUFnMUQsR0FBQWgxRCxHQUFlLFNBQUFBLEdBQUEsSUFBQUEsRUFBQXpHLFVBQUEsSUFBQXlHLEVBQUF6RyxVQUFBLEtBQUF5RyxFQUFBekcsV0FBQSxJQUFBeUcsRUFBQXpHLFVBQUEsaUNBQUF5RyxFQUFBNkksWUFFOVEsU0FBQW9zRCxHQUFBajFELEVBQUFDLEVBQUE3TCxFQUFBQyxFQUFBNE8sR0FBdUIreEQsR0FBQTVnRSxJQUFBYSxFQUFBLE9BQXNCLElBQUFvc0MsRUFBQWp0QyxFQUFBeTVELG9CQUE0QixHQUFBeHNCLEVBQUEsQ0FBTSxzQkFBQXArQixFQUFBLENBQTBCLElBQUFrK0IsRUFBQWwrQixFQUFRQSxFQUFBLFdBQWEsSUFBQWpELEVBQUFtMEQsR0FBQTl5QixFQUFBMHpCLGVBQTBCNXpCLEVBQUFqdEMsS0FBQThMLElBQVcsTUFBQUEsRUFBQXFoQyxFQUFBNnpCLGtDQUFBbDFELEVBQUFDLEVBQUFnRCxHQUFBbytCLEVBQUE0RCxPQUFBaGxDLEVBQUFnRCxPQUFpRSxDQUFxQyxHQUFoQ28rQixFQUFBanRDLEVBQUF5NUQsb0JBRHpPLFNBQUE3dEQsRUFBQUMsR0FBd0ksR0FBdkhBLFlBQUFELEVBQUEsSUFBQUEsRUFBQXpHLFNBQUF5RyxFQUFBK0YsZ0JBQUEvRixFQUFBNEksV0FBQSxXQUFBM0ksRUFBQTFHLFdBQUEwRyxFQUFBazFELGFBQUEscUJBQXVIbDFELEVBQUEsUUFBQTdMLEVBQWdCQSxFQUFBNEwsRUFBQXdLLFdBQWN4SyxFQUFBekYsWUFBQW5HLEdBQWtCLFdBQUEwZ0UsR0FBQTkwRCxHQUFBLEVBQUFDLEdBQ2lEbTFELENBQUFoaEUsRUFBQUMsR0FBZ0MsbUJBQUE0TyxFQUFBLENBQTBCLElBQUFtK0IsRUFBQW4rQixFQUFRQSxFQUFBLFdBQWEsSUFBQWpELEVBQUFtMEQsR0FBQTl5QixFQUFBMHpCLGVBQTBCM3pCLEVBQUFsdEMsS0FBQThMLElBQVcrekQsR0FBQSxXQUFjLE1BQUEvekQsRUFBQXFoQyxFQUFBNnpCLGtDQUFBbDFELEVBQUFDLEVBQUFnRCxHQUFBbytCLEVBQUE0RCxPQUFBaGxDLEVBQUFnRCxLQUFtRSxPQUFBa3hELEdBQUE5eUIsRUFBQTB6QixlQUM5YSxTQUFBTSxHQUFBcjFELEVBQUFDLEdBQWlCLElBQUE3TCxFQUFBLEVBQUFxRCxVQUFBQyxhQUFBLElBQUFELFVBQUEsR0FBQUEsVUFBQSxRQUF3RixPQUF0QnU5RCxHQUFBLzBELElBQUFoTCxFQUFBLE9BWitKLFNBQUErSyxFQUFBQyxFQUFBN0wsR0FBbUIsSUFBQUMsRUFBQSxFQUFBb0QsVUFBQUMsYUFBQSxJQUFBRCxVQUFBLEdBQUFBLFVBQUEsUUFBa0UsT0FBT3dyQyxTQUFBMk0sR0FBQXQ2QyxJQUFBLE1BQUFqQixFQUFBLFFBQUFBLEVBQUE4YyxTQUFBblIsRUFBQXc3QyxjQUFBdjdDLEVBQUE2OUIsZUFBQTFwQyxHQVlyT2toRSxDQUFBdDFELEVBQUFDLEVBQUEsS0FBQTdMLEdBWHpHZzVDLEdBQUEsU0FBQXB0QyxFQUFBQyxFQUFBN0wsR0FBbUIsT0FBQTZMLEdBQVUsWUFBOEIsR0FBOUJ3eUMsR0FBQXp5QyxFQUFBNUwsR0FBcUI2TCxFQUFBN0wsRUFBQUUsS0FBUyxVQUFBRixFQUFBc0YsTUFBQSxNQUFBdUcsRUFBQSxDQUE4QixJQUFBN0wsRUFBQTRMLEVBQVE1TCxFQUFBa0csWUFBYWxHLElBQUFrRyxXQUEyRixJQUEzRWxHLElBQUFrUSxpQkFBQSxjQUFBd1UsS0FBQXk4QyxVQUFBLEdBQUF0MUQsR0FBQSxtQkFBMkVBLEVBQUEsRUFBUUEsRUFBQTdMLEVBQUFzRCxPQUFXdUksSUFBQSxDQUFLLElBQUE1TCxFQUFBRCxFQUFBNkwsR0FBVyxHQUFBNUwsSUFBQTJMLEdBQUEzTCxFQUFBbWhFLE9BQUF4MUQsRUFBQXcxRCxLQUFBLENBQTJCLElBQUF2eUQsRUFBQWltQyxFQUFBNzBDLEdBQVk0TyxHQUFBaE8sRUFBQSxNQUFpQnU2QyxHQUFBbjdDLEdBQU1vK0MsR0FBQXArQyxFQUFBNE8sS0FBVSxNQUFNLGVBQUErNkMsR0FBQWgrQyxFQUFBNUwsR0FBd0IsTUFBTSxvQkFBQTZMLEVBQUE3TCxFQUFBWSxRQUFBMm9ELEdBQUEzOUMsSUFBQTVMLEVBQUE0NUQsU0FBQS90RCxHQUFBLEtBQ25IbTBELEdBQUF6K0QsVUFBQXN2QyxPQUFBLFNBQUFqbEMsR0FBZ0MxSCxLQUFBKzVELFFBQUFwOUQsRUFBQSxPQUE0QnFELEtBQUFrOEQsY0FBQSxFQUFxQmw4RCxLQUFBbzhELFVBQUExMEQsRUFBaUIsSUFBQUMsRUFBQTNILEtBQUErN0QsTUFBQVUsY0FBQTNnRSxFQUFBa0UsS0FBQTg1RCxnQkFBQS85RCxFQUFBLElBQUFzZ0UsR0FBMEYsT0FBM0JWLEdBQUFqMEQsRUFBQUMsRUFBQSxLQUFBN0wsRUFBQUMsRUFBQXdnRSxXQUEyQnhnRSxHQUNqYSsvRCxHQUFBeitELFVBQUFzZCxLQUFBLFNBQUFqVCxHQUE4QixHQUFBMUgsS0FBQW04RCxhQUFBejBELFFBQXlCLENBQUssSUFBQUMsRUFBQTNILEtBQUFnOEQsV0FBc0IsT0FBQXIwRCxNQUFBM0gsS0FBQWc4RCxXQUFBLElBQWlDcjBELEVBQUFwSCxLQUFBbUgsS0FDbkhvMEQsR0FBQXorRCxVQUFBOC9ELE9BQUEsV0FBK0IsSUFBQXoxRCxFQUFBMUgsS0FBQSs3RCxNQUFBVSxjQUFBOTBELEVBQUFELEVBQUFteUQsV0FBb0YsR0FBdEM3NUQsS0FBQSs1RCxRQUFBLE9BQUFweUQsR0FBQWhMLEVBQUEsT0FBc0NxRCxLQUFBazhELGFBQUEsQ0FBc0IsSUFBQXBnRSxFQUFBa0UsS0FBQTg1RCxnQkFBMkIsR0FBQW55RCxJQUFBM0gsS0FBQSxDQUFhQSxLQUFBazhELGVBQUFwZ0UsRUFBQWtFLEtBQUE4NUQsZ0JBQUFueUQsRUFBQW15RCxnQkFBQTk1RCxLQUFBMnNDLE9BQUEzc0MsS0FBQW84RCxZQUEwRixRQUFBcmdFLEVBQUEsS0FBQTRPLEVBQUFoRCxFQUFtQmdELElBQUEzSyxNQUFTakUsRUFBQTRPLE1BQUFzeEQsTUFBZSxPQUFBbGdFLEdBQUFZLEVBQUEsT0FBeUJaLEVBQUFrZ0UsTUFBQXR4RCxFQUFBc3hELE1BQWdCajhELEtBQUFpOEQsTUFBQXQwRCxFQUFhRCxFQUFBbXlELFdBQUE3NUQsS0FBa0JBLEtBQUErNUQsUUFBQSxFQUFlWCxHQUFBMXhELEVBQUE1TCxHQUFRNkwsRUFBQTNILEtBQUFpOEQsTUFBYWo4RCxLQUFBaThELE1BQUEsS0FBaUMsUUFBakJ0MEQsRUFBQUQsRUFBQW15RCxXQUFBbHlELElBQWlCQSxFQUFBdTBELGNBQUF2MEQsRUFBQWdsQyxPQUFBaGxDLEVBQUF5MEQsZ0JBQWdEcDhELEtBQUFpOEQsTUFDbmYsS0FBQWo4RCxLQUFBKzVELFFBQUEsR0FBcUIrQixHQUFBeitELFVBQUFzOEQsWUFBQSxXQUFvQyxJQUFBMzVELEtBQUFtOEQsYUFBQSxDQUF1Qm44RCxLQUFBbThELGNBQUEsRUFBcUIsSUFBQXowRCxFQUFBMUgsS0FBQWc4RCxXQUFzQixVQUFBdDBELEVBQUEsUUFBQUMsRUFBQSxFQUF3QkEsRUFBQUQsRUFBQXRJLE9BQVd1SSxLQUFBLEVBQUFELEVBQUFDLFFBQWdIMDBELEdBQUFoL0QsVUFBQXNkLEtBQUEsU0FBQWpULEdBQThCLEdBQUExSCxLQUFBczhELFdBQUE1MEQsUUFBdUIsQ0FBSyxJQUFBQyxFQUFBM0gsS0FBQWc4RCxXQUFzQixPQUFBcjBELE1BQUEzSCxLQUFBZzhELFdBQUEsSUFBaUNyMEQsRUFBQXBILEtBQUFtSCxLQUMvWDIwRCxHQUFBaC9ELFVBQUFrL0QsVUFBQSxXQUFrQyxJQUFBdjhELEtBQUFzOEQsV0FBQSxDQUFxQnQ4RCxLQUFBczhELFlBQUEsRUFBbUIsSUFBQTUwRCxFQUFBMUgsS0FBQWc4RCxXQUFzQixVQUFBdDBELEVBQUEsUUFBQUMsRUFBQSxFQUF3QkEsRUFBQUQsRUFBQXRJLE9BQVd1SSxJQUFBLENBQUssSUFBQTdMLEVBQUE0TCxFQUFBQyxHQUFXLG1CQUFBN0wsR0FBQWEsRUFBQSxNQUFBYixHQUF3Q0EsT0FFM0wwZ0UsR0FBQW4vRCxVQUFBc3ZDLE9BQUEsU0FBQWpsQyxFQUFBQyxHQUFrQyxJQUFBN0wsRUFBQWtFLEtBQUF5OEQsY0FBQTFnRSxFQUFBLElBQUFzZ0UsR0FBbUcsT0FBN0MsUUFBcEIxMEQsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLElBQW9CNUwsRUFBQTRlLEtBQUFoVCxHQUFvQmkwRCxHQUFBbDBELEVBQUE1TCxFQUFBLEtBQUFDLEVBQUF3Z0UsV0FBeUJ4Z0UsR0FBVXlnRSxHQUFBbi9ELFVBQUErL0QsUUFBQSxTQUFBMTFELEdBQWlDLElBQUFDLEVBQUEzSCxLQUFBeThELGNBQUEzZ0UsRUFBQSxJQUFBdWdFLEdBQXNHLE9BQWhELFFBQXBCMzBELE9BQUEsSUFBQUEsRUFBQSxLQUFBQSxJQUFvQjVMLEVBQUE2ZSxLQUFBalQsR0FBb0JrMEQsR0FBQSxLQUFBajBELEVBQUEsS0FBQTdMLEVBQUF5Z0UsV0FBNEJ6Z0UsR0FBVTBnRSxHQUFBbi9ELFVBQUF1L0Qsa0NBQUEsU0FBQWwxRCxFQUFBQyxFQUFBN0wsR0FBK0QsSUFBQUMsRUFBQWlFLEtBQUF5OEQsY0FBQTl4RCxFQUFBLElBQUEweEQsR0FBZ0csT0FBMUMsUUFBcEJ2Z0UsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLElBQW9CNk8sRUFBQWdRLEtBQUE3ZSxHQUFvQjgvRCxHQUFBajBELEVBQUE1TCxFQUFBMkwsRUFBQWlELEVBQUE0eEQsV0FBc0I1eEQsR0FDL2I2eEQsR0FBQW4vRCxVQUFBZ2dFLFlBQUEsV0FBb0MsSUFBQTMxRCxFQUFBLElBQUFvMEQsR0FBQTk3RCxNQUFBMkgsRUFBQUQsRUFBQW95RCxnQkFBQWgrRCxFQUFBa0UsS0FBQXk4RCxjQUFBMWdFLEVBQUFELEVBQUErOUQsV0FBMkUsVUFBQTk5RCxFQUFBRCxFQUFBKzlELFdBQUFueUQsSUFBQXUwRCxNQUFBLFNBQXdDLENBQUssSUFBQW5nRSxFQUFBLEtBQVcsT0FBQUMsS0FBQSs5RCxpQkFBQW55RCxHQUErQjdMLEVBQUFDLE1BQUFrZ0UsTUFBZXYwRCxFQUFBdTBELE1BQUFsZ0UsRUFBVSxPQUFBRCxNQUFBbWdFLE1BQUF2MEQsR0FBc0IsT0FBQUEsR0FBc0owdEMsR0FBQW9tQixHQUFNbm1CLEdBQUFxbUIsR0FBTXBtQixHQUFBLFdBQWMxSixJQUFBLElBQUFrc0IsS0FBQTBCLEdBQUExQixJQUFBLEdBQUFBLEdBQUEsSUFJcmEsSUFBQXdGLEdBQUEsQ0FBUUMsYUFBQVIsR0FBQVMsWUFBQSxTQUFBOTFELEdBQXdDLFNBQUFBLEVBQUEsWUFBdUIsT0FBQUEsRUFBQXpHLFNBQUEsT0FBQXlHLEVBQTJCLElBQUFDLEVBQUFELEVBQUE4b0Qsb0JBQTRJLFlBQWhILElBQUE3b0QsSUFBQSxtQkFBQUQsRUFBQWlsQyxPQUFBaHdDLEVBQUEsT0FBQUEsRUFBQSxNQUFBUixPQUFBcUMsS0FBQWtKLEtBQW9GQSxFQUFBLFFBQVJBLEVBQUFrMkMsR0FBQWoyQyxJQUFRLEtBQUFELEVBQUEwb0MsV0FBcUMrakIsUUFBQSxTQUFBenNELEVBQUFDLEVBQUE3TCxHQUF5QixPQUFBNmdFLEdBQUEsS0FBQWoxRCxFQUFBQyxHQUFBLEVBQUE3TCxJQUF5QjZ3QyxPQUFBLFNBQUFqbEMsRUFBQUMsRUFBQTdMLEdBQXdCLE9BQUE2Z0UsR0FBQSxLQUFBajFELEVBQUFDLEdBQUEsRUFBQTdMLElBQXlCMmhFLG9DQUFBLFNBQUEvMUQsRUFBQUMsRUFBQTdMLEVBQUFDLEdBQThHLE9BQXZELE1BQUEyTCxRQUFBLElBQUFBLEVBQUE4b0Qsc0JBQUE3ekQsRUFBQSxNQUF1RGdnRSxHQUFBajFELEVBQUFDLEVBQUE3TCxHQUFBLEVBQUFDLElBQXNCMmhFLHVCQUFBLFNBQUFoMkQsR0FDL2MsT0FEbWZnMUQsR0FBQWgxRCxJQUNsZ0IvSyxFQUFBLFFBQWUrSyxFQUFBNnRELHNCQUFBa0csR0FBQSxXQUE0Q2tCLEdBQUEsVUFBQWoxRCxHQUFBLGFBQTZCQSxFQUFBNnRELG9CQUFBLFVBQTZCLElBQVNvSSxzQkFBQSxXQUFrQyxPQUFBWixHQUFBejVELFdBQUEsRUFBQW5FLFlBQWtDeStELHdCQUFBcEMsR0FBQXFDLDRCQUFBbkMsR0FBQW9DLFVBQUEsU0FBQXAyRCxFQUFBQyxHQUFtRmlrQyxJQUFBanZDLEVBQUEsT0FBa0IsSUFBQWIsRUFBQWd5QyxHQUFRQSxJQUFBLEVBQUssSUFBSSxPQUFBbXFCLEdBQUF2d0QsRUFBQUMsR0FBZSxRQUFRbW1DLEdBQUFoeUMsRUFBQTA5RCxHQUFBLGlCQUF1QnVFLG9CQUN6UixTQUFBcjJELEVBQUFDLEdBQTZELE9BQTVDKzBELEdBQUFoMUQsSUFBQS9LLEVBQUEsNkJBQTRDLElBQUE2L0QsR0FBQTkwRCxHQUFBLFFBQUFDLElBQUEsSUFBQUEsRUFBQXdzRCxVQUQ0TjZKLHlCQUFBLFNBQUF0MkQsR0FBNkQsSUFBQUMsRUFBQW1tQyxHQUFRQSxJQUFBLEVBQUssSUFBSW1xQixHQUFBdndELEdBQU0sU0FBUW9tQyxHQUFBbm1DLElBQUFpa0MsSUFBQTR0QixHQUFBLGlCQUE2QjlyQixtREFBQSxDQUFxRHV3QixPQUFBLENBQUF2dEIsRUFDcGhCQyxFQUFBQyxFQUFBWixFQUFBRSx5QkFBQXRCLEVBQUF5QyxFQUFBLFNBQUEzcEMsR0FBb0QrbkMsRUFBQS9uQyxFQUFBMHBDLElBQVM4RCxHQUFBQyxHQUFBbU8sR0FBQWpULE1BQXlILFNBQUEzb0MsR0FBYSxJQUFBQyxFQUFBRCxFQUFBdzJELHlCQXhJbk0sU0FBQXgyRCxHQUFlLHVCQUFBcEksK0JBQUEsU0FBZ0UsSUFBQXFJLEVBQUFySSwrQkFBcUMsR0FBQXFJLEVBQUEwRixhQUFBMUYsRUFBQXcyRCxjQUFBLFNBQTJDLElBQUksSUFBQXJpRSxFQUFBNkwsRUFBQXkyRCxPQUFBMTJELEdBQWtCaWtELEdBQUFFLEdBQUEsU0FBQW5rRCxHQUFrQixPQUFBQyxFQUFBMDJELGtCQUFBdmlFLEVBQUE0TCxLQUFrQ2trRCxHQUFBQyxHQUFBLFNBQUFua0QsR0FBa0IsT0FBQUMsRUFBQTIyRCxxQkFBQXhpRSxFQUFBNEwsS0FBcUMsTUFBQTNMLE1Bd0k3RHdpRSxDQUFBcmhFLEVBQUEsR0FBY3dLLEVBQUEsQ0FBSTgyRCxjQUFBLEtBQUFDLHdCQUFBLFNBQUEvMkQsR0FBK0QsZUFBUkEsRUFBQWsyQyxHQUFBbDJDLElBQVEsS0FBQUEsRUFBQTBvQyxXQUFpQzh0Qix3QkFBQSxTQUFBeDJELEdBQXFDLE9BQUFDLElBQUFELEdBQUEsU0FBcE0sQ0FBMk4sQ0FBR3cyRCx3QkFBQXp0QixFQUFBaXVCLFdBQUEsRUFBQW54QixRQUFBLFNBQUFveEIsb0JBQUEsY0FDcFosSUFBQUMsR0FBQSxDQUFRL3dCLFFBQUF5dkIsSUFBV3VCLEdBQUFELElBQUF0QixJQUFBc0IsR0FBZXBqRSxFQUFBRCxRQUFBc2pFLEdBQUFoeEIsU0FBQWd4QixpQ0NyUGxDcmpFLEVBQUFELFFBQW1CRixFQUFRLGtDQ0gzQixTQUFBcUU7Ozs7Ozs7OztBQVNhdkQsT0FBQUMsZUFBQWIsRUFBQSxjQUE0Q21CLE9BQUEsSUFBVyxJQUFBWixFQUFBLEtBQUFpdEMsR0FBQSxFQUFBRCxFQUFBLEVBQUFYLEdBQUEsRUFBQXpzQyxHQUFBLEVBQUFHLEdBQUEsRUFBQXFCLEdBQUEsRUFBd0MsU0FBQUssSUFBYSxJQUFBMUIsRUFBQSxDQUFPLElBQUE2TCxFQUFBNUwsRUFBQTJ3RCxlQUF1QnZ2RCxFQUFBa3JDLElBQUFsckMsR0FBQSxFQUFXWCxFQUFBSSxFQUFBK0ssSUFDbEssU0FBQTJnQyxJQUFhLElBQUEzZ0MsRUFBQTVMLEVBQUE2TCxFQUFBN0wsRUFBQTJPLEtBQWlCLEdBQUEzTyxJQUFBNkwsRUFBQTdMLEVBQUEsU0FBZ0IsQ0FBSyxJQUFBQyxFQUFBRCxFQUFBZ2pFLFNBQWlCaGpFLEVBQUFDLEVBQUEwTyxLQUFBOUMsRUFBV0EsRUFBQW0zRCxTQUFBL2lFLEVBQWEyTCxFQUFBK0MsS0FBQS9DLEVBQUFvM0QsU0FBQSxLQUF1Qi9pRSxFQUFBMkwsRUFBQXRFLFNBQWF1RSxFQUFBRCxFQUFBK2tELGVBQW1CL2tELElBQUFxM0QsY0FBa0IsSUFBQXAwRCxFQUFBbStCLEVBQUFpQyxFQUFBcnZDLEVBQVlvdEMsRUFBQXBoQyxFQUFJaE0sRUFBQWlNLEVBQUksSUFBSSxJQUFBa2hDLEVBQUE5c0MsSUFBVSxRQUFRK3NDLEVBQUFuK0IsRUFBQWpQLEVBQUFxdkMsRUFBUSxzQkFBQWxDLEVBQUEsR0FBQUEsRUFBQSxDQUErQnpsQyxTQUFBeWxDLEVBQUFrMkIsY0FBQXIzRCxFQUFBK2tELGVBQUE5a0QsRUFBQThDLEtBQUEsS0FBQXEwRCxTQUFBLE1BQW9FLE9BQUFoakUsSUFBQStzQyxFQUFBcCtCLEtBQUFvK0IsRUFBQWkyQixTQUFBajJCLE1BQWdDLENBQUs5c0MsRUFBQSxLQUFPMkwsRUFBQTVMLEVBQUksR0FBRyxHQUFBNEwsRUFBQStrRCxnQkFBQTlrRCxFQUFBLENBQXdCNUwsRUFBQTJMLEVBQUksTUFBTUEsSUFBQStDLFdBQVMvQyxJQUFBNUwsR0FBYSxPQUFBQyxJQUFBRCxFQUFBQyxJQUFBRCxNQUFBK3NDLEVBQUF0ckMsTUFBOEJvSyxFQUFBNUwsRUFBQStpRSxVQUFhcjBELEtBQUExTyxFQUFBK2lFLFNBQUFqMkIsRUFBb0JBLEVBQUFwK0IsS0FBQTFPLEVBQVM4c0MsRUFBQWkyQixTQUM3ZW4zRCxHQUFHLFNBQUFzUyxJQUFhLFFBQUFrdUIsR0FBQSxPQUFBcnNDLEdBQUEsSUFBQUEsRUFBQWlqRSxjQUFBLENBQTBDbGpFLEdBQUEsRUFBSyxJQUFJLEdBQUF3c0MsVUFBTyxPQUFBdnNDLEdBQUEsSUFBQUEsRUFBQWlqRSxlQUFxQyxRQUFRbGpFLEdBQUEsU0FBQUMsRUFBQXlCLElBQUFMLEdBQUEsSUFBeUIsU0FBQVAsRUFBQStLLEdBQWM3TCxHQUFBLEVBQUssSUFBQThMLEVBQUFvaEMsRUFBUUEsRUFBQXJoQyxFQUFJLElBQUksR0FBQUEsRUFBQSxLQUFVLE9BQUE1TCxHQUFTLENBQUUsSUFBQUMsRUFBQVIsRUFBQW85RCxlQUE2QixLQUFBNzhELEVBQUEyd0QsZ0JBQUExd0QsR0FBb0UsTUFBNUMsR0FBQXNzQyxVQUFPLE9BQUF2c0MsS0FBQTJ3RCxnQkFBQTF3RCxRQUFnRCxVQUFBRCxFQUFrQixHQUFBdXNDLFVBQU8sT0FBQXZzQyxJQUFBK0QsS0FBdUIsUUFBUWhFLEdBQUEsRUFBQWt0QyxFQUFBcGhDLEVBQUEsT0FBQTdMLEVBQUF5QixJQUFBTCxHQUFBLEVBQUErYyxLQUM1VyxJQUFBMHVCLEVBQUFDLEVBQUFOLEVBQUFyaEMsS0FBQXNoQyxFQUFBLG1CQUFBOXFCLDJCQUFBLEVBQUErcUIsRUFBQSxtQkFBQXZQLCtCQUFBLEVBQUF3UCxFQUFBLG1CQUFBcFQsaURBQUEsRUFBQXFULEVBQUEsbUJBQUFzMkIsK0NBQUEsRUFBeVEsU0FBQTkxQixFQUFBeGhDLEdBQWNpaEMsRUFBQUYsRUFBQSxTQUFBOWdDLEdBQWdCNmdDLEVBQUFJLEdBQUtsaEMsRUFBQUMsS0FBT2loQyxFQUFBTCxFQUFBLFdBQWVHLEVBQUFDLEdBQUtqaEMsRUFBQW5NLEVBQUFvOUQsaUJBQTBCLEtBQ2pXLG9CQUFBc0csYUFBQSxtQkFBQUEsWUFBQTcxQyxJQUFBLENBQXVFLElBQUFtZ0IsRUFBQTAxQixZQUFrQjFqRSxFQUFBbzlELGFBQUEsV0FBZ0MsT0FBQXB2QixFQUFBbmdCLFlBQWdCN3RCLEVBQUFvOUQsYUFBQSxXQUFxQyxPQUFBcndCLEVBQUFsZixPQUFnQixJQUFBN3NCLEVBQUE2ckMsRUFBQXZvQyxFQUFBMnBDLEVBQUEsS0FDOUwsR0FEK00sb0JBQUF6cEMsT0FBQXlwQyxFQUFBenBDLFlBQUEsSUFBQUwsSUFBQThwQyxFQUFBOXBDLEdBQy9NOHBDLEtBQUEwMUIsV0FBQSxDQUFvQixJQUFBdjFCLEVBQUFILEVBQUEwMUIsV0FBbUIzaUUsRUFBQW90QyxFQUFBLEdBQU92QixFQUFBdUIsRUFBQSxHQUFPOXBDLEVBQUE4cEMsRUFBQSxHQUFPcHVDLEVBQUFvOUQsYUFBQWh2QixFQUFBLFFBQTBCLHVCQUFBNXBDLFFBQUEsbUJBQUFvL0QsZUFBQSxDQUF5RSxJQUFBdjFCLEVBQUEsS0FBQUksRUFBQSxTQUFBdGlDLEdBQXlCLFVBQUFraUMsRUFBQSxJQUFnQkEsRUFBQWxpQyxHQUFLLFFBQVFraUMsRUFBQSxPQUFTcnRDLEVBQUEsU0FBQW1MLEdBQWMsT0FBQWtpQyxFQUFBbnNCLFdBQUFsaEIsRUFBQSxFQUFBbUwsSUFBQWtpQyxFQUFBbGlDLEVBQUErVixXQUFBdXNCLEVBQUEsUUFBcUQ1QixFQUFBLFdBQWF3QixFQUFBLE1BQVEvcEMsRUFBQSxXQUFhLGNBQVUsQ0FBSyxvQkFBQU4sVUFBQSxtQkFBQWtwQyxHQUFBbHBDLFFBQUFDLE1BQUEsMklBQ2xWLG1CQUFBa3BDLEdBQUFucEMsUUFBQUMsTUFBQSwySUFBZ0wsSUFBQTBxQyxFQUFBLEtBQUFFLEdBQUEsRUFBQUMsR0FBQSxFQUFBSSxHQUFBLEVBQUFJLEdBQUEsRUFBQUMsRUFBQSxFQUFBRSxFQUFBLEdBQUFFLEVBQUEsR0FBNkNyckMsRUFBQSxXQUFhLE9BQUFpckMsR0FBQXZ2QyxFQUFBbzlELGdCQUFrQyxJQUFBdnRCLEVBQUEsSUFBQSt6QixlQUFBOXpCLEVBQUFELEVBQUFnMEIsTUFBbUNoMEIsRUFBQWkwQixNQUFBQyxVQUFBLFdBQTZCbDFCLEdBQUEsRUFBSyxJQUFBMWlDLEVBQUF3aUMsRUFBQXZpQyxFQUFBMGlDLEVBQVlILEVBQUEsS0FBT0csR0FBQSxFQUFLLElBQUF0dUMsRUFBQVIsRUFBQW85RCxlQUFBaHVELEdBQUEsRUFBa0MsTUFBQW1nQyxFQUFBL3VDLEVBQUEsV0FBQTRMLE1BQUE1TCxHQUEyRCxPQUF2QjB1QyxPQUFBLEVBQUF2QixFQUFBaUMsSUFBZWpCLEVBQUF4aUMsT0FBSTJpQyxFQUFBMWlDLEdBQXZEZ0QsR0FBQSxFQUFrRSxVQUFBakQsRUFBQSxDQUFhbWpDLEdBQUEsRUFBSyxJQUFJbmpDLEVBQUFpRCxHQUFLLFFBQVFrZ0MsR0FBQSxLQUNoZixJQUFBTSxFQUFBLFNBQUF6akMsR0FBa0IsVUFBQXdpQyxFQUFBLENBQWFoQixFQUFBaUMsR0FBSyxJQUFBeGpDLEVBQUFELEVBQUFvakMsRUFBQUksRUFBWXZqQyxFQUFBdWpDLEdBQUFGLEVBQUFFLEdBQUEsRUFBQXZqQyxNQUFBLEdBQUF1akMsRUFBQXZqQyxFQUFBcWpDLElBQUFyakMsR0FBQXFqQyxFQUFBcmpDLEVBQW9DbWpDLEVBQUFwakMsRUFBQXdqQyxFQUFNZCxPQUFBLEVBQUFpQixFQUFBazBCLGlCQUFBLFNBQWdDOTBCLEdBQUEsR0FBV2x1QyxFQUFBLFNBQUFtTCxFQUFBQyxHQUFnQnVpQyxFQUFBeGlDLEVBQUkyaUMsRUFBQTFpQyxFQUFJa2pDLEdBQUEsRUFBQWxqQyxFQUFBMGpDLEVBQUFrMEIsaUJBQUEsR0FBQTkwQixPQUFBLEVBQUF2QixFQUFBaUMsS0FBNkMvQyxFQUFBLFdBQWE4QixFQUFBLEtBQU9FLEdBQUEsRUFBS0MsR0FBQSxHQUFNOXVDLEVBQUFpa0UsMkJBQUEsRUFBcUNqa0UsRUFBQWtrRSw4QkFBQSxFQUF3Q2xrRSxFQUFBbWtFLHdCQUFBLEVBQWtDbmtFLEVBQUFva0Usc0JBQUEsRUFBZ0Nwa0UsRUFBQXFrRSxxQkFBQSxFQUN4WHJrRSxFQUFBc2tFLHlCQUFBLFNBQUFuNEQsRUFBQUMsR0FBK0MsT0FBQUQsR0FBVSx5Q0FBeUMsUUFBQUEsRUFBQSxFQUFZLElBQUEzTCxFQUFBK3NDLEVBQUFuK0IsRUFBQXc5QixFQUFZVyxFQUFBcGhDLEVBQUl5Z0MsRUFBQTVzQyxFQUFBbzlELGVBQXlCLElBQUksT0FBQWh4RCxJQUFXLFFBQVFtaEMsRUFBQS9zQyxFQUFBb3NDLEVBQUF4OUIsRUFBQXNQLE1BQzlLMWUsRUFBQTA5RCwwQkFBQSxTQUFBdnhELEVBQUFDLEdBQWdELElBQUE1TCxHQUFBLElBQUFvc0MsSUFBQTVzQyxFQUFBbzlELGVBQXNDLG9CQUFBaHhELEdBQUEsT0FBQUEsR0FBQSxpQkFBQUEsRUFBQXF4QixRQUFBcnhCLEVBQUE1TCxFQUFBNEwsRUFBQXF4QixhQUE0RSxPQUFBOFAsR0FBZSxPQUFBbmhDLEVBQUE1TCxHQUFBLEVBQWMsTUFBTSxPQUFBNEwsRUFBQTVMLEVBQUEsSUFBZSxNQUFNLE9BQUE0TCxFQUFBNUwsRUFBQSxXQUFzQixNQUFNLE9BQUE0TCxFQUFBNUwsRUFBQSxJQUFlLE1BQU0sUUFBQTRMLEVBQUE1TCxFQUFBLElBQXdGLEdBQXhFMkwsRUFBQSxDQUFHdEUsU0FBQXNFLEVBQUFxM0QsY0FBQWoyQixFQUFBMmpCLGVBQUE5a0QsRUFBQThDLEtBQUEsS0FBQXEwRCxTQUFBLE1BQXFFLE9BQUFoakUsSUFBQTRMLEVBQUErQyxLQUFBL0MsRUFBQW8zRCxTQUFBcDNELEVBQUFuSyxRQUFzQyxDQUFLeEIsRUFBQSxLQUFPLElBQUE0TyxFQUFBN08sRUFBUSxHQUFHLEdBQUE2TyxFQUFBOGhELGVBQUE5a0QsRUFBQSxDQUF1QjVMLEVBQUE0TyxFQUFJLE1BQU1BLElBQUFGLFdBQVNFLElBQUE3TyxHQUFhLE9BQUFDLElBQUFELEVBQUFDLElBQUFELE1BQUE0TCxFQUFBbkssTUFDdmRvSyxFQUFBNUwsRUFBQStpRSxVQUFhcjBELEtBQUExTyxFQUFBK2lFLFNBQUFwM0QsRUFBb0JBLEVBQUErQyxLQUFBMU8sRUFBUzJMLEVBQUFvM0QsU0FBQW4zRCxFQUFhLE9BQUFELEdBQVVuTSxFQUFBMDdELHdCQUFBLFNBQUF2dkQsR0FBNEMsSUFBQUMsRUFBQUQsRUFBQStDLEtBQWEsVUFBQTlDLEVBQUEsQ0FBYSxHQUFBQSxJQUFBRCxFQUFBNUwsRUFBQSxTQUFnQixDQUFLNEwsSUFBQTVMLE1BQUE2TCxHQUFhLElBQUE1TCxFQUFBMkwsRUFBQW8zRCxTQUFpQi9pRSxFQUFBME8sS0FBQTlDLEVBQVNBLEVBQUFtM0QsU0FBQS9pRSxFQUFhMkwsRUFBQStDLEtBQUEvQyxFQUFBbzNELFNBQUEsT0FBeUJ2akUsRUFBQXVrRSxzQkFBQSxTQUFBcDRELEdBQTBDLElBQUFDLEVBQUFtaEMsRUFBUSxrQkFBa0IsSUFBQS9zQyxFQUFBK3NDLEVBQUFuK0IsRUFBQXc5QixFQUFZVyxFQUFBbmhDLEVBQUl3Z0MsRUFBQTVzQyxFQUFBbzlELGVBQXlCLElBQUksT0FBQWp4RCxFQUFBcEUsTUFBQXRELEtBQUFiLFdBQStCLFFBQVEycEMsRUFBQS9zQyxFQUFBb3NDLEVBQUF4OUIsRUFBQXNQLE9BQWUxZSxFQUFBd2tFLGlDQUFBLFdBQW9ELE9BQUFqM0IsR0FDcGN2dEMsRUFBQW0rRCxxQkFBQSxXQUF3QyxPQUFBM3dCLElBQUEsT0FBQWp0QyxLQUFBMndELGVBQUEvd0QsR0FBQW1FLE1BQStDdEUsRUFBQXlrRSwyQkFBQSxXQUE4QyxPQUFBbGtFLEdBQUF5QixLQUFlaEMsRUFBQTBrRSx3QkFBQSxhQUE2QzFrRSxFQUFBMmtFLDhCQUFBLFdBQWlELE9BQUFwa0Usb0NDcEJsUCxJQUFBK3NDLEVBR0FBLEVBQUEsV0FDQSxPQUFBN29DLEtBREEsR0FJQSxJQUVBNm9DLEtBQUEsSUFBQXMzQixTQUFBLGlCQUNDLE1BQUF4MUQsR0FFRCxpQkFBQTVLLFNBQUE4b0MsRUFBQTlvQyxRQU9BdkUsRUFBQUQsUUFBQXN0QywyRUNuQmF1M0IsRUFBcUIsMm5CQzREbkJDLGFBNUNYLFNBQUFBLEVBQVluRCxFQUFNb0QsRUFBb0JDLEVBQTZCQyxnR0FBZ0NDLENBQUF6Z0UsS0FBQXFnRSxHQUFBSyxFQUFBMWdFLEtBQUEsVUFaekYsTUFZeUYwZ0UsRUFBQTFnRSxLQUFBLHFCQVY5RSxHQVU4RTBnRSxFQUFBMWdFLEtBQUEsdUJBUjVFb2dFLEdBUTRFTSxFQUFBMWdFLEtBQUEsOEJBTnJFLEdBTXFFMGdFLEVBQUExZ0UsS0FBQSxpQ0FKbEUsR0FJa0UwZ0UsRUFBQTFnRSxLQUFBLGFBRnRGLElBR1RBLEtBQUsyZ0UsUUFBVXpELEVBQ2ZsOUQsS0FBS3NnRSxtQkFBcUJBLEVBQzFCdGdFLEtBQUt1Z0UsNEJBQThCQSxFQUNuQ3ZnRSxLQUFLd2dFLCtCQUFpQ0EsMkRBR2hDenFCLEdBQ04sSUFBTTZxQixFQUFNNWdFLEtBQUtzZ0UsbUJBQW1CdnFCLEVBQVEvMUMsS0FBSzZnRSxxQkFBcUI5cUIsRUFBUS8xQyxLQUFLdWdFLDRCQUE0QnhxQixFQUFRLzFDLEtBQUt3Z0UsK0JBQStCenFCLEVBQzNKLE9BQU8rcUIsT0FBTzd3QyxXQUFXMndDLEVBQUdHLFFBQVEsOENBR3RCaHJCLEdBQU8sSUFBQWlyQixFQUFBaGhFLEtBQ3JCLEdBQUlBLEtBQUtpaEUsV0FBV2xyQixHQUNoQixPQUFPLzFDLEtBQUtpaEUsV0FBV2xyQixHQUczQixJQUFNNnFCLEVBQUs1Z0UsS0FBS2toRSxVQUFVbnJCLEdBTExvckIsRUFNNEJuaEUsS0FBSzJnRSxRQUFRUyxhQUFhUixHQUFuRVMsRUFOYUYsRUFNYkUsS0FBTUMsRUFOT0gsRUFNUEcsd0JBQXlCQyxFQU5sQkosRUFNa0JJLE1BQ2pDQyxFQUFtQkMsRUFBSW45RCxNQUFNeXhDLEVBQVEsR0FBR3YzQyxRQUN6Q04sSUFBSSxTQUFBckMsR0FBQyxPQUFJQSxFQUFJLElBQ2I2bEUsT0FBTyxTQUFDQyxFQUFROWxFLEdBQVQsT0FBZThsRSxFQUFTWCxFQUFLWSxrQkFBa0IvbEUsR0FBR2dtRSxLQUFLLEdBQzdEQSxFQUFNakIsRUFBS1MsRUFBT0MsRUFBMEJFLEVBQzVDTSxFQUFVLENBQUVELE1BQUtOLFFBQU9GLE9BQU1DLDJCQUlwQyxPQUhBdGhFLEtBQUtpaEUsV0FBV2xyQixHQUFTK3JCLEVBRXpCdmlFLFFBQVF3aUUsSUFBUixJQUFBemhFLE9BQWdCeTFDLEVBQWhCLE1BQUF6MUMsT0FBMEJ1aEUsRUFBMUIsT0FBQXZoRSxPQUFtQ3NnRSxFQUFuQyxPQUFBdGdFLE9BQTJDK2dFLEVBQTNDLE9BQUEvZ0UsT0FBcURnaEUsRUFBckQsT0FBQWhoRSxPQUFrRmtoRSxJQUMzRU0sc0NBR0MsSUFBQUUsRUFBQWhpRSxLQUdSLE9BRkFBLEtBQUtpaEUsV0FBYSxHQUNIUSxFQUFJbjlELE1BQU0sSUFBSTlGLFFBQVFOLElBQUksU0FBQXJDLEdBQUMsT0FBSUEsRUFBSSxJQUNwQ3FDLElBQUksU0FBQTYzQyxHQUNkLElBQU0rckIsRUFBVUUsRUFBS0osa0JBQWtCN3JCLEdBQ3ZDLHlVQUFBa3NCLENBQUEsQ0FDSWxzQixTQUNHK3JCLEVBRlAsQ0FHSUQsSUFBS2YsT0FBTzd3QyxXQUFXNnhDLEVBQVFELElBQUlkLFFBQVEseUtDbkM1Q21CLEVBVFgsU0FBQUEsRUFBWVgsRUFBT0YsRUFBTUMsRUFBeUJhLGdHQUFVQyxDQUFBcGlFLEtBQUFraUUsR0FBQUcsRUFBQXJpRSxLQUFBLFFBUnBELEdBUW9EcWlFLEVBQUFyaUUsS0FBQSxPQU5yRCxHQU1xRHFpRSxFQUFBcmlFLEtBQUEsMEJBSmxDLEdBSWtDcWlFLEVBQUFyaUUsS0FBQSxXQUZqRCxrQkFBTSxJQUdiQSxLQUFLdWhFLE1BQVFBLEVBQ2J2aEUsS0FBS3FoRSxLQUFPQSxFQUNacmhFLEtBQUtzaEUsd0JBQTBCQSxFQUMvQnRoRSxLQUFLbWlFLFNBQVdBLDZLQ1hsQkcsRUFBMEIsOElDRm5CLG1LQUVMZixHQUNBdmhFLEtBQUt1aUUsT0FBT2hpRSxLQUFLZ2hFLHdDQUdSaUIsR0FDVCxJQUFNQyxFQUFZemlFLEtBQUt1aUUsT0FBT2owRCxLQUFLLFNBQUFvMEQsR0FBRyxPQUFJQSxFQUFJUCxTQUFTSyxLQUl2RCxPQUZBampFLFFBQVF3aUUsSUFBUixnQkFBQXpoRSxPQUE0Qm1pRSxFQUFVcEIsS0FBdEMsZUFBQS9nRSxPQUF3RG1pRSxFQUFVbEIsTUFBbEUsa0JBQUFqaEUsT0FBd0ZraUUsRUFBeEYsTUFFT0MsbUNBSVAsT0FBT2ppRCxLQUFLeThDLFVBQVVqOUQsS0FBS3VpRSw4Q0RYbkNELEVBQXdCanBELElBQUksSUFBSTZvRCxFQUFzQixFQUFHLElBQU0sRUFBRyxTQUFBcm1FLEdBQUMsT0FBSUEsR0FBSyxRQUM1RXltRSxFQUF3QmpwRCxJQUFJLElBQUk2b0QsRUFBc0IsRUFBRyxHQUFNLEtBQU0sU0FBQXJtRSxHQUFDLE9BQUlBLEVBQUksTUFBU0EsR0FBSyxTQUM1RnltRSxFQUF3QmpwRCxJQUFJLElBQUk2b0QsRUFBc0IsRUFBRyxHQUFNLE1BQU8sU0FBQXJtRSxHQUFDLE9BQUlBLEVBQUksT0FBVUEsR0FBSyxPQUM5RnltRSxFQUF3QmpwRCxJQUFJLElBQUk2b0QsRUFBc0IsRUFBRyxJQUFNLE1BQU8sU0FBQXJtRSxHQUFDLE9BQUlBLEVBQUksS0FBVUEsR0FBSyxRQUM5RnltRSxFQUF3QmpwRCxJQUFJLElBQUk2b0QsRUFBc0IsRUFBRyxHQUFNLE1BQU8sU0FBQXJtRSxHQUFDLE9BQUlBLEVBQUksTUFBVUEsR0FBSyxRQUM5RnltRSxFQUF3QmpwRCxJQUFJLElBQUk2b0QsRUFBc0IsRUFBRyxJQUFNLE1BQU8sU0FBQXJtRSxHQUFDLE9BQUlBLEVBQUksTUFBVUEsR0FBSyxRQUM5RnltRSxFQUF3QmpwRCxJQUFJLElBQUk2b0QsRUFBc0IsRUFBRyxJQUFNLE9BQVEsU0FBQXJtRSxHQUFDLE9BQUlBLEVBQUksUUFFakV5bUUsdTNCRXNEQUssaVZBN0RKLDhQQUZrQkMsSUFBTTUyQiw4REFLM0Joc0MsS0FBSzZpRSxRQUFVN2lFLEtBQUs2aUUsUUFBUTVsRSxLQUFLK0MsTUFDakNBLEtBQUs4aUUsYUFBZTlpRSxLQUFLOGlFLGFBQWE3bEUsS0FBSytDLHNDQUd2Q3NxQyxHQUNKdHFDLEtBQUtrOUQsS0FBTzV5Qix1Q0FHSDMvQixHQUNUQSxFQUFFbWQsaUJBRFUsSUFHSmk3QyxFQUFhL2lFLEtBQUsrb0IsTUFBbEJnNkMsU0FDRkMsRUFBYS82QixJQUFFam9DLEtBQUtrOUQsTUFDckJsZ0MsaUJBQ0Ewa0MsT0FBTyxTQUFDdUIsRUFBU0MsR0FBVix5VUFBQUMsQ0FBQSxHQUF5QkYsRUFBekJHLEVBQUEsR0FBbUNGLEVBQU1sbkUsS0FBTzhrRSxPQUFPN3dDLFdBQVdpekMsRUFBTXhtRSxVQUFXLElBUS9GLE9BTkE2QyxRQUFRd2lFLElBQVIsaUJBQUF6aEUsT0FBNkJrZ0IsS0FBS3k4QyxVQUFVK0YsS0FFcEIsbUJBQWJELEdBQ1BBLEVBQVNDLElBR04sbUNBSVAsT0FDSUssRUFBQTM3RCxFQUFBOUYsY0FBQSxRQUFNMG9DLElBQUt0cUMsS0FBSzZpRSxRQUFTRSxTQUFVL2lFLEtBQUs4aUUsY0FDcENPLEVBQUEzN0QsRUFBQTlGLGNBQUEsZ0JBQ0l5aEUsRUFBQTM3RCxFQUFBOUYsY0FBQSxzQkFFQXloRSxFQUFBMzdELEVBQUE5RixjQUFBLE9BQUtvTSxVQUFVLGNBQ1hxMUQsRUFBQTM3RCxFQUFBOUYsY0FBQSxTQUFPMGhFLFFBQVEsaUJBQWYsVUFDQUQsRUFBQTM3RCxFQUFBOUYsY0FBQSxTQUFPb00sVUFBVSxlQUFlNU0sS0FBSyxTQUFTcEYsS0FBSyxnQkFBZ0J1NEIsS0FBSyxPQUFPZ3ZDLFlBQVksU0FBUzVyRCxhQUFhLFdBR3JIMHJELEVBQUEzN0QsRUFBQTlGLGNBQUEsT0FBS29NLFVBQVUsY0FDWHExRCxFQUFBMzdELEVBQUE5RixjQUFBLFNBQU8waEUsUUFBUSxtQkFBZixVQUNBRCxFQUFBMzdELEVBQUE5RixjQUFBLFNBQU9vTSxVQUFVLGVBQWU1TSxLQUFLLFNBQVNwRixLQUFLLGtCQUFrQnU0QixLQUFLLE9BQU9ndkMsWUFBWSxTQUFTN21FLE1BQU8wakUsRUFBb0JvRCxVQUFRLEVBQUNqNUQsVUFBUSxLQUd0Sjg0RCxFQUFBMzdELEVBQUE5RixjQUFBLE9BQUtvTSxVQUFVLGNBQ1hxMUQsRUFBQTM3RCxFQUFBOUYsY0FBQSxTQUFPMGhFLFFBQVEsMEJBQWYsYUFDQUQsRUFBQTM3RCxFQUFBOUYsY0FBQSxTQUFPb00sVUFBVSxlQUFlNU0sS0FBSyxTQUFTcEYsS0FBSyx5QkFBeUJ1NEIsS0FBSyxPQUFPZ3ZDLFlBQVksWUFBWTVyRCxhQUFhLFVBR2pJMHJELEVBQUEzN0QsRUFBQTlGLGNBQUEsT0FBS29NLFVBQVUsY0FDWHExRCxFQUFBMzdELEVBQUE5RixjQUFBLFNBQU8waEUsUUFBUSw2QkFBZixZQUNBRCxFQUFBMzdELEVBQUE5RixjQUFBLFNBQU9vTSxVQUFVLGVBQWU1TSxLQUFLLFNBQVNwRixLQUFLLDRCQUE0QnU0QixLQUFLLE9BQU9ndkMsWUFBWSxXQUFXNXJELGFBQWEsVUFHbkkwckQsRUFBQTM3RCxFQUFBOUYsY0FBQSxVQUFRUixLQUFLLFNBQVNpNUIsTUFBTSxtQkFBNUIseW1DQ2dFTG9wQyxrVkFySEgsQ0FDSm55RCxPQUFRLEtBQ1JveUQsSUFBSyx1V0FKU2QsSUFBTTUyQiw4REFRcEJoc0MsS0FBSzhpRSxhQUFlOWlFLEtBQUs4aUUsYUFBYTdsRSxLQUFLK0MsTUFDM0NBLEtBQUsyakUsV0FBYTNqRSxLQUFLMmpFLFdBQVcxbUUsS0FBSytDLE1BQ3ZDQSxLQUFLNGpFLGNBQWdCNWpFLEtBQUs0akUsY0FBYzNtRSxLQUFLK0MsTUFDN0NBLEtBQUs2akUsZ0JBQWtCN2pFLEtBQUs2akUsZ0JBQWdCNW1FLEtBQUsrQywyQ0FHeENnakIsR0FBUSxJQUNUOGdELEVBQXFFOWdELEVBQXJFOGdELGNBQWVDLEVBQXNEL2dELEVBQXREK2dELHVCQUF3QkMsRUFBOEJoaEQsRUFBOUJnaEQsMEJBUXpDMXlELEVBTk8sSUFBSSt1RCxFQUNiaUMsRUFDQXdCLEVBQ0FDLEVBQ0FDLEdBRWdCQyxZQUVwQmprRSxLQUFLOHBDLFNBQVMsQ0FBRXg0Qiw4Q0FHVG95RCxHQUNQbmtFLFFBQVF3aUUsSUFBUixVQUFBemhFLE9BQXNCb2pFLElBQ3RCMWpFLEtBQUs4cEMsU0FBUyxDQUFFNDVCLGdEQUloQjFqRSxLQUFLMmpFLFdBQVcsaURBSWhCM2pFLEtBQUsyakUsV0FBVyxpREFHSixJQUNKcnlELEVBQVd0UixLQUFLK2IsTUFBaEJ6SyxPQUVSLE9BQ0ksWUFESmhSLE9BQUE0akUsRUFFTzV5RCxFQUFPcFQsSUFBSSxTQUFBaW1FLEdBQUEsSUFBR3B1QixFQUFIb3VCLEVBQUdwdUIsTUFBTzhyQixFQUFWc0MsRUFBVXRDLElBQVYsU0FBQXZoRSxPQUF1QnkxQyxFQUF2QixLQUFBejFDLE9BQWdDdWhFLEVBQWhDLG1EQUlMLElBQ0x2d0QsRUFBV3RSLEtBQUsrYixNQUFoQnpLLE9BRVIsT0FDSSt4RCxFQUFBMzdELEVBQUE5RixjQUFBLFNBQU9vTSxVQUFVLFNBQ2JxMUQsRUFBQTM3RCxFQUFBOUYsY0FBQSxTQUFPb00sVUFBVSxjQUNqQnExRCxFQUFBMzdELEVBQUE5RixjQUFBLFVBQ0l5aEUsRUFBQTM3RCxFQUFBOUYsY0FBQSxNQUFJd2lFLE1BQU0sT0FBVixNQUNBZixFQUFBMzdELEVBQUE5RixjQUFBLE1BQUl3aUUsTUFBTSxPQUFWLE9BQ0FmLEVBQUEzN0QsRUFBQTlGLGNBQUEsTUFBSXdpRSxNQUFNLE9BQVYsUUFHSmYsRUFBQTM3RCxFQUFBOUYsY0FBQSxhQUVJMFAsRUFBT3BULElBQUksU0FBQW1tRSxHQUFBLElBQUd0dUIsRUFBSHN1QixFQUFHdHVCLE1BQU84ckIsRUFBVndDLEVBQVV4QyxJQUFLTixFQUFmOEMsRUFBZTlDLE1BQWYsT0FDUDhCLEVBQUEzN0QsRUFBQTlGLGNBQUEsVUFDSXloRSxFQUFBMzdELEVBQUE5RixjQUFBLE1BQUl3aUUsTUFBTSxPQUFPcnVCLEdBQ2pCc3RCLEVBQUEzN0QsRUFBQTlGLGNBQUEsVUFBS2lnRSxHQUNMd0IsRUFBQTM3RCxFQUFBOUYsY0FBQSxVQUFJeWhFLEVBQUEzN0QsRUFBQTlGLGNBQUEsV0FBTTIvRCxnREFTbkIsSUFBQStDLEVBQ2F0a0UsS0FBSytiLE1BQXJCekssRUFER2d6RCxFQUNIaHpELE9BQVFveUQsRUFETFksRUFDS1osSUFFaEIsT0FBS3AvRCxNQUFNQyxRQUFRK00sR0FPZit4RCxFQUFBMzdELEVBQUE5RixjQUFBLGdCQUNJeWhFLEVBQUEzN0QsRUFBQTlGLGNBQUEsc0JBRUF5aEUsRUFBQTM3RCxFQUFBOUYsY0FBQSxNQUFJb00sVUFBVSxnQkFDVnExRCxFQUFBMzdELEVBQUE5RixjQUFBLE1BQUlvTSxVQUFVLFlBQ1ZxMUQsRUFBQTM3RCxFQUFBOUYsY0FBQSxLQUFHb00sVUFBUyxZQUFBMU4sT0FBc0IsVUFBUm9qRSxFQUFrQixTQUFXLElBQU1wd0QsS0FBSyx5QkFBeUJvaEQsUUFBUzEwRCxLQUFLNmpFLGlCQUF6RyxPQUVKUixFQUFBMzdELEVBQUE5RixjQUFBLE1BQUlvTSxVQUFVLFlBQ1ZxMUQsRUFBQTM3RCxFQUFBOUYsY0FBQSxLQUFHb00sVUFBUyxZQUFBMU4sT0FBc0IsUUFBUm9qRSxFQUFnQixTQUFXLElBQU1wd0QsS0FBSyx5QkFBeUJvaEQsUUFBUzEwRCxLQUFLNGpFLGVBQXZHLFNBSVJQLEVBQUEzN0QsRUFBQTlGLGNBQUEsV0FFUyxRQUFSOGhFLEVBQWdCTCxFQUFBMzdELEVBQUE5RixjQUFBLFdBQU01QixLQUFLdWtFLGlCQUF5QixLQUM1QyxVQUFSYixFQUFrQjFqRSxLQUFLd2tFLGlCQUFtQixNQXBCM0NuQixFQUFBMzdELEVBQUE5RixjQUFBLG9EQTBCUixPQUNJeWhFLEVBQUEzN0QsRUFBQTlGLGNBQUEsT0FBS29NLFVBQVUsYUFDWHExRCxFQUFBMzdELEVBQUE5RixjQUFDNmlFLEVBQUQsQ0FBZ0IxQixTQUFVL2lFLEtBQUs4aUUsZUFDL0JPLEVBQUEzN0QsRUFBQTlGLGNBQUEsV0FDQzVCLEtBQUswa0UscURDcEZ0QkMsSUFBU2g0QixPQUNMMDJCLEVBQUEzN0QsRUFBQTlGLGNBOUJRLGtCQUNSeWhFLEVBQUEzN0QsRUFBQTlGLGNBQUN5aEUsRUFBQTM3RCxFQUFNdWxDLFNBQVAsS0FDSW8yQixFQUFBMzdELEVBQUE5RixjQUFBLE9BQUtvTSxVQUFVLHlEQUNYcTFELEVBQUEzN0QsRUFBQTlGLGNBQUEsS0FBR29NLFVBQVUsZUFBZXNGLEtBQUssd0NBQWpDLHVCQUNBK3ZELEVBQUEzN0QsRUFBQTlGLGNBQUEsVUFBUW9NLFVBQVUsaUJBQWlCNU0sS0FBSyxTQUFTd2pFLGNBQVksV0FDckRDLGNBQVkseUJBQXlCQyxnQkFBYyx3QkFBd0JDLGdCQUFjLFFBQ3pGQyxhQUFXLHFCQUNmM0IsRUFBQTM3RCxFQUFBOUYsY0FBQSxRQUFNb00sVUFBVSx1QkFBaEIsTUFHSnExRCxFQUFBMzdELEVBQUE5RixjQUFBLE9BQUtvTSxVQUFVLDJCQUEyQjFDLEdBQUcseUJBQ3pDKzNELEVBQUEzN0QsRUFBQTlGLGNBQUEsTUFBSW9NLFVBQVUsc0JBQ1ZxMUQsRUFBQTM3RCxFQUFBOUYsY0FBQSxNQUFJb00sVUFBVSxtQkFDVnExRCxFQUFBMzdELEVBQUE5RixjQUFBLEtBQUdvTSxVQUFVLFdBQVdzRixLQUFLLHdDQUE3QixRQUF5RSt2RCxFQUFBMzdELEVBQUE5RixjQUFBLFFBQU1vTSxVQUFVLFdBQWhCLGVBRTdFcTFELEVBQUEzN0QsRUFBQTlGLGNBQUEsTUFBSW9NLFVBQVUsWUFDVnExRCxFQUFBMzdELEVBQUE5RixjQUFBLEtBQUdvTSxVQUFVLFdBQVdzRixLQUFLLHdDQUE3QixjQU1oQit2RCxFQUFBMzdELEVBQUE5RixjQUFBLFFBQU1xakUsS0FBSyxRQUNQNUIsRUFBQTM3RCxFQUFBOUYsY0FBQSwyQkFDQXloRSxFQUFBMzdELEVBQUE5RixjQUFDc2pFLEVBQUQsU0FNUixNQUNBdGxFLFNBQVN5TCxlQUFlIiwiZmlsZSI6Im1haW4uYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjMuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTgtMDEtMjBUMTc6MjRaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgLy8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuICAgICAgLy8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG4gICAgICAvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiO1xuICB9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIGRvYywgbm9kZSApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXHRcdFx0XHRpZiAoIG5vZGVbIGkgXSApIHtcblx0XHRcdFx0XHRzY3JpcHRbIGkgXSA9IG5vZGVbIGkgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuMy4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIEFycmF5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHRET01FdmFsKCBjb2RlICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA4LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0ZGlzYWJsZWRBbmNlc3RvciggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcImlmcmFtZVwiICkgKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcbiAgICAgICAgLy8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgaXQuXG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuICAgICAgICAgICAgZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIGFsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKykvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBkb2MsIG5vZGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gZGl2Lm9mZnNldFdpZHRoID09PSAzNiB8fCBcImFic29sdXRlXCI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHByb3BlcnR5IG1hcHBlZCBhbG9uZyB3aGF0IGpRdWVyeS5jc3NQcm9wcyBzdWdnZXN0cyBvciB0b1xuLy8gYSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkuXG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgcmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF07XG5cdGlmICggIXJldCApIHtcblx0XHRyZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcblx0fVxuXHRyZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXHRcdCkgKTtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveDtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdHZhbHVlSXNCb3JkZXJCb3ggPSB2YWx1ZUlzQm9yZGVyQm94ICYmXG5cdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSApO1xuXG5cdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRpZiAoIHZhbCA9PT0gXCJhdXRvXCIgfHxcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApIHtcblxuXHRcdHZhbCA9IGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXTtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBwcm92aWRlIGJvcmRlci1ib3ggdmFsdWVzXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IHRydWU7XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzdXBwb3J0LnNjcm9sbGJveFNpemUoKSA9PT0gc3R5bGVzLnBvc2l0aW9uICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHxcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0gRGF0ZS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UrKyApICsgdW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjcuMFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGs9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSx5PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHo9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsQT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUsQj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LEM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGFhKGEsYixlLGMsZCxnLGgsZil7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGw9W2UsYyxkLGcsaCxmXSxtPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gbFttKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24gRChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWUrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO2FhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZSl9dmFyIEU9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEY9e307XG5mdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUY7dGhpcy51cGRhdGVyPWV8fEV9Ry5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtHLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/RChcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0cucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEgoKXt9SC5wcm90b3R5cGU9Ry5wcm90b3R5cGU7ZnVuY3Rpb24gSShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1GO3RoaXMudXBkYXRlcj1lfHxFfXZhciBKPUkucHJvdG90eXBlPW5ldyBIO1xuSi5jb25zdHJ1Y3Rvcj1JO2soSixHLnByb3RvdHlwZSk7Si5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSz17Y3VycmVudDpudWxsLGN1cnJlbnREaXNwYXRjaGVyOm51bGx9LEw9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxNPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBOKGEsYixlKXt2YXIgYz12b2lkIDAsZD17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilMLmNhbGwoYixjKSYmIU0uaGFzT3duUHJvcGVydHkoYykmJihkW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2Zvcih2YXIgbD1BcnJheShmKSxtPTA7bTxmO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49bH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtjXSYmKGRbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBiYShhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2csUT1bXTtmdW5jdGlvbiBSKGEsYixlLGMpe2lmKFEubGVuZ3RoKXt2YXIgZD1RLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19XG5mdW5jdGlvbiBTKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+US5sZW5ndGgmJlEucHVzaChhKX1cbmZ1bmN0aW9uIFQoYSxiLGUsYyl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1UoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZD1hW2hdO3ZhciBmPWIrVShkLGgpO2crPVQoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1DJiZhW0NdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGg9XG4wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitVKGQsaCsrKSxnKz1UKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLEQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFYoYSxiLGUpe3JldHVybiBudWxsPT1hPzA6VChhLFwiXCIsYixlKX1mdW5jdGlvbiBVKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBjYShhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBkYShhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9XKGEsYyxlLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE8oYSkmJihhPWJhKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrZSkpLGMucHVzaChhKSl9ZnVuY3Rpb24gVyhhLGIsZSxjLGQpe3ZhciBnPVwiXCI7bnVsbCE9ZSYmKGc9KFwiXCIrZSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKTtiPVIoYixnLGMsZCk7VihhLGRhLGIpO1MoYil9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtXKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1SKG51bGwsbnVsbCxiLGUpO1YoYSxjYSxiKTtTKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVihhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1coYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtPKGEpP3ZvaWQgMDpEKFwiMTQzXCIpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpHLFB1cmVDb21wb25lbnQ6SSxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LHJlbmRlcjphfX0sbGF6eTpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QixfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX0sbWVtbzpmdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjpBLHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX0sRnJhZ21lbnQ6cixTdHJpY3RNb2RlOnQsU3VzcGVuc2U6eixjcmVhdGVFbGVtZW50Ok4sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixlKXtudWxsPT09YXx8dm9pZCAwPT09YT9EKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxkPWsoe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7XG5pZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUwuY2FsbChiLGMpJiYhTS5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU4uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpPLHZlcnNpb246XCIxNi43LjBcIixcbnVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlOngsdW5zdGFibGVfUHJvZmlsZXI6dSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6Syxhc3NpZ246a319LFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdHx8WjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNy4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksYmE9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBjYShhLGIsYyxkLGUsZixnLGgpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBrPVtjLGQsZSxmLGcsaF0sbD0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGtbbCsrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIHQoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtjYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWFhP3ZvaWQgMDp0KFwiMjI3XCIpO2Z1bmN0aW9uIGRhKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fVxudmFyIGVhPSExLGZhPW51bGwsaGE9ITEsaWE9bnVsbCxqYT17b25FcnJvcjpmdW5jdGlvbihhKXtlYT0hMDtmYT1hfX07ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGspe2VhPSExO2ZhPW51bGw7ZGEuYXBwbHkoamEsYXJndW1lbnRzKX1mdW5jdGlvbiBsYShhLGIsYyxkLGUsZixnLGgsayl7a2EuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGVhKXtpZihlYSl7dmFyIGw9ZmE7ZWE9ITE7ZmE9bnVsbH1lbHNlIHQoXCIxOThcIiksbD12b2lkIDA7aGF8fChoYT0hMCxpYT1sKX19dmFyIG1hPW51bGwsbmE9e307XG5mdW5jdGlvbiBvYSgpe2lmKG1hKWZvcih2YXIgYSBpbiBuYSl7dmFyIGI9bmFbYV0sYz1tYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOnQoXCI5NlwiLGEpO2lmKCFwYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDp0KFwiOTdcIixhKTtwYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO3FhLmhhc093blByb3BlcnR5KGgpP3QoXCI5OVwiLGgpOnZvaWQgMDtxYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZyYShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8ocmEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDp0KFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gcmEoYSxiLGMpe3NhW2FdP3QoXCIxMDBcIixhKTp2b2lkIDA7c2FbYV09Yjt0YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBwYT1bXSxxYT17fSxzYT17fSx0YT17fSx1YT1udWxsLHZhPW51bGwsd2E9bnVsbDtmdW5jdGlvbiB4YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9d2EoYyk7bGEoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB5YShhLGIpe251bGw9PWI/dChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19XG5mdW5jdGlvbiB6YShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgQWE9bnVsbDtmdW5jdGlvbiBCYShhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspeGEoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmeGEoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fVxudmFyIENhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe21hP3QoXCIxMDFcIik6dm9pZCAwO21hPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO29hKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtuYS5oYXNPd25Qcm9wZXJ0eShjKSYmbmFbY109PT1kfHwobmFbY10/dChcIjEwMlwiLGMpOnZvaWQgMCxuYVtjXT1kLGI9ITApfWImJm9hKCl9fTtcbmZ1bmN0aW9uIERhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9dWEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dChcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIEVhKGEpe251bGwhPT1hJiYoQWE9eWEoQWEsYSkpO2E9QWE7QWE9bnVsbDtpZihhJiYoemEoYSxCYSksQWE/dChcIjk1XCIpOnZvaWQgMCxoYSkpdGhyb3cgYT1pYSxoYT0hMSxpYT1udWxsLGE7fXZhciBGYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxHYT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0ZhLEhhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrRmE7ZnVuY3Rpb24gSWEoYSl7aWYoYVtHYV0pcmV0dXJuIGFbR2FdO2Zvcig7IWFbR2FdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbR2FdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gSmEoYSl7YT1hW0dhXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfVxuZnVuY3Rpb24gS2EoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3QoXCIzM1wiKX1mdW5jdGlvbiBMYShhKXtyZXR1cm4gYVtIYV18fG51bGx9ZnVuY3Rpb24gTWEoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBOYShhLGIsYyl7aWYoYj1EYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPXlhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXlhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfVxuZnVuY3Rpb24gT2EoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1NYShiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspTmEoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylOYShjW2JdLFwiYnViYmxlZFwiLGEpfX1mdW5jdGlvbiBQYShhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1EYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eWEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eWEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFFhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmUGEoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfVxuZnVuY3Rpb24gUmEoYSl7emEoYSxPYSl9dmFyIFNhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuZG9jdW1lbnR8fCF3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7ZnVuY3Rpb24gVGEoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVWE9e2FuaW1hdGlvbmVuZDpUYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpUYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlRhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlRhKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVmE9e30sV2E9e307XG5TYSYmKFdhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFVhLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFVhLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFVhLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFVhLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWGEoYSl7aWYoVmFbYV0pcmV0dXJuIFZhW2FdO2lmKCFVYVthXSlyZXR1cm4gYTt2YXIgYj1VYVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBXYSlyZXR1cm4gVmFbYV09YltjXTtyZXR1cm4gYX1cbnZhciBZYT1YYShcImFuaW1hdGlvbmVuZFwiKSxaYT1YYShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSwkYT1YYShcImFuaW1hdGlvbnN0YXJ0XCIpLGFiPVhhKFwidHJhbnNpdGlvbmVuZFwiKSxiYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksY2I9bnVsbCxlYj1udWxsLGZiPW51bGw7XG5mdW5jdGlvbiBnYigpe2lmKGZiKXJldHVybiBmYjt2YXIgYSxiPWViLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGNiP2NiLnZhbHVlOmNiLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGZiPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gaGIoKXtyZXR1cm4hMH1mdW5jdGlvbiBpYigpe3JldHVybiExfVxuZnVuY3Rpb24geihhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/aGI6aWI7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1pYjtyZXR1cm4gdGhpc31cbm4oei5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1oYil9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1oYil9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1oYn0saXNQZXJzaXN0ZW50OmliLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWliO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7ei5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG56LmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2piKGMpO3JldHVybiBjfTtqYih6KTtmdW5jdGlvbiBrYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBsYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6dChcIjI3OVwiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9XG5mdW5jdGlvbiBqYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1rYjthLnJlbGVhc2U9bGJ9dmFyIG1iPXouZXh0ZW5kKHtkYXRhOm51bGx9KSxuYj16LmV4dGVuZCh7ZGF0YTpudWxsfSksb2I9WzksMTMsMjcsMzJdLHBiPVNhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxxYj1udWxsO1NhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihxYj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHJiPVNhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhcWIsc2I9U2EmJighcGJ8fHFiJiY4PHFiJiYxMT49cWIpLHRiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLHViPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHZiPSExO1xuZnVuY3Rpb24gd2IoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1vYi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHhiKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHliPSExO2Z1bmN0aW9uIHpiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiB4YihiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7dmI9ITA7cmV0dXJuIHRiO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PXRiJiZ2Yj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBBYihhLGIpe2lmKHliKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFwYiYmd2IoYSxiKT8oYT1nYigpLGZiPWViPWNiPW51bGwseWI9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHNiJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBCYj17ZXZlbnRUeXBlczp1YixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYocGIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6ZT11Yi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6ZT11Yi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmU9dWIuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIHliP3diKGEsYykmJihlPXViLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9dWIuY29tcG9zaXRpb25TdGFydCk7ZT8oc2ImJlwia29cIiE9PWMubG9jYWxlJiYoeWJ8fGUhPT11Yi5jb21wb3NpdGlvblN0YXJ0P2U9PT11Yi5jb21wb3NpdGlvbkVuZCYmeWImJihmPWdiKCkpOihjYj1kLGViPVwidmFsdWVcImluIGNiP2NiLnZhbHVlOmNiLnRleHRDb250ZW50LHliPVxuITApKSxlPW1iLmdldFBvb2xlZChlLGIsYyxkKSxmP2UuZGF0YT1mOihmPXhiKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxSYShlKSxmPWUpOmY9bnVsbDsoYT1yYj96YihhLGMpOkFiKGEsYykpPyhiPW5iLmdldFBvb2xlZCh1Yi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsUmEoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sQ2I9bnVsbCxEYj1udWxsLEViPW51bGw7ZnVuY3Rpb24gSGIoYSl7aWYoYT12YShhKSl7XCJmdW5jdGlvblwiIT09dHlwZW9mIENiP3QoXCIyODBcIik6dm9pZCAwO3ZhciBiPXVhKGEuc3RhdGVOb2RlKTtDYihhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIEliKGEpe0RiP0ViP0ViLnB1c2goYSk6RWI9W2FdOkRiPWF9ZnVuY3Rpb24gSmIoKXtpZihEYil7dmFyIGE9RGIsYj1FYjtFYj1EYj1udWxsO0hiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylIYihiW2FdKX19XG5mdW5jdGlvbiBLYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIExiKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIE1iKCl7fXZhciBOYj0hMTtmdW5jdGlvbiBPYihhLGIpe2lmKE5iKXJldHVybiBhKGIpO05iPSEwO3RyeXtyZXR1cm4gS2IoYSxiKX1maW5hbGx5e2lmKE5iPSExLG51bGwhPT1EYnx8bnVsbCE9PUViKU1iKCksSmIoKX19dmFyIFBiPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIFFiKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhUGJbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxuZnVuY3Rpb24gUmIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIFNiKGEpe2lmKCFTYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBUYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWIoYSl7dmFyIGI9VGIoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYihhKSl9ZnVuY3Rpb24gV2IoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9XG52YXIgWGI9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsWWI9L14oLiopW1xcXFxcXC9dLyxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsWmI9RD9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMywkYj1EP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsYWM9RD9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsYmM9RD9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsY2M9RD9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsZGM9RD9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksZWM9RD9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxmYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsZ2M9RD9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsaGM9RD9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6XG42MDExMyxpYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGpjPUQ/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsa2M9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGxjKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1rYyYmYVtrY118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIG1jKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgZmM6cmV0dXJuXCJDb25jdXJyZW50TW9kZVwiO2Nhc2UgYWM6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGI6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNjOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJjOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGM6cmV0dXJuXCJTdXNwZW5zZVwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRjOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2M6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcblwiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIGljOnJldHVybiBtYyhhLnR5cGUpO2Nhc2UgamM6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBtYyhhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBuYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9bWMoYS50eXBlKTtjPW51bGw7ZCYmKGM9bWMoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShZYixcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIG9jPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxwYz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHFjPXt9LHJjPXt9O1xuZnVuY3Rpb24gc2MoYSl7aWYocGMuY2FsbChyYyxhKSlyZXR1cm4hMDtpZihwYy5jYWxsKHFjLGEpKXJldHVybiExO2lmKG9jLnRlc3QoYSkpcmV0dXJuIHJjW2FdPSEwO3FjW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHRjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gdWMoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8dGMoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBFKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgRj17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDAsITEsYSxudWxsKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtGW2JdPW5ldyBFKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDIsITEsYSxudWxsKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEUoYSwzLCEwLGEsbnVsbCl9KTtcbltcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDQsITEsYSxudWxsKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsNiwhMSxhLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgdmM9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiB3YyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2YyxcbndjKTtGW2JdPW5ldyBFKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2Yyx3Yyk7RltiXT1uZXcgRShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2Yyx3Yyk7RltiXT1uZXcgRShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO0YudGFiSW5kZXg9bmV3IEUoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24geGMoYSxiLGMsZCl7dmFyIGU9Ri5oYXNPd25Qcm9wZXJ0eShiKT9GW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwodWMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP3NjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiB5YyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gemMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQWMoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9eWMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBCYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnhjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBDYyhhLGIpe0JjKGEsYik7dmFyIGM9eWMoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RGMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRGMoYSxiLnR5cGUseWMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBFYyhhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBEYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIEZjPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIEdjKGEsYixjKXthPXouZ2V0UG9vbGVkKEZjLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7SWIoYyk7UmEoYSk7cmV0dXJuIGF9dmFyIEpjPW51bGwsS2M9bnVsbDtmdW5jdGlvbiBMYyhhKXtFYShhKX1cbmZ1bmN0aW9uIE1jKGEpe3ZhciBiPUthKGEpO2lmKFdiKGIpKXJldHVybiBhfWZ1bmN0aW9uIE5jKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIE9jPSExO1NhJiYoT2M9U2IoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gUGMoKXtKYyYmKEpjLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFFjKSxLYz1KYz1udWxsKX1mdW5jdGlvbiBRYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmTWMoS2MpJiYoYT1HYyhLYyxhLFJiKGEpKSxPYihMYyxhKSl9ZnVuY3Rpb24gUmMoYSxiLGMpe1wiZm9jdXNcIj09PWE/KFBjKCksSmM9YixLYz1jLEpjLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFFjKSk6XCJibHVyXCI9PT1hJiZQYygpfWZ1bmN0aW9uIFNjKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIE1jKEtjKX1cbmZ1bmN0aW9uIFRjKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gTWMoYil9ZnVuY3Rpb24gVWMoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gTWMoYil9XG52YXIgVmM9e2V2ZW50VHlwZXM6RmMsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpPYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/S2EoYik6d2luZG93LGY9dm9pZCAwLGc9dm9pZCAwLGg9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1ofHxcImlucHV0XCI9PT1oJiZcImZpbGVcIj09PWUudHlwZT9mPU5jOlFiKGUpP09jP2Y9VWM6KGY9U2MsZz1SYyk6KGg9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWgudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9VGMpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIEdjKGYsYyxkKTtnJiZnKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmRGMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sV2M9ei5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFhjPXtBbHQ6XCJhbHRLZXlcIixcbkNvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFljKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9WGNbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBaYygpe3JldHVybiBZY31cbnZhciAkYz0wLGFkPTAsYmQ9ITEsY2Q9ITEsZGQ9V2MuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlpjLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPSRjOyRjPWEuc2NyZWVuWDtyZXR1cm4gYmQ/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOihiZD0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPWFkO2FkPWEuc2NyZWVuWTtyZXR1cm4gY2Q/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihjZD0hMCwwKX19KSxlZD1kZC5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksZmQ9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LGdkPXtldmVudFR5cGVzOmZkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZj1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFmJiYhZSlyZXR1cm4gbnVsbDtlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O2Y/KGY9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP0lhKGIpOm51bGwpOmY9bnVsbDtpZihmPT09YilyZXR1cm4gbnVsbDt2YXIgZz12b2lkIDAsaD12b2lkIDAsaz12b2lkIDAsbD12b2lkIDA7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpZz1kZCxoPWZkLm1vdXNlTGVhdmUsaz1mZC5tb3VzZUVudGVyLGw9XCJtb3VzZVwiO1xuZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpZz1lZCxoPWZkLnBvaW50ZXJMZWF2ZSxrPWZkLnBvaW50ZXJFbnRlcixsPVwicG9pbnRlclwiO3ZhciBtPW51bGw9PWY/ZTpLYShmKTtlPW51bGw9PWI/ZTpLYShiKTthPWcuZ2V0UG9vbGVkKGgsZixjLGQpO2EudHlwZT1sK1wibGVhdmVcIjthLnRhcmdldD1tO2EucmVsYXRlZFRhcmdldD1lO2M9Zy5nZXRQb29sZWQoayxiLGMsZCk7Yy50eXBlPWwrXCJlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PW07ZD1iO2lmKGYmJmQpYTp7Yj1mO2U9ZDtsPTA7Zm9yKGc9YjtnO2c9TWEoZykpbCsrO2c9MDtmb3Ioaz1lO2s7az1NYShrKSlnKys7Zm9yKDswPGwtZzspYj1NYShiKSxsLS07Zm9yKDswPGctbDspZT1NYShlKSxnLS07Zm9yKDtsLS07KXtpZihiPT09ZXx8Yj09PWUuYWx0ZXJuYXRlKWJyZWFrIGE7Yj1NYShiKTtlPU1hKGUpfWI9bnVsbH1lbHNlIGI9bnVsbDtlPWI7Zm9yKGI9W107ZiYmZiE9PWU7KXtsPVxuZi5hbHRlcm5hdGU7aWYobnVsbCE9PWwmJmw9PT1lKWJyZWFrO2IucHVzaChmKTtmPU1hKGYpfWZvcihmPVtdO2QmJmQhPT1lOyl7bD1kLmFsdGVybmF0ZTtpZihudWxsIT09bCYmbD09PWUpYnJlYWs7Zi5wdXNoKGQpO2Q9TWEoZCl9Zm9yKGQ9MDtkPGIubGVuZ3RoO2QrKylQYShiW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihkPWYubGVuZ3RoOzA8ZC0tOylQYShmW2RdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm5bYSxjXX19LGhkPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gaWQoYSxiKXtyZXR1cm4gYT09PWI/MCE9PWF8fDAhPT1ifHwxL2E9PT0xL2I6YSE9PWEmJmIhPT1ifVxuZnVuY3Rpb24gamQoYSxiKXtpZihpZChhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWhkLmNhbGwoYixjW2RdKXx8IWlkKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24ga2QoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2IucmV0dXJuOylpZihiPWIucmV0dXJuLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24gbGQoYSl7MiE9PWtkKGEpP3QoXCIxODhcIik6dm9pZCAwfVxuZnVuY3Rpb24gbWQoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpcmV0dXJuIGI9a2QoYSksMz09PWI/dChcIjE4OFwiKTp2b2lkIDAsMT09PWI/bnVsbDphO2Zvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybixmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09YylyZXR1cm4gbGQoZSksYTtpZihnPT09ZClyZXR1cm4gbGQoZSksYjtnPWcuc2libGluZ310KFwiMTg4XCIpfWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2c9ITE7Zm9yKHZhciBoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWc/XG52b2lkIDA6dChcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP3QoXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz90KFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIG5kKGEpe2E9bWQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG52YXIgb2Q9ei5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHBkPXouZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSkscWQ9V2MuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiByZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBzZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sdGQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LHVkPVdjLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1zZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1yZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/dGRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOlpjLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP3JkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP3JkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksdmQ9ZGQuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHdkPVdjLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlpjfSkseGQ9ei5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSkseWQ9ZGQuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx6ZD1bW1wiYWJvcnRcIixcImFib3J0XCJdLFtZYSxcImFuaW1hdGlvbkVuZFwiXSxbWmEsXCJhbmltYXRpb25JdGVyYXRpb25cIl0sWyRhLFwiYW5pbWF0aW9uU3RhcnRcIl0sW1wiY2FucGxheVwiLFwiY2FuUGxheVwiXSxbXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIl0sW1wiZHJhZ1wiLFwiZHJhZ1wiXSxbXCJkcmFnZW50ZXJcIixcImRyYWdFbnRlclwiXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIl0sW1wiZHJhZ2xlYXZlXCIsXCJkcmFnTGVhdmVcIl0sW1wiZHJhZ292ZXJcIixcImRyYWdPdmVyXCJdLFtcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCJdLFtcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCJdLFxuW1wiZW5kZWRcIixcImVuZGVkXCJdLFtcImVycm9yXCIsXCJlcnJvclwiXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIl0sW1wibG9hZFwiLFwibG9hZFwiXSxbXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiXSxbXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiXSxbXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJtb3VzZW1vdmVcIixcIm1vdXNlTW92ZVwiXSxbXCJtb3VzZW91dFwiLFwibW91c2VPdXRcIl0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIl0sW1wicGxheWluZ1wiLFwicGxheWluZ1wiXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIl0sW1wicG9pbnRlcm91dFwiLFwicG9pbnRlck91dFwiXSxbXCJwb2ludGVyb3ZlclwiLFwicG9pbnRlck92ZXJcIl0sW1wicHJvZ3Jlc3NcIixcInByb2dyZXNzXCJdLFtcInNjcm9sbFwiLFwic2Nyb2xsXCJdLFtcInNlZWtpbmdcIixcInNlZWtpbmdcIl0sW1wic3RhbGxlZFwiLFwic3RhbGxlZFwiXSxcbltcInN1c3BlbmRcIixcInN1c3BlbmRcIl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiXSxbXCJ0b3VjaG1vdmVcIixcInRvdWNoTW92ZVwiXSxbYWIsXCJ0cmFuc2l0aW9uRW5kXCJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIl0sW1wid2hlZWxcIixcIndoZWVsXCJdXSxBZD17fSxCZD17fTtmdW5jdGlvbiBDZChhLGIpe3ZhciBjPWFbMF07YT1hWzFdO3ZhciBkPVwib25cIisoYVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSkpO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O0FkW2FdPWI7QmRbY109Yn1cbltbXCJibHVyXCIsXCJibHVyXCJdLFtcImNhbmNlbFwiLFwiY2FuY2VsXCJdLFtcImNsaWNrXCIsXCJjbGlja1wiXSxbXCJjbG9zZVwiLFwiY2xvc2VcIl0sW1wiY29udGV4dG1lbnVcIixcImNvbnRleHRNZW51XCJdLFtcImNvcHlcIixcImNvcHlcIl0sW1wiY3V0XCIsXCJjdXRcIl0sW1wiYXV4Y2xpY2tcIixcImF1eENsaWNrXCJdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCJdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCJdLFtcImRyb3BcIixcImRyb3BcIl0sW1wiZm9jdXNcIixcImZvY3VzXCJdLFtcImlucHV0XCIsXCJpbnB1dFwiXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCJdLFtcImtleWRvd25cIixcImtleURvd25cIl0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCJdLFtcImtleXVwXCIsXCJrZXlVcFwiXSxbXCJtb3VzZWRvd25cIixcIm1vdXNlRG93blwiXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCJdLFtcInBhc3RlXCIsXCJwYXN0ZVwiXSxbXCJwYXVzZVwiLFwicGF1c2VcIl0sW1wicGxheVwiLFwicGxheVwiXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCJdLFxuW1wicG9pbnRlcmRvd25cIixcInBvaW50ZXJEb3duXCJdLFtcInBvaW50ZXJ1cFwiLFwicG9pbnRlclVwXCJdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIl0sW1wicmVzZXRcIixcInJlc2V0XCJdLFtcInNlZWtlZFwiLFwic2Vla2VkXCJdLFtcInN1Ym1pdFwiLFwic3VibWl0XCJdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIl0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiXSxbXCJ2b2x1bWVjaGFuZ2VcIixcInZvbHVtZUNoYW5nZVwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXtDZChhLCEwKX0pO3pkLmZvckVhY2goZnVuY3Rpb24oYSl7Q2QoYSwhMSl9KTtcbnZhciBEZD17ZXZlbnRUeXBlczpBZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT1CZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9QmRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1yZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9dWQ7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPXFkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9ZGQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbnZkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9d2Q7YnJlYWs7Y2FzZSBZYTpjYXNlIFphOmNhc2UgJGE6YT1vZDticmVhaztjYXNlIGFiOmE9eGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9V2M7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT15ZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPXBkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9ZWQ7YnJlYWs7ZGVmYXVsdDphPXp9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtSYShiKTtyZXR1cm4gYn19LEVkPURkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxcbkZkPVtdO2Z1bmN0aW9uIEdkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ7Zm9yKGQ9YztkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWQpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChjKTtjPUlhKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPVJiKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7Zm9yKHZhciBmPWEubmF0aXZlRXZlbnQsZz1udWxsLGg9MDtoPHBhLmxlbmd0aDtoKyspe3ZhciBrPXBhW2hdO2smJihrPWsuZXh0cmFjdEV2ZW50cyhkLGIsZixlKSkmJihnPXlhKGcsaykpfUVhKGcpfX12YXIgSGQ9ITA7XG5mdW5jdGlvbiBIKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KEVkKGEpP0lkOkpkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMSl9ZnVuY3Rpb24gS2QoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oRWQoYSk/SWQ6SmQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKX1mdW5jdGlvbiBJZChhLGIpe0xiKEpkLGEsYil9XG5mdW5jdGlvbiBKZChhLGIpe2lmKEhkKXt2YXIgYz1SYihiKTtjPUlhKGMpO251bGw9PT1jfHxcIm51bWJlclwiIT09dHlwZW9mIGMudGFnfHwyPT09a2QoYyl8fChjPW51bGwpO2lmKEZkLmxlbmd0aCl7dmFyIGQ9RmQucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7T2IoR2QsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5GZC5sZW5ndGgmJkZkLnB1c2goYSl9fX12YXIgTGQ9e30sTWQ9MCxOZD1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5mdW5jdGlvbiBPZChhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxOZCl8fChhW05kXT1NZCsrLExkW2FbTmRdXT17fSk7cmV0dXJuIExkW2FbTmRdXX1mdW5jdGlvbiBQZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gUWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gUmQoYSxiKXt2YXIgYz1RZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1RZChjKX19ZnVuY3Rpb24gU2QoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9TZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBUZCgpe2Zvcih2YXIgYT13aW5kb3csYj1QZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e2E9Yi5jb250ZW50RG9jdW1lbnQuZGVmYXVsdFZpZXd9Y2F0Y2goYyl7YnJlYWt9Yj1QZChhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBVZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIFZkPVNhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsV2Q9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LFhkPW51bGwsWWQ9bnVsbCxaZD1udWxsLCRkPSExO1xuZnVuY3Rpb24gYWUoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZigkZHx8bnVsbD09WGR8fFhkIT09UGQoYykpcmV0dXJuIG51bGw7Yz1YZDtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZVZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBaZCYmamQoWmQsYyk/bnVsbDooWmQ9YyxhPXouZ2V0UG9vbGVkKFdkLnNlbGVjdCxZZCxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PVhkLFJhKGEpLGEpfVxudmFyIGJlPXtldmVudFR5cGVzOldkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPU9kKGUpO2Y9dGEub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBoPWZbZ107aWYoIWUuaGFzT3duUHJvcGVydHkoaCl8fCFlW2hdKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9LYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKFFiKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKVhkPWUsWWQ9YixaZD1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6WmQ9WWQ9WGQ9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6JGQ9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiAkZD0hMSxhZShjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihWZClicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGFlKGMsZCl9cmV0dXJuIG51bGx9fTtDYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3VhPUxhO3ZhPUphO3dhPUthO0NhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46RGQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOmdkLENoYW5nZUV2ZW50UGx1Z2luOlZjLFNlbGVjdEV2ZW50UGx1Z2luOmJlLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46QmJ9KTtmdW5jdGlvbiBkZShhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGVlKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9ZGUoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfWZ1bmN0aW9uIGZlKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIit5YyhjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2UoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3QoXCI5MVwiKTp2b2lkIDA7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGUoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz90KFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6dChcIjkzXCIpLGI9YlswXSksYz1iKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6eWMoYyl9fVxuZnVuY3Rpb24gaWUoYSxiKXt2YXIgYz15YyhiLnZhbHVlKSxkPXljKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamUoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIGtlPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGxlKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gbWUoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2xlKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG5lPXZvaWQgMCxvZT1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rZS5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuZT1uZXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuZS5pbm5lckhUTUw9XCI8c3ZnPlwiK2IrXCI8L3N2Zz5cIjtmb3IoYj1uZS5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwZShhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFlPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJlPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxZSkuZm9yRWFjaChmdW5jdGlvbihhKXtyZS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FlW2JdPXFlW2FdfSl9KTtmdW5jdGlvbiBzZShhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWUuaGFzT3duUHJvcGVydHkoYSkmJnFlW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRlKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNlKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHVlPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2ZShhLGIpe2ImJih1ZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dChcIjEzN1wiLGEsXCJcIik6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj90KFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOnQoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP3QoXCI2MlwiLFwiXCIpOnZvaWQgMCl9XG5mdW5jdGlvbiB3ZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG5mdW5jdGlvbiB4ZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1PZChhKTtiPXRhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhc093blByb3BlcnR5KGUpfHwhY1tlXSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpLZChcInNjcm9sbFwiLGEpO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6S2QoXCJmb2N1c1wiLGEpO0tkKFwiYmx1clwiLGEpO2MuYmx1cj0hMDtjLmZvY3VzPSEwO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpTYihlKSYmS2QoZSxhKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YmIuaW5kZXhPZihlKSYmSChlLGEpfWNbZV09ITB9fX1mdW5jdGlvbiB5ZSgpe312YXIgemU9bnVsbCxBZT1udWxsO1xuZnVuY3Rpb24gQmUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfWZ1bmN0aW9uIENlKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgRGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsRWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO1xuZnVuY3Rpb24gRmUoYSxiLGMsZCxlKXthW0hhXT1lO1wiaW5wdXRcIj09PWMmJlwicmFkaW9cIj09PWUudHlwZSYmbnVsbCE9ZS5uYW1lJiZCYyhhLGUpO3dlKGMsZCk7ZD13ZShjLGUpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7Zis9Mil7dmFyIGc9YltmXSxoPWJbZisxXTtcInN0eWxlXCI9PT1nP3RlKGEsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9vZShhLGgpOlwiY2hpbGRyZW5cIj09PWc/cGUoYSxoKTp4YyhhLGcsaCxkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Q2MoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppZShhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP2ZlKGEsISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9mZShhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSxcbiEwKTpmZShhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19ZnVuY3Rpb24gR2UoYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBIZShhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9bmV3IFNldDt2YXIgSWU9W10sSmU9LTE7ZnVuY3Rpb24gSShhKXswPkplfHwoYS5jdXJyZW50PUllW0plXSxJZVtKZV09bnVsbCxKZS0tKX1mdW5jdGlvbiBKKGEsYil7SmUrKztJZVtKZV09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBLZT17fSxLPXtjdXJyZW50OktlfSxMPXtjdXJyZW50OiExfSxMZT1LZTtcbmZ1bmN0aW9uIE1lKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gS2U7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gTShhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIE5lKGEpe0koTCxhKTtJKEssYSl9ZnVuY3Rpb24gT2UoYSl7SShMLGEpO0koSyxhKX1cbmZ1bmN0aW9uIFBlKGEsYixjKXtLLmN1cnJlbnQhPT1LZT90KFwiMTY4XCIpOnZvaWQgMDtKKEssYixhKTtKKEwsYyxhKX1mdW5jdGlvbiBRZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpZSBpbiBhP3ZvaWQgMDp0KFwiMTA4XCIsbWMoYil8fFwiVW5rbm93blwiLGUpO3JldHVybiBuKHt9LGMsZCl9ZnVuY3Rpb24gUmUoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxLZTtMZT1LLmN1cnJlbnQ7SihLLGIsYSk7SihMLEwuY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFNlKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtkP3ZvaWQgMDp0KFwiMTY5XCIpO2M/KGI9UWUoYSxiLExlKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWIsSShMLGEpLEkoSyxhKSxKKEssYixhKSk6SShMLGEpO0ooTCxjLGEpfXZhciBUZT1udWxsLFVlPW51bGw7ZnVuY3Rpb24gVmUoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1cbmZ1bmN0aW9uIFdlKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1RlPVZlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtVZT1WZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gWGUoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gTihhLGIsYyxkKXtyZXR1cm4gbmV3IFhlKGEsYixjLGQpfVxuZnVuY3Rpb24gWWUoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBaZShhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gWWUoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWdjKXJldHVybiAxMTtpZihhPT09aWMpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gJGUoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1OKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtjLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9YS5maXJzdENvbnRleHREZXBlbmRlbmN5O2Muc2libGluZz1hLnNpYmxpbmc7XG5jLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBhZihhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpWWUoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgYWM6cmV0dXJuIGJmKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgZmM6cmV0dXJuIGNmKGMsZXwzLGYsYik7Y2FzZSBiYzpyZXR1cm4gY2YoYyxlfDIsZixiKTtjYXNlIGNjOnJldHVybiBhPU4oMTIsYyxiLGV8NCksYS5lbGVtZW50VHlwZT1jYyxhLnR5cGU9Y2MsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBoYzpyZXR1cm4gYT1OKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPWhjLGEudHlwZT1oYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZGM6Zz0xMDticmVhayBhO2Nhc2UgZWM6Zz05O2JyZWFrIGE7Y2FzZSBnYzpnPTExO2JyZWFrIGE7Y2FzZSBpYzpnPVxuMTQ7YnJlYWsgYTtjYXNlIGpjOmc9MTY7ZD1udWxsO2JyZWFrIGF9dChcIjEzMFwiLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKX1iPU4oZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBiZihhLGIsYyxkKXthPU4oNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIGNmKGEsYixjLGQpe2E9Tig4LGEsZCxiKTtiPTA9PT0oYiYxKT9iYzpmYzthLmVsZW1lbnRUeXBlPWI7YS50eXBlPWI7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIGRmKGEsYixjKXthPU4oNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gZWYoYSxiLGMpe2I9Tig0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1mdW5jdGlvbiBmZihhLGIpe2EuZGlkRXJyb3I9ITE7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lOzA9PT1jP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPWI6YzxiP2EuZWFybGllc3RQZW5kaW5nVGltZT1iOmEubGF0ZXN0UGVuZGluZ1RpbWU+YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yik7Z2YoYixhKX1cbmZ1bmN0aW9uIGhmKGEsYil7YS5kaWRFcnJvcj0hMTthLmxhdGVzdFBpbmdlZFRpbWU+PWImJihhLmxhdGVzdFBpbmdlZFRpbWU9MCk7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lLGQ9YS5sYXRlc3RQZW5kaW5nVGltZTtjPT09Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9ZD09PWI/YS5sYXRlc3RQZW5kaW5nVGltZT0wOmQ6ZD09PWImJihhLmxhdGVzdFBlbmRpbmdUaW1lPWMpO2M9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7ZD1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7MD09PWM/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YS5sYXRlc3RTdXNwZW5kZWRUaW1lPWI6YzxiP2EuZWFybGllc3RTdXNwZW5kZWRUaW1lPWI6ZD5iJiYoYS5sYXRlc3RTdXNwZW5kZWRUaW1lPWIpO2dmKGIsYSl9ZnVuY3Rpb24gamYoYSxiKXt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7YT1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtjPmImJihiPWMpO2E+YiYmKGI9YSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBnZihhLGIpe3ZhciBjPWIuZWFybGllc3RTdXNwZW5kZWRUaW1lLGQ9Yi5sYXRlc3RTdXNwZW5kZWRUaW1lLGU9Yi5lYXJsaWVzdFBlbmRpbmdUaW1lLGY9Yi5sYXRlc3RQaW5nZWRUaW1lO2U9MCE9PWU/ZTpmOzA9PT1lJiYoMD09PWF8fGQ8YSkmJihlPWQpO2E9ZTswIT09YSYmYz5hJiYoYT1jKTtiLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWU7Yi5leHBpcmF0aW9uVGltZT1hfXZhciBrZj0hMTtmdW5jdGlvbiBsZihhKXtyZXR1cm57YmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBtZihhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gbmYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gb2YoYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gcGYoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPWxmKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPWxmKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPWxmKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1tZihlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1tZihkKSk7bnVsbD09PWV8fGQ9PT1lP29mKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8ob2YoZCxiKSxvZihlLGIpKToob2YoZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBxZihhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPWxmKGEubWVtb2l6ZWRTdGF0ZSk6cmYoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiByZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1tZihiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBzZihhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIDE6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIDM6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTIwNDl8NjQ7Y2FzZSAwOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBuKHt9LGQsZSk7Y2FzZSAyOmtmPSEwfXJldHVybiBkfVxuZnVuY3Rpb24gdGYoYSxiLGMsZCxlKXtrZj0hMTtiPXJmKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGc9bnVsbCxoPTAsaz1iLmZpcnN0VXBkYXRlLGw9ZjtudWxsIT09azspe3ZhciBtPWsuZXhwaXJhdGlvblRpbWU7bTxlPyhudWxsPT09ZyYmKGc9ayxmPWwpLGg8bSYmKGg9bSkpOihsPXNmKGEsYixrLGwsYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWs6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0RWZmZWN0PWspKSk7az1rLm5leHR9bT1udWxsO2ZvcihrPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09azspe3ZhciByPWsuZXhwaXJhdGlvblRpbWU7cjxlPyhudWxsPT09bSYmKG09ayxudWxsPT09ZyYmKGY9bCkpLGg8ciYmKGg9cikpOihsPXNmKGEsYixrLGwsYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD1cbjMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9azooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdENhcHR1cmVkRWZmZWN0PWspKSk7az1rLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PW0/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1tJiYoZj1sKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9bTthLmV4cGlyYXRpb25UaW1lPWg7YS5tZW1vaXplZFN0YXRlPWx9XG5mdW5jdGlvbiB1ZihhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7dmYoYi5maXJzdEVmZmVjdCxjKTtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO3ZmKGIuZmlyc3RDYXB0dXJlZEVmZmVjdCxjKTtiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbH1mdW5jdGlvbiB2ZihhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmNhbGxiYWNrO2lmKG51bGwhPT1jKXthLmNhbGxiYWNrPW51bGw7dmFyIGQ9YjtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz90KFwiMTkxXCIsYyk6dm9pZCAwO2MuY2FsbChkKX1hPWEubmV4dEVmZmVjdH19XG5mdW5jdGlvbiB3ZihhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOm5jKGIpfX12YXIgeGY9e2N1cnJlbnQ6bnVsbH0seWY9bnVsbCx6Zj1udWxsLEFmPW51bGw7ZnVuY3Rpb24gQmYoYSxiKXt2YXIgYz1hLnR5cGUuX2NvbnRleHQ7Sih4ZixjLl9jdXJyZW50VmFsdWUsYSk7Yy5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gQ2YoYSl7dmFyIGI9eGYuY3VycmVudDtJKHhmLGEpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gRGYoYSl7eWY9YTtBZj16Zj1udWxsO2EuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT1udWxsfVxuZnVuY3Rpb24gRWYoYSxiKXtpZihBZiE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpQWY9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07bnVsbD09PXpmPyhudWxsPT09eWY/dChcIjI5M1wiKTp2b2lkIDAseWYuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT16Zj1iKTp6Zj16Zi5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgRmY9e30sTz17Y3VycmVudDpGZn0sR2Y9e2N1cnJlbnQ6RmZ9LEhmPXtjdXJyZW50OkZmfTtmdW5jdGlvbiBJZihhKXthPT09RmY/dChcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZihhLGIpe0ooSGYsYixhKTtKKEdmLGEsYSk7SihPLEZmLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOm1lKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj1tZShiLGMpfUkoTyxhKTtKKE8sYixhKX1mdW5jdGlvbiBLZihhKXtJKE8sYSk7SShHZixhKTtJKEhmLGEpfWZ1bmN0aW9uIExmKGEpe0lmKEhmLmN1cnJlbnQpO3ZhciBiPUlmKE8uY3VycmVudCk7dmFyIGM9bWUoYixhLnR5cGUpO2IhPT1jJiYoSihHZixhLGEpLEooTyxjLGEpKX1mdW5jdGlvbiBNZihhKXtHZi5jdXJyZW50PT09YSYmKEkoTyxhKSxJKEdmLGEpKX1cbmZ1bmN0aW9uIFAoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1uKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9ZnVuY3Rpb24gTmYoYSl7dmFyIGI9YS5fcmVzdWx0O3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYjtjYXNlIDI6dGhyb3cgYjtjYXNlIDA6dGhyb3cgYjtkZWZhdWx0OnRocm93IGEuX3N0YXR1cz0wLGI9YS5fY3RvcixiPWIoKSxiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pLGEuX3Jlc3VsdD1iLGI7fX12YXIgT2Y9WGIuUmVhY3RDdXJyZW50T3duZXIsUGY9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBRZihhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jO2Q9YS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihkLmJhc2VTdGF0ZT1jKX1cbnZhciBWZj17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PWtkKGEpOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPVJmKCk7ZD1TZihkLGEpO3ZhciBlPW5mKGQpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtUZigpO3BmKGEsZSk7VWYoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9UmYoKTtkPVNmKGQsYSk7dmFyIGU9bmYoZCk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7VGYoKTtwZihhLGUpO1VmKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPVJmKCk7Yz1TZihjLGEpO3ZhciBkPW5mKGMpO2QudGFnPVxuMjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7VGYoKTtwZihhLGQpO1VmKGEsYyl9fTtmdW5jdGlvbiBXZihhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFqZChjLGQpfHwhamQoZSxmKTohMH1cbmZ1bmN0aW9uIFhmKGEsYixjKXt2YXIgZD0hMSxlPUtlO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPU9mLmN1cnJlbnREaXNwYXRjaGVyLnJlYWRDb250ZXh0KGYpOihlPU0oYik/TGU6Sy5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/TWUoYSxlKTpLZSk7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPVZmO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFpmKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZWZi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uICRmKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9UGY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1PZi5jdXJyZW50RGlzcGF0Y2hlci5yZWFkQ29udGV4dChmKTooZj1NKGIpP0xlOksuY3VycmVudCxlLmNvbnRleHQ9TWUoYSxmKSk7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYodGYoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKFFmKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJlZmLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKHRmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgYWc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGJnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDEhPT1jLnRhZz90KFwiMjg5XCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDp0KFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1QZiYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT90KFwiMjg0XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6dChcIjI5MFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gY2coYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJnQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIGRnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9JGUoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1kZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9YmcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPWFmKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPWJnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9ZWYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGcpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9YmYoYyxhLm1vZGUsZCxnKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHIoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPWRmKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFpiOnJldHVybiBjPWFmKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPWJnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSAkYjpyZXR1cm4gYj1lZihiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoYWcoYil8fFxubGMoYikpcmV0dXJuIGI9YmYoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7Y2coYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB3KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFpiOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09YWM/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlICRiOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKGFnKGMpfHxsYyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7Y2coYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWFjP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlICRiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKGFnKGQpfHxsYyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7Y2coYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBCKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHE9bnVsbCxtPWcsdT1nPTAscD1udWxsO251bGwhPT1tJiZ1PGgubGVuZ3RoO3UrKyl7bS5pbmRleD51PyhwPW0sbT1udWxsKTpwPW0uc2libGluZzt2YXIgdj13KGUsbSxoW3VdLGspO2lmKG51bGw9PT12KXtudWxsPT09bSYmKG09cCk7YnJlYWt9YSYmXG5tJiZudWxsPT09di5hbHRlcm5hdGUmJmIoZSxtKTtnPWYodixnLHUpO251bGw9PT1xP2w9djpxLnNpYmxpbmc9djtxPXY7bT1wfWlmKHU9PT1oLmxlbmd0aClyZXR1cm4gYyhlLG0pLGw7aWYobnVsbD09PW0pe2Zvcig7dTxoLmxlbmd0aDt1KyspaWYobT1yKGUsaFt1XSxrKSlnPWYobSxnLHUpLG51bGw9PT1xP2w9bTpxLnNpYmxpbmc9bSxxPW07cmV0dXJuIGx9Zm9yKG09ZChlLG0pO3U8aC5sZW5ndGg7dSsrKWlmKHA9eShtLGUsdSxoW3VdLGspKWEmJm51bGwhPT1wLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PXAua2V5P3U6cC5rZXkpLGc9ZihwLGcsdSksbnVsbD09PXE/bD1wOnEuc2libGluZz1wLHE9cDthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIFIoZSxnLGgsayl7dmFyIGw9bGMoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGw/dChcIjE1MFwiKTp2b2lkIDA7aD1sLmNhbGwoaCk7bnVsbD09aD90KFwiMTUxXCIpOnZvaWQgMDtcbmZvcih2YXIgbT1sPW51bGwscT1nLHU9Zz0wLHA9bnVsbCx2PWgubmV4dCgpO251bGwhPT1xJiYhdi5kb25lO3UrKyx2PWgubmV4dCgpKXtxLmluZGV4PnU/KHA9cSxxPW51bGwpOnA9cS5zaWJsaW5nO3ZhciBBPXcoZSxxLHYudmFsdWUsayk7aWYobnVsbD09PUEpe3F8fChxPXApO2JyZWFrfWEmJnEmJm51bGw9PT1BLmFsdGVybmF0ZSYmYihlLHEpO2c9ZihBLGcsdSk7bnVsbD09PW0/bD1BOm0uc2libGluZz1BO209QTtxPXB9aWYodi5kb25lKXJldHVybiBjKGUscSksbDtpZihudWxsPT09cSl7Zm9yKDshdi5kb25lO3UrKyx2PWgubmV4dCgpKXY9cihlLHYudmFsdWUsayksbnVsbCE9PXYmJihnPWYodixnLHUpLG51bGw9PT1tP2w9djptLnNpYmxpbmc9dixtPXYpO3JldHVybiBsfWZvcihxPWQoZSxxKTshdi5kb25lO3UrKyx2PWgubmV4dCgpKXY9eShxLGUsdSx2LnZhbHVlLGspLG51bGwhPT12JiYoYSYmbnVsbCE9PXYuYWx0ZXJuYXRlJiZxLmRlbGV0ZShudWxsPT09di5rZXk/dTpcbnYua2V5KSxnPWYodixnLHUpLG51bGw9PT1tP2w9djptLnNpYmxpbmc9dixtPXYpO2EmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFjJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFpiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bClpZig3PT09ay50YWc/Zi50eXBlPT09YWM6ay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09YWM/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPWJnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9XG5rLnNpYmxpbmd9Zi50eXBlPT09YWM/KGQ9YmYoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPWFmKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPWJnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSAkYjphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPWVmKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVxuXCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1kZihmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihhZyhmKSlyZXR1cm4gQihhLGQsZixoKTtpZihsYyhmKSlyZXR1cm4gUihhLGQsZixoKTtsJiZjZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOmg9YS50eXBlLHQoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxoLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBlZz1kZyghMCksZmc9ZGcoITEpLGdnPW51bGwsaGc9bnVsbCxpZz0hMTtcbmZ1bmN0aW9uIGpnKGEsYil7dmFyIGM9Tig1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIGtnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gbGcoYSl7aWYoaWcpe3ZhciBiPWhnO2lmKGIpe3ZhciBjPWI7aWYoIWtnKGEsYikpe2I9R2UoYyk7aWYoIWJ8fCFrZyhhLGIpKXthLmVmZmVjdFRhZ3w9MjtpZz0hMTtnZz1hO3JldHVybn1qZyhnZyxjKX1nZz1hO2hnPUhlKGIpfWVsc2UgYS5lZmZlY3RUYWd8PTIsaWc9ITEsZ2c9YX19ZnVuY3Rpb24gbWcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnOylhPWEucmV0dXJuO2dnPWF9ZnVuY3Rpb24gbmcoYSl7aWYoYSE9PWdnKXJldHVybiExO2lmKCFpZylyZXR1cm4gbWcoYSksaWc9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFDZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9aGc7YjspamcoYSxiKSxiPUdlKGIpO21nKGEpO2hnPWdnP0dlKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIG9nKCl7aGc9Z2c9bnVsbDtpZz0hMX12YXIgcGc9WGIuUmVhY3RDdXJyZW50T3duZXI7XG5mdW5jdGlvbiBRKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/ZmcoYixudWxsLGMsZCk6ZWcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gcWcoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO0RmKGIsZSk7ZD1jKGQsZik7Yi5lZmZlY3RUYWd8PTE7UShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHJnKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhWWUoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsc2coYSxiLGcsZCxlLGYpO2E9YWYoYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKGU8ZiYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpqZCxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiB0ZyhhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT0kZShnLGQsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gc2coYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmZTxmJiZqZChhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWY/dGcoYSxiLGYpOnVnKGEsYixjLGQsZil9ZnVuY3Rpb24gdmcoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiB1ZyhhLGIsYyxkLGUpe3ZhciBmPU0oYyk/TGU6Sy5jdXJyZW50O2Y9TWUoYixmKTtEZihiLGUpO2M9YyhkLGYpO2IuZWZmZWN0VGFnfD0xO1EoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB3ZyhhLGIsYyxkLGUpe2lmKE0oYykpe3ZhciBmPSEwO1JlKGIpfWVsc2UgZj0hMTtEZihiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksWGYoYixjLGQsZSksJGYoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9T2YuY3VycmVudERpc3BhdGNoZXIucmVhZENvbnRleHQobCk6KGw9TShjKT9MZTpLLmN1cnJlbnQsbD1NZShiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtyfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmWmYoYixnLGQsbCk7a2Y9ITE7dmFyIHc9Yi5tZW1vaXplZFN0YXRlO2s9Zy5zdGF0ZT13O3ZhciB5PWIudXBkYXRlUXVldWU7bnVsbCE9PXkmJih0ZihiLHksZCxnLGUpLGs9Yi5tZW1vaXplZFN0YXRlKTtoIT09ZHx8dyE9PWt8fEwuY3VycmVudHx8a2Y/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoUWYoYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPWtmfHxXZihiLGMsaCxkLHcsayxsKSk/KHJ8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpQKGIudHlwZSxoKSxrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPU9mLmN1cnJlbnREaXNwYXRjaGVyLnJlYWRDb250ZXh0KGwpOihsPU0oYyk/TGU6Sy5jdXJyZW50LGw9TWUoYixsKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxcbihyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmWmYoYixnLGQsbCksa2Y9ITEsaz1iLm1lbW9pemVkU3RhdGUsdz1nLnN0YXRlPWsseT1iLnVwZGF0ZVF1ZXVlLG51bGwhPT15JiYodGYoYix5LGQsZyxlKSx3PWIubWVtb2l6ZWRTdGF0ZSksaCE9PWR8fGshPT13fHxMLmN1cnJlbnR8fGtmPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKFFmKGIsYyxtLGQpLHc9Yi5tZW1vaXplZFN0YXRlKSwobT1rZnx8V2YoYixjLGgsZCxrLHcsbCkpPyhyfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsdyxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHcsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPVxuZCxiLm1lbW9pemVkU3RhdGU9dyksZy5wcm9wcz1kLGcuc3RhdGU9dyxnLmNvbnRleHQ9bCxkPW0pOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4geGcoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24geGcoYSxiLGMsZCxlLGYpe3ZnKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZTZShiLGMsITEpLHRnKGEsYixmKTtkPWIuc3RhdGVOb2RlO3BnLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPWVnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9ZWcoYixudWxsLGgsZikpOlEoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmU2UoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiB5ZyhhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P1BlKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJlBlKGEsYi5jb250ZXh0LCExKTtKZihhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiB6ZyhhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkU3RhdGU7aWYoMD09PShiLmVmZmVjdFRhZyY2NCkpe2Y9bnVsbDt2YXIgZz0hMX1lbHNlIGY9e3RpbWVkT3V0QXQ6bnVsbCE9PWY/Zi50aW1lZE91dEF0OjB9LGc9ITAsYi5lZmZlY3RUYWcmPS02NTtpZihudWxsPT09YSlpZihnKXt2YXIgaD1lLmZhbGxiYWNrO2E9YmYobnVsbCxkLDAsbnVsbCk7MD09PShiLm1vZGUmMSkmJihhLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKTtkPWJmKGgsZCxjLG51bGwpO2Euc2libGluZz1kO2M9YTtjLnJldHVybj1kLnJldHVybj1ifWVsc2UgYz1kPWZnKGIsbnVsbCxlLmNoaWxkcmVuLGMpO2Vsc2UgbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZT8oZD1hLmNoaWxkLGg9ZC5zaWJsaW5nLGc/KGM9ZS5mYWxsYmFjayxlPSRlKGQsZC5wZW5kaW5nUHJvcHMsMCksMD09PShiLm1vZGUmMSkmJihnPW51bGwhPT1cbmIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWQuY2hpbGQmJihlLmNoaWxkPWcpKSxkPWUuc2libGluZz0kZShoLGMsaC5leHBpcmF0aW9uVGltZSksYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmM9ZD1lZyhiLGQuY2hpbGQsZS5jaGlsZHJlbixjKSk6KGg9YS5jaGlsZCxnPyhnPWUuZmFsbGJhY2ssZT1iZihudWxsLGQsMCxudWxsKSxlLmNoaWxkPWgsMD09PShiLm1vZGUmMSkmJihlLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKSxkPWUuc2libGluZz1iZihnLGQsYyxudWxsKSxkLmVmZmVjdFRhZ3w9MixjPWUsZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsYy5yZXR1cm49ZC5yZXR1cm49Yik6ZD1jPWVnKGIsaCxlLmNoaWxkcmVuLGMpKSxiLnN0YXRlTm9kZT1hLnN0YXRlTm9kZTtiLm1lbW9pemVkU3RhdGU9ZjtiLmNoaWxkPWM7cmV0dXJuIGR9XG5mdW5jdGlvbiB0ZyhhLGIsYyl7bnVsbCE9PWEmJihiLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9YS5maXJzdENvbnRleHREZXBlbmRlbmN5KTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/dChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPSRlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPSRlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIEFnKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hJiZhLm1lbW9pemVkUHJvcHM9PT1iLnBlbmRpbmdQcm9wcyYmIUwuY3VycmVudCYmZDxjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzp5ZyhiKTtvZygpO2JyZWFrO2Nhc2UgNTpMZihiKTticmVhaztjYXNlIDE6TShiLnR5cGUpJiZSZShiKTticmVhaztjYXNlIDQ6SmYoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOkJmKGIsYi5tZW1vaXplZFByb3BzLnZhbHVlKTticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO2lmKDAhPT1kJiZkPj1jKXJldHVybiB6ZyhhLGIsYyk7Yj10ZyhhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfX1yZXR1cm4gdGcoYSxiLGMpfWIuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIuZWxlbWVudFR5cGU7bnVsbCE9PVxuYSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1NZShiLEsuY3VycmVudCk7RGYoYixjKTtlPWQoYSxlKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7aWYoTShkKSl7dmFyIGY9ITA7UmUoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJlFmKGIsZCxnLGEpO2UudXBkYXRlcj1WZjtiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iOyRmKGIsZCxhLGMpO2I9eGcobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUShudWxsLGIsZSxjKSxiPWIuY2hpbGQ7XG5yZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7Zj1iLnBlbmRpbmdQcm9wczthPU5mKGUpO2IudHlwZT1hO2U9Yi50YWc9WmUoYSk7Zj1QKGEsZik7Zz12b2lkIDA7c3dpdGNoKGUpe2Nhc2UgMDpnPXVnKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxOmc9d2cobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDExOmc9cWcobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDE0Omc9cmcobnVsbCxiLGEsUChhLnR5cGUsZiksZCxjKTticmVhaztkZWZhdWx0OnQoXCIzMDZcIixhLFwiXCIpfXJldHVybiBnO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6UChkLGUpLHVnKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpQKGQsZSksd2coYSxiLFxuZCxlLGMpO2Nhc2UgMzp5ZyhiKTtkPWIudXBkYXRlUXVldWU7bnVsbD09PWQ/dChcIjI4MlwiKTp2b2lkIDA7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt0ZihiLGQsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKW9nKCksYj10ZyhhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGU9KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmUuaHlkcmF0ZSloZz1IZShiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxnZz1iLGU9aWc9ITA7ZT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1mZyhiLG51bGwsZCxjKSk6KFEoYSxiLGQsYyksb2coKSk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gTGYoYiksbnVsbD09PWEmJmxnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sQ2UoZCxlKT9nPW51bGw6bnVsbCE9PVxuZiYmQ2UoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksdmcoYSxiKSwxIT09YyYmYi5tb2RlJjEmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUShhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmbGcoYiksbnVsbDtjYXNlIDEzOnJldHVybiB6ZyhhLGIsYyk7Y2FzZSA0OnJldHVybiBKZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1lZyhiLG51bGwsZCxjKTpRKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6UChkLGUpLHFnKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBRKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBRKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTtCZihiLGYpO2lmKG51bGwhPT1nKXt2YXIgaD1nLnZhbHVlO2Y9aD09PWYmJigwIT09aHx8MS9oPT09MS9mKXx8aCE9PWgmJmYhPT1mPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTC5jdXJyZW50KXtiPXRnKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihnPWIuY2hpbGQsbnVsbCE9PWcmJihnLnJldHVybj1iKTtudWxsIT09Zzspe2g9Zy5maXJzdENvbnRleHREZXBlbmRlbmN5O2lmKG51bGwhPT1oKXtkb3tpZihoLmNvbnRleHQ9PT1kJiYwIT09KGgub2JzZXJ2ZWRCaXRzJmYpKXtpZigxPT09Zy50YWcpe3ZhciBrPW5mKGMpO2sudGFnPTI7cGYoZyxrKX1nLmV4cGlyYXRpb25UaW1lPFxuYyYmKGcuZXhwaXJhdGlvblRpbWU9Yyk7az1nLmFsdGVybmF0ZTtudWxsIT09ayYmay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTtmb3IodmFyIGw9Zy5yZXR1cm47bnVsbCE9PWw7KXtrPWwuYWx0ZXJuYXRlO2lmKGwuY2hpbGRFeHBpcmF0aW9uVGltZTxjKWwuY2hpbGRFeHBpcmF0aW9uVGltZT1jLG51bGwhPT1rJiZrLmNoaWxkRXhwaXJhdGlvblRpbWU8YyYmKGsuY2hpbGRFeHBpcmF0aW9uVGltZT1jKTtlbHNlIGlmKG51bGwhPT1rJiZrLmNoaWxkRXhwaXJhdGlvblRpbWU8YylrLmNoaWxkRXhwaXJhdGlvblRpbWU9YztlbHNlIGJyZWFrO2w9bC5yZXR1cm59fWs9Zy5jaGlsZDtoPWgubmV4dH13aGlsZShudWxsIT09aCl9ZWxzZSBrPTEwPT09Zy50YWc/Zy50eXBlPT09Yi50eXBlP251bGw6Zy5jaGlsZDpnLmNoaWxkO2lmKG51bGwhPT1rKWsucmV0dXJuPWc7ZWxzZSBmb3Ioaz1nO251bGwhPT1rOyl7aWYoaz09PWIpe2s9bnVsbDticmVha31nPWsuc2libGluZztcbmlmKG51bGwhPT1nKXtnLnJldHVybj1rLnJldHVybjtrPWc7YnJlYWt9az1rLnJldHVybn1nPWt9fVEoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sRGYoYixjKSxlPUVmKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxRKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1QKGUsYi5wZW5kaW5nUHJvcHMpLGY9UChlLnR5cGUsZikscmcoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIHNnKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpQKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTShkKT8oYT1cbiEwLFJlKGIpKTphPSExLERmKGIsYyksWGYoYixkLGUsYyksJGYoYixkLGUsYykseGcobnVsbCxiLGQsITAsYSxjKTtkZWZhdWx0OnQoXCIxNTZcIil9fWZ1bmN0aW9uIEJnKGEpe2EuZWZmZWN0VGFnfD00fXZhciBDZz12b2lkIDAsR2c9dm9pZCAwLEhnPXZvaWQgMCxJZz12b2lkIDA7Q2c9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0dnPWZ1bmN0aW9uKCl7fTtcbkhnPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtJZihPLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj16YyhnLGYpO2Q9emMoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPWVlKGcsZik7ZD1lZShnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPWdlKGcsZik7ZD1nZShnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXllKX12ZShjLGQpO2c9Yz12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYyBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGMpJiZmLmhhc093blByb3BlcnR5KGMpJiZudWxsIT1mW2NdKWlmKFwic3R5bGVcIj09PVxuYyl7dmFyIGs9ZltjXTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJihofHwoaD17fSksaFtnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YyYmXCJjaGlsZHJlblwiIT09YyYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiZcImF1dG9Gb2N1c1wiIT09YyYmKHNhLmhhc093blByb3BlcnR5KGMpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChjLG51bGwpKTtmb3IoYyBpbiBkKXt2YXIgbD1kW2NdO2s9bnVsbCE9Zj9mW2NdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGMpJiZsIT09ayYmKG51bGwhPWx8fG51bGwhPWspKWlmKFwic3R5bGVcIj09PWMpaWYoayl7Zm9yKGcgaW4gaykhay5oYXNPd25Qcm9wZXJ0eShnKXx8bCYmbC5oYXNPd25Qcm9wZXJ0eShnKXx8KGh8fChoPXt9KSxoW2ddPVwiXCIpO2ZvcihnIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShnKSYma1tnXSE9PWxbZ10mJihofHxcbihoPXt9KSxoW2ddPWxbZ10pfWVsc2UgaHx8KGF8fChhPVtdKSxhLnB1c2goYyxoKSksaD1sO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1jPyhsPWw/bC5fX2h0bWw6dm9pZCAwLGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmayE9PWwmJihhPWF8fFtdKS5wdXNoKGMsXCJcIitsKSk6XCJjaGlsZHJlblwiPT09Yz9rPT09bHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBsJiZcIm51bWJlclwiIT09dHlwZW9mIGx8fChhPWF8fFtdKS5wdXNoKGMsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJihzYS5oYXNPd25Qcm9wZXJ0eShjKT8obnVsbCE9bCYmeGUoZSxjKSxhfHxrPT09bHx8KGE9W10pKTooYT1hfHxbXSkucHVzaChjLGwpKX1oJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsaCk7ZT1hOyhiLnVwZGF0ZVF1ZXVlPWUpJiZCZyhiKX19O0lnPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZCZyhiKX07XG52YXIgSmc9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gS2coYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1uYyhjKSk7bnVsbCE9PWMmJm1jKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJm1jKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIExnKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe01nKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIE5nKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1zZShcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWMudGFnJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlKXtkPWMuY2hpbGQuc2libGluZztkLnJldHVybj1jO2M9ZDtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fFxuYy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gT2coYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFVlJiZVZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLmxhc3RFZmZlY3QsbnVsbCE9PWIpKXt2YXIgYz1iPWIubmV4dDtkb3t2YXIgZD1jLmRlc3Ryb3k7aWYobnVsbCE9PWQpe3ZhciBlPWE7dHJ5e2QoKX1jYXRjaChmKXtNZyhlLGYpfX1jPWMubmV4dH13aGlsZShjIT09Yil9YnJlYWs7Y2FzZSAxOkxnKGEpO2I9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtNZyhhLGYpfWJyZWFrO2Nhc2UgNTpMZyhhKTticmVhaztjYXNlIDQ6UGcoYSl9fVxuZnVuY3Rpb24gUWcoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBSZyhhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihRZyhiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59dChcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnQoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihwZShiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8UWcoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZylpZihjKWlmKGQpe3ZhciBmPWIsZz1lLnN0YXRlTm9kZSxoPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGgpOmYuaW5zZXJ0QmVmb3JlKGcsaCl9ZWxzZSBiLmluc2VydEJlZm9yZShlLnN0YXRlTm9kZSxjKTtlbHNlIGQ/KGc9YixoPWUuc3RhdGVOb2RlLDg9PT1nLm5vZGVUeXBlPyhmPWcucGFyZW50Tm9kZSxmLmluc2VydEJlZm9yZShoLGcpKTooZj1nLGYuYXBwZW5kQ2hpbGQoaCkpLGc9Zy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1nJiZ2b2lkIDAhPT1nfHxudWxsIT09Zi5vbmNsaWNrfHwoZi5vbmNsaWNrPXllKSk6Yi5hcHBlbmRDaGlsZChlLnN0YXRlTm9kZSk7XG5lbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24gUGcoYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iLnJldHVybjthOmZvcig7Oyl7bnVsbD09PWM/dChcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSAzOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA0OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jLnJldHVybn1jPSEwfWlmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXthOmZvcih2YXIgZj1iLGc9Zjs7KWlmKE9nKGcpLG51bGwhPT1nLmNoaWxkJiY0IT09Zy50YWcpZy5jaGlsZC5yZXR1cm49ZyxnPWcuY2hpbGQ7ZWxzZXtpZihnPT09ZilicmVhaztmb3IoO251bGw9PT1nLnNpYmxpbmc7KXtpZihudWxsPT09Zy5yZXR1cm58fGcucmV0dXJuPT09ZilicmVhayBhO2c9Zy5yZXR1cm59Zy5zaWJsaW5nLnJldHVybj1nLnJldHVybjtnPWcuc2libGluZ31lP1xuKGY9ZCxnPWIuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpmLnJlbW92ZUNoaWxkKGcpKTpkLnJlbW92ZUNoaWxkKGIuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1iLnRhZz8oZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGU9ITApOk9nKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm47Yj1iLnJldHVybjs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1cbmZ1bmN0aW9uIFNnKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6YnJlYWs7Y2FzZSAxOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmRmUoYyxmLGUsYSxkLGIpfWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/dChcIjE2MlwiKTp2b2lkIDA7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDM6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmM9Yi5tZW1vaXplZFN0YXRlO2Q9dm9pZCAwO2E9YjtudWxsPT09Yz9kPSExOihkPSEwLGE9Yi5jaGlsZCwwPT09Yy50aW1lZE91dEF0JiYoYy50aW1lZE91dEF0PVJmKCkpKTtudWxsIT09YSYmTmcoYSxkKTtjPWIudXBkYXRlUXVldWU7XG5pZihudWxsIT09Yyl7Yi51cGRhdGVRdWV1ZT1udWxsO3ZhciBnPWIuc3RhdGVOb2RlO251bGw9PT1nJiYoZz1iLnN0YXRlTm9kZT1uZXcgSmcpO2MuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYz1UZy5iaW5kKG51bGwsYixhKTtnLmhhcyhhKXx8KGcuYWRkKGEpLGEudGhlbihjLGMpKX0pfWJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0KFwiMTYzXCIpfX12YXIgVWc9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gVmcoYSxiLGMpe2M9bmYoYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7V2coZCk7S2coYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBYZyhhLGIsYyl7Yz1uZihjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1ZZz9ZZz1uZXcgU2V0KFt0aGlzXSk6WWcuYWRkKHRoaXMpKTt2YXIgYz1iLnZhbHVlLGU9Yi5zdGFjaztLZyhhLGIpO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYyx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWU/ZTpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIFpnKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOk0oYS50eXBlKSYmTmUoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gS2YoYSksT2UoYSksYj1hLmVmZmVjdFRhZywwIT09KGImNjQpP3QoXCIyODVcIik6dm9pZCAwLGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYTtjYXNlIDU6cmV0dXJuIE1mKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gYj1hLmVmZmVjdFRhZyxiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDQ6cmV0dXJuIEtmKGEpLG51bGw7Y2FzZSAxMDpyZXR1cm4gQ2YoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciAkZz17cmVhZENvbnRleHQ6RWZ9LGFoPVhiLlJlYWN0Q3VycmVudE93bmVyLGJoPTEwNzM3NDE4MjIsY2g9MCxkaD0hMSxTPW51bGwsVD1udWxsLFU9MCxlaD0tMSxmaD0hMSxWPW51bGwsZ2g9ITEsaGg9bnVsbCxpaD1udWxsLFlnPW51bGw7ZnVuY3Rpb24gamgoKXtpZihudWxsIT09Uylmb3IodmFyIGE9Uy5yZXR1cm47bnVsbCE9PWE7KXt2YXIgYj1hO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnZhciBjPWIudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09YyYmdm9pZCAwIT09YyYmTmUoYik7YnJlYWs7Y2FzZSAzOktmKGIpO09lKGIpO2JyZWFrO2Nhc2UgNTpNZihiKTticmVhaztjYXNlIDQ6S2YoYik7YnJlYWs7Y2FzZSAxMDpDZihiKX1hPWEucmV0dXJufVQ9bnVsbDtVPTA7ZWg9LTE7Zmg9ITE7Uz1udWxsfWZ1bmN0aW9uIFRmKCl7bnVsbCE9PWloJiYoYmEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2soaGgpLGloKCkpfVxuZnVuY3Rpb24ga2goYSl7Zm9yKDs7KXt2YXIgYj1hLmFsdGVybmF0ZSxjPWEucmV0dXJuLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmMTAyNCkpe1M9YTthOnt2YXIgZT1iO2I9YTt2YXIgZj1VO3ZhciBnPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSAxNTpjYXNlIDA6YnJlYWs7Y2FzZSAxOk0oYi50eXBlKSYmTmUoYik7YnJlYWs7Y2FzZSAzOktmKGIpO09lKGIpO2c9Yi5zdGF0ZU5vZGU7Zy5wZW5kaW5nQ29udGV4dCYmKGcuY29udGV4dD1nLnBlbmRpbmdDb250ZXh0LGcucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWV8fG51bGw9PT1lLmNoaWxkKW5nKGIpLGIuZWZmZWN0VGFnJj0tMztHZyhiKTticmVhaztjYXNlIDU6TWYoYik7dmFyIGg9SWYoSGYuY3VycmVudCk7Zj1iLnR5cGU7aWYobnVsbCE9PWUmJm51bGwhPWIuc3RhdGVOb2RlKUhnKGUsYixmLGcsaCksZS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD1cbjEyOCk7ZWxzZSBpZihnKXt2YXIgaz1JZihPLmN1cnJlbnQpO2lmKG5nKGIpKXtnPWI7ZT1nLnN0YXRlTm9kZTt2YXIgbD1nLnR5cGUsbT1nLm1lbW9pemVkUHJvcHMscj1oO2VbR2FdPWc7ZVtIYV09bTtmPXZvaWQgMDtoPWw7c3dpdGNoKGgpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6SChcImxvYWRcIixlKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IobD0wO2w8YmIubGVuZ3RoO2wrKylIKGJiW2xdLGUpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpIKFwiZXJyb3JcIixlKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpIKFwiZXJyb3JcIixlKTtIKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6SChcInJlc2V0XCIsZSk7SChcInN1Ym1pdFwiLGUpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6SChcInRvZ2dsZVwiLGUpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFjKGUsbSk7SChcImludmFsaWRcIixlKTt4ZShyLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmUuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O0goXCJpbnZhbGlkXCIsZSk7eGUocixcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhlKGUsbSksSChcImludmFsaWRcIixlKSx4ZShyLFwib25DaGFuZ2VcIil9dmUoaCxtKTtsPW51bGw7Zm9yKGYgaW4gbSltLmhhc093blByb3BlcnR5KGYpJiYoaz1tW2ZdLFwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrP2UudGV4dENvbnRlbnQhPT1rJiYobD1bXCJjaGlsZHJlblwiLGtdKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJmUudGV4dENvbnRlbnQhPT1cIlwiK2smJihsPVtcImNoaWxkcmVuXCIsXCJcIitrXSk6c2EuaGFzT3duUHJvcGVydHkoZikmJm51bGwhPWsmJnhlKHIsZikpO3N3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpWYihlKTtFYyhlLG0sITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZiKGUpO2plKGUsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLm9uQ2xpY2smJlxuKGUub25jbGljaz15ZSl9Zj1sO2cudXBkYXRlUXVldWU9ZjtnPW51bGwhPT1mPyEwOiExO2cmJkJnKGIpfWVsc2V7bT1iO2U9ZjtyPWc7bD05PT09aC5ub2RlVHlwZT9oOmgub3duZXJEb2N1bWVudDtrPT09a2UuaHRtbCYmKGs9bGUoZSkpO2s9PT1rZS5odG1sP1wic2NyaXB0XCI9PT1lPyhlPWwuY3JlYXRlRWxlbWVudChcImRpdlwiKSxlLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGw9ZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIHIuaXM/bD1sLmNyZWF0ZUVsZW1lbnQoZSx7aXM6ci5pc30pOihsPWwuY3JlYXRlRWxlbWVudChlKSxcInNlbGVjdFwiPT09ZSYmci5tdWx0aXBsZSYmKGwubXVsdGlwbGU9ITApKTpsPWwuY3JlYXRlRWxlbWVudE5TKGssZSk7ZT1sO2VbR2FdPW07ZVtIYV09ZztDZyhlLGIsITEsITEpO3I9ZTtsPWY7bT1nO3ZhciB3PWgseT13ZShsLG0pO3N3aXRjaChsKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkgoXCJsb2FkXCIsXG5yKTtoPW07YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGJiLmxlbmd0aDtoKyspSChiYltoXSxyKTtoPW07YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkgoXCJlcnJvclwiLHIpO2g9bTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpIKFwiZXJyb3JcIixyKTtIKFwibG9hZFwiLHIpO2g9bTticmVhaztjYXNlIFwiZm9ybVwiOkgoXCJyZXNldFwiLHIpO0goXCJzdWJtaXRcIixyKTtoPW07YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpIKFwidG9nZ2xlXCIscik7aD1tO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFjKHIsbSk7aD16YyhyLG0pO0goXCJpbnZhbGlkXCIscik7eGUodyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpoPWVlKHIsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnIuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFtLm11bHRpcGxlfTtoPW4oe30sbSx7dmFsdWU6dm9pZCAwfSk7SChcImludmFsaWRcIixyKTt4ZSh3LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGUocixcbm0pO2g9Z2UocixtKTtIKFwiaW52YWxpZFwiLHIpO3hlKHcsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omg9bX12ZShsLGgpO2s9dm9pZCAwO3ZhciBCPWwsUj1yLHY9aDtmb3IoayBpbiB2KWlmKHYuaGFzT3duUHJvcGVydHkoaykpe3ZhciBxPXZba107XCJzdHlsZVwiPT09az90ZShSLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWs/KHE9cT9xLl9faHRtbDp2b2lkIDAsbnVsbCE9cSYmb2UoUixxKSk6XCJjaGlsZHJlblwiPT09az9cInN0cmluZ1wiPT09dHlwZW9mIHE/KFwidGV4dGFyZWFcIiE9PUJ8fFwiXCIhPT1xKSYmcGUoUixxKTpcIm51bWJlclwiPT09dHlwZW9mIHEmJnBlKFIsXCJcIitxKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ayYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWsmJlwiYXV0b0ZvY3VzXCIhPT1rJiYoc2EuaGFzT3duUHJvcGVydHkoayk/bnVsbCE9cSYmeGUodyxrKTpudWxsIT1xJiZ4YyhSLGsscSx5KSl9c3dpdGNoKGwpe2Nhc2UgXCJpbnB1dFwiOlZiKHIpO1xuRWMocixtLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYihyKTtqZShyLG0pO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1tLnZhbHVlJiZyLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIit5YyhtLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmg9cjtoLm11bHRpcGxlPSEhbS5tdWx0aXBsZTtyPW0udmFsdWU7bnVsbCE9cj9mZShoLCEhbS5tdWx0aXBsZSxyLCExKTpudWxsIT1tLmRlZmF1bHRWYWx1ZSYmZmUoaCwhIW0ubXVsdGlwbGUsbS5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGgub25DbGljayYmKHIub25jbGljaz15ZSl9KGc9QmUoZixnKSkmJkJnKGIpO2Iuc3RhdGVOb2RlPWV9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBudWxsPT09Yi5zdGF0ZU5vZGU/dChcIjE2NlwiKTp2b2lkIDA7YnJlYWs7Y2FzZSA2OmUmJm51bGwhPWIuc3RhdGVOb2RlP0lnKGUsYixlLm1lbW9pemVkUHJvcHMsZyk6KFwic3RyaW5nXCIhPT1cbnR5cGVvZiBnJiYobnVsbD09PWIuc3RhdGVOb2RlP3QoXCIxNjZcIik6dm9pZCAwKSxlPUlmKEhmLmN1cnJlbnQpLElmKE8uY3VycmVudCksbmcoYik/KGc9YixmPWcuc3RhdGVOb2RlLGU9Zy5tZW1vaXplZFByb3BzLGZbR2FdPWcsKGc9Zi5ub2RlVmFsdWUhPT1lKSYmQmcoYikpOihmPWIsZz0oOT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGcpLGdbR2FdPWIsZi5zdGF0ZU5vZGU9ZykpO2JyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSAxMzpnPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSl7Yi5leHBpcmF0aW9uVGltZT1mO1M9YjticmVhayBhfWc9bnVsbCE9PWc7Zj1udWxsIT09ZSYmbnVsbCE9PWUubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmIWcmJmYmJihlPWUuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGg9Yi5maXJzdEVmZmVjdCxudWxsIT09aD8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1oKTooYi5maXJzdEVmZmVjdD1cbmIubGFzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSk7aWYoZyE9PWZ8fDA9PT0oYi5lZmZlY3RUYWcmMSkmJmcpYi5lZmZlY3RUYWd8PTQ7YnJlYWs7Y2FzZSA3OmJyZWFrO2Nhc2UgODpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgNDpLZihiKTtHZyhiKTticmVhaztjYXNlIDEwOkNmKGIpO2JyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDE0OmJyZWFrO2Nhc2UgMTc6TShiLnR5cGUpJiZOZShiKTticmVhaztkZWZhdWx0OnQoXCIxNTZcIil9Uz1udWxsfWI9YTtpZigxPT09VXx8MSE9PWIuY2hpbGRFeHBpcmF0aW9uVGltZSl7Zz0wO2ZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KWU9Zi5leHBpcmF0aW9uVGltZSxoPWYuY2hpbGRFeHBpcmF0aW9uVGltZSxlPmcmJihnPWUpLGg+ZyYmKGc9aCksZj1mLnNpYmxpbmc7Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWd9aWYobnVsbCE9PVMpcmV0dXJuIFM7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmMTAyNCkmJihudWxsPT09XG5jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSl9ZWxzZXthPVpnKGEsVSk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj0xMDIzLGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsLGMuZWZmZWN0VGFnfD0xMDI0KX1pZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha31yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGxoKGEpe3ZhciBiPUFnKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1raChhKSk7YWguY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gbWgoYSxiKXtkaD90KFwiMjQzXCIpOnZvaWQgMDtUZigpO2RoPSEwO2FoLmN1cnJlbnREaXNwYXRjaGVyPSRnO3ZhciBjPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT247aWYoYyE9PVV8fGEhPT1UfHxudWxsPT09UylqaCgpLFQ9YSxVPWMsUz0kZShULmN1cnJlbnQsbnVsbCxVKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBkPSExO2Rve3RyeXtpZihiKWZvcig7bnVsbCE9PVMmJiFuaCgpOylTPWxoKFMpO2Vsc2UgZm9yKDtudWxsIT09UzspUz1saChTKX1jYXRjaChCKXtpZihBZj16Zj15Zj1udWxsLG51bGw9PT1TKWQ9ITAsV2coQik7ZWxzZXtudWxsPT09Uz90KFwiMjcxXCIpOnZvaWQgMDt2YXIgZT1TLGY9ZS5yZXR1cm47aWYobnVsbD09PWYpZD0hMCxXZyhCKTtlbHNle2E6e3ZhciBnPWEsaD1mLGs9ZSxsPUI7Zj1VO2suZWZmZWN0VGFnfD0xMDI0O2suZmlyc3RFZmZlY3Q9ay5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWwmJlwib2JqZWN0XCI9PT1cbnR5cGVvZiBsJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbC50aGVuKXt2YXIgbT1sO2w9aDt2YXIgcj0tMSx3PS0xO2Rve2lmKDEzPT09bC50YWcpe3ZhciB5PWwuYWx0ZXJuYXRlO2lmKG51bGwhPT15JiYoeT15Lm1lbW9pemVkU3RhdGUsbnVsbCE9PXkpKXt3PTEwKigxMDczNzQxODIyLXkudGltZWRPdXRBdCk7YnJlYWt9eT1sLnBlbmRpbmdQcm9wcy5tYXhEdXJhdGlvbjtpZihcIm51bWJlclwiPT09dHlwZW9mIHkpaWYoMD49eSlyPTA7ZWxzZSBpZigtMT09PXJ8fHk8cilyPXl9bD1sLnJldHVybn13aGlsZShudWxsIT09bCk7bD1oO2Rve2lmKHk9MTM9PT1sLnRhZyl5PXZvaWQgMD09PWwubWVtb2l6ZWRQcm9wcy5mYWxsYmFjaz8hMTpudWxsPT09bC5tZW1vaXplZFN0YXRlO2lmKHkpe2g9bC51cGRhdGVRdWV1ZTtudWxsPT09aD9sLnVwZGF0ZVF1ZXVlPW5ldyBTZXQoW21dKTpoLmFkZChtKTtpZigwPT09KGwubW9kZSYxKSl7bC5lZmZlY3RUYWd8PTY0O2suZWZmZWN0VGFnJj0tMTk1NztcbjE9PT1rLnRhZyYmKG51bGw9PT1rLmFsdGVybmF0ZT9rLnRhZz0xNzooZj1uZigxMDczNzQxODIzKSxmLnRhZz0yLHBmKGssZikpKTtrLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7YnJlYWsgYX1rPWcucGluZ0NhY2hlO251bGw9PT1rPyhrPWcucGluZ0NhY2hlPW5ldyBVZyxoPW5ldyBTZXQsay5zZXQobSxoKSk6KGg9ay5nZXQobSksdm9pZCAwPT09aCYmKGg9bmV3IFNldCxrLnNldChtLGgpKSk7aC5oYXMoZil8fChoLmFkZChmKSxrPW9oLmJpbmQobnVsbCxnLG0sZiksbS50aGVuKGssaykpOy0xPT09cj9nPTEwNzM3NDE4MjM6KC0xPT09dyYmKHc9MTAqKDEwNzM3NDE4MjItamYoZyxmKSktNUUzKSxnPXcrcik7MDw9ZyYmZWg8ZyYmKGVoPWcpO2wuZWZmZWN0VGFnfD0yMDQ4O2wuZXhwaXJhdGlvblRpbWU9ZjticmVhayBhfWw9bC5yZXR1cm59d2hpbGUobnVsbCE9PWwpO2w9RXJyb3IoKG1jKGsudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitcbm5jKGspKX1maD0hMDtsPXdmKGwsayk7Zz1oO2Rve3N3aXRjaChnLnRhZyl7Y2FzZSAzOmcuZWZmZWN0VGFnfD0yMDQ4O2cuZXhwaXJhdGlvblRpbWU9ZjtmPVZnKGcsbCxmKTtxZihnLGYpO2JyZWFrIGE7Y2FzZSAxOmlmKG09bCxyPWcudHlwZSx3PWcuc3RhdGVOb2RlLDA9PT0oZy5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHIuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09WWd8fCFZZy5oYXModykpKSl7Zy5lZmZlY3RUYWd8PTIwNDg7Zy5leHBpcmF0aW9uVGltZT1mO2Y9WGcoZyxtLGYpO3FmKGcsZik7YnJlYWsgYX19Zz1nLnJldHVybn13aGlsZShudWxsIT09Zyl9Uz1raChlKTtjb250aW51ZX19fWJyZWFrfXdoaWxlKDEpO2RoPSExO0FmPXpmPXlmPWFoLmN1cnJlbnREaXNwYXRjaGVyPW51bGw7aWYoZClUPW51bGwsYS5maW5pc2hlZFdvcms9bnVsbDtcbmVsc2UgaWYobnVsbCE9PVMpYS5maW5pc2hlZFdvcms9bnVsbDtlbHNle2Q9YS5jdXJyZW50LmFsdGVybmF0ZTtudWxsPT09ZD90KFwiMjgxXCIpOnZvaWQgMDtUPW51bGw7aWYoZmgpe2U9YS5sYXRlc3RQZW5kaW5nVGltZTtmPWEubGF0ZXN0U3VzcGVuZGVkVGltZTtnPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwIT09ZSYmZTxjfHwwIT09ZiYmZjxjfHwwIT09ZyYmZzxjKXtoZihhLGMpO3BoKGEsZCxjLGEuZXhwaXJhdGlvblRpbWUsLTEpO3JldHVybn1pZighYS5kaWRFcnJvciYmYil7YS5kaWRFcnJvcj0hMDtjPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249YztiPWEuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztwaChhLGQsYyxiLC0xKTtyZXR1cm59fWImJi0xIT09ZWg/KGhmKGEsYyksYj0xMCooMTA3Mzc0MTgyMi1qZihhLGMpKSxiPGVoJiYoZWg9YiksYj0xMCooMTA3Mzc0MTgyMi1SZigpKSxiPWVoLWIscGgoYSxkLGMsYS5leHBpcmF0aW9uVGltZSwwPmI/MDpiKSk6KGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPVxuYyxhLmZpbmlzaGVkV29yaz1kKX19ZnVuY3Rpb24gTWcoYSxiKXtmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtzd2l0Y2goYy50YWcpe2Nhc2UgMTp2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09WWd8fCFZZy5oYXMoZCkpKXthPXdmKGIsYSk7YT1YZyhjLGEsMTA3Mzc0MTgyMyk7cGYoYyxhKTtVZihjLDEwNzM3NDE4MjMpO3JldHVybn1icmVhaztjYXNlIDM6YT13ZihiLGEpO2E9VmcoYyxhLDEwNzM3NDE4MjMpO3BmKGMsYSk7VWYoYywxMDczNzQxODIzKTtyZXR1cm59Yz1jLnJldHVybn0zPT09YS50YWcmJihjPXdmKGIsYSksYz1WZyhhLGMsMTA3Mzc0MTgyMykscGYoYSxjKSxVZihhLDEwNzM3NDE4MjMpKX1cbmZ1bmN0aW9uIFNmKGEsYil7MCE9PWNoP2E9Y2g6ZGg/YT1naD8xMDczNzQxODIzOlU6Yi5tb2RlJjE/KGE9cWg/MTA3Mzc0MTgyMi0xMCooKCgxMDczNzQxODIyLWErMTUpLzEwfDApKzEpOjEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1hKzUwMCkvMjV8MCkrMSksbnVsbCE9PVQmJmE9PT1VJiYtLWEpOmE9MTA3Mzc0MTgyMztxaCYmKDA9PT1yaHx8YTxyaCkmJihyaD1hKTtyZXR1cm4gYX1mdW5jdGlvbiBvaChhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2lmKG51bGwhPT1UJiZVPT09YylUPW51bGw7ZWxzZSBpZihiPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXRlc3RTdXNwZW5kZWRUaW1lLDAhPT1iJiZjPD1iJiZjPj1kKXthLmRpZEVycm9yPSExO2I9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDA9PT1ifHxiPmMpYS5sYXRlc3RQaW5nZWRUaW1lPWM7Z2YoYyxhKTtjPWEuZXhwaXJhdGlvblRpbWU7MCE9PWMmJnNoKGEsYyl9fVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj1SZigpO2I9U2YoYixhKTthPXRoKGEsYik7bnVsbCE9PWEmJihmZihhLGIpLGI9YS5leHBpcmF0aW9uVGltZSwwIT09YiYmc2goYSxiKSl9XG5mdW5jdGlvbiB0aChhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufXJldHVybiBlfVxuZnVuY3Rpb24gVWYoYSxiKXthPXRoKGEsYik7bnVsbCE9PWEmJighZGgmJjAhPT1VJiZiPlUmJmpoKCksZmYoYSxiKSxkaCYmIWdoJiZUPT09YXx8c2goYSxhLmV4cGlyYXRpb25UaW1lKSx1aD52aCYmKHVoPTAsdChcIjE4NVwiKSkpfWZ1bmN0aW9uIHdoKGEsYixjLGQsZSl7dmFyIGY9Y2g7Y2g9MTA3Mzc0MTgyMzt0cnl7cmV0dXJuIGEoYixjLGQsZSl9ZmluYWxseXtjaD1mfX12YXIgeGg9bnVsbCxXPW51bGwseWg9MCx6aD12b2lkIDAsWD0hMSxBaD1udWxsLFk9MCxyaD0wLEJoPSExLENoPW51bGwsWj0hMSxEaD0hMSxxaD0hMSxFaD1udWxsLEZoPWJhLnVuc3RhYmxlX25vdygpLEdoPTEwNzM3NDE4MjItKEZoLzEwfDApLEhoPUdoLHZoPTUwLHVoPTAsSWg9bnVsbDtmdW5jdGlvbiBKaCgpe0doPTEwNzM3NDE4MjItKChiYS51bnN0YWJsZV9ub3coKS1GaCkvMTB8MCl9XG5mdW5jdGlvbiBLaChhLGIpe2lmKDAhPT15aCl7aWYoYjx5aClyZXR1cm47bnVsbCE9PXpoJiZiYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayh6aCl9eWg9YjthPWJhLnVuc3RhYmxlX25vdygpLUZoO3poPWJhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soTGgse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjItYiktYX0pfWZ1bmN0aW9uIHBoKGEsYixjLGQsZSl7YS5leHBpcmF0aW9uVGltZT1kOzAhPT1lfHxuaCgpPzA8ZSYmKGEudGltZW91dEhhbmRsZT1EZShNaC5iaW5kKG51bGwsYSxiLGMpLGUpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YyxhLmZpbmlzaGVkV29yaz1iKX1mdW5jdGlvbiBNaChhLGIsYyl7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YzthLmZpbmlzaGVkV29yaz1iO0poKCk7SGg9R2g7TmgoYSxjKX1mdW5jdGlvbiBSZigpe2lmKFgpcmV0dXJuIEhoO09oKCk7aWYoMD09PVl8fDE9PT1ZKUpoKCksSGg9R2g7cmV0dXJuIEhofVxuZnVuY3Rpb24gc2goYSxiKXtudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdD8oYS5leHBpcmF0aW9uVGltZT1iLG51bGw9PT1XPyh4aD1XPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooVz1XLm5leHRTY2hlZHVsZWRSb290PWEsVy5uZXh0U2NoZWR1bGVkUm9vdD14aCkpOmI+YS5leHBpcmF0aW9uVGltZSYmKGEuZXhwaXJhdGlvblRpbWU9Yik7WHx8KFo/RGgmJihBaD1hLFk9MTA3Mzc0MTgyMyxQaChhLDEwNzM3NDE4MjMsITEpKToxMDczNzQxODIzPT09Yj9RaCgxMDczNzQxODIzLCExKTpLaChhLGIpKX1cbmZ1bmN0aW9uIE9oKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVcpZm9yKHZhciBjPVcsZD14aDtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09Vz90KFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7eGg9Vz1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09eGgpeGg9ZT1kLm5leHRTY2hlZHVsZWRSb290LFcubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09Vyl7Vz1jO1cubmV4dFNjaGVkdWxlZFJvb3Q9eGg7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtlPmEmJihhPWUsYj1kKTtpZihkPT09VylicmVhaztpZigxMDczNzQxODIzPT09XG5hKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fUFoPWI7WT1hfXZhciBSaD0hMTtmdW5jdGlvbiBuaCgpe3JldHVybiBSaD8hMDpiYS51bnN0YWJsZV9zaG91bGRZaWVsZCgpP1JoPSEwOiExfWZ1bmN0aW9uIExoKCl7dHJ5e2lmKCFuaCgpJiZudWxsIT09eGgpe0poKCk7dmFyIGE9eGg7ZG97dmFyIGI9YS5leHBpcmF0aW9uVGltZTswIT09YiYmR2g8PWImJihhLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPUdoKTthPWEubmV4dFNjaGVkdWxlZFJvb3R9d2hpbGUoYSE9PXhoKX1RaCgwLCEwKX1maW5hbGx5e1JoPSExfX1cbmZ1bmN0aW9uIFFoKGEsYil7T2goKTtpZihiKWZvcihKaCgpLEhoPUdoO251bGwhPT1BaCYmMCE9PVkmJmE8PVkmJiEoUmgmJkdoPlkpOylQaChBaCxZLEdoPlkpLE9oKCksSmgoKSxIaD1HaDtlbHNlIGZvcig7bnVsbCE9PUFoJiYwIT09WSYmYTw9WTspUGgoQWgsWSwhMSksT2goKTtiJiYoeWg9MCx6aD1udWxsKTswIT09WSYmS2goQWgsWSk7dWg9MDtJaD1udWxsO2lmKG51bGwhPT1FaClmb3IoYT1FaCxFaD1udWxsLGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKGQpe0JofHwoQmg9ITAsQ2g9ZCl9fWlmKEJoKXRocm93IGE9Q2gsQ2g9bnVsbCxCaD0hMSxhO31mdW5jdGlvbiBOaChhLGIpe1g/dChcIjI1M1wiKTp2b2lkIDA7QWg9YTtZPWI7UGgoYSxiLCExKTtRaCgxMDczNzQxODIzLCExKX1cbmZ1bmN0aW9uIFBoKGEsYixjKXtYP3QoXCIyNDVcIik6dm9pZCAwO1g9ITA7aWYoYyl7dmFyIGQ9YS5maW5pc2hlZFdvcms7bnVsbCE9PWQ/U2goYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9YS50aW1lb3V0SGFuZGxlLC0xIT09ZCYmKGEudGltZW91dEhhbmRsZT0tMSxFZShkKSksbWgoYSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiYobmgoKT9hLmZpbmlzaGVkV29yaz1kOlNoKGEsZCxiKSkpfWVsc2UgZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZD9TaChhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLEVlKGQpKSxtaChhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJlNoKGEsZCxiKSk7WD0hMX1cbmZ1bmN0aW9uIFNoKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1jJiYobnVsbD09PUVoP0VoPVtkXTpFaC5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLmV4cGlyYXRpb25UaW1lPTA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7YT09PUloP3VoKys6KEloPWEsdWg9MCk7Z2g9ZGg9ITA7YS5jdXJyZW50PT09Yj90KFwiMTc3XCIpOnZvaWQgMDtjPWEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1jP3QoXCIyNjFcIik6dm9pZCAwO2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7ZD1iLmV4cGlyYXRpb25UaW1lO3ZhciBlPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtkPWU+ZD9lOmQ7YS5kaWRFcnJvcj0hMTswPT09ZD8oYS5lYXJsaWVzdFBlbmRpbmdUaW1lPTAsYS5sYXRlc3RQZW5kaW5nVGltZT0wLGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPVxuMCk6KGQ8YS5sYXRlc3RQaW5nZWRUaW1lJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApLGU9YS5sYXRlc3RQZW5kaW5nVGltZSwwIT09ZSYmKGU+ZD9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT0wOmEuZWFybGllc3RQZW5kaW5nVGltZT5kJiYoYS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWUpKSxlPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lLDA9PT1lP2ZmKGEsZCk6ZDxhLmxhdGVzdFN1c3BlbmRlZFRpbWU/KGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPTAsZmYoYSxkKSk6ZD5lJiZmZihhLGQpKTtnZigwLGEpO2FoLmN1cnJlbnQ9bnVsbDsxPGIuZWZmZWN0VGFnP251bGwhPT1iLmxhc3RFZmZlY3Q/KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIsZD1iLmZpcnN0RWZmZWN0KTpkPWI6ZD1iLmZpcnN0RWZmZWN0O3plPUhkO2U9VGQoKTtpZihVZChlKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW5cbmUpdmFyIGY9e3N0YXJ0OmUuc2VsZWN0aW9uU3RhcnQsZW5kOmUuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2Y9KGY9ZS5vd25lckRvY3VtZW50KSYmZi5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBnPWYuZ2V0U2VsZWN0aW9uJiZmLmdldFNlbGVjdGlvbigpO2lmKGcmJjAhPT1nLnJhbmdlQ291bnQpe2Y9Zy5hbmNob3JOb2RlO3ZhciBoPWcuYW5jaG9yT2Zmc2V0LGs9Zy5mb2N1c05vZGU7Zz1nLmZvY3VzT2Zmc2V0O3RyeXtmLm5vZGVUeXBlLGsubm9kZVR5cGV9Y2F0Y2goZGIpe2Y9bnVsbDticmVhayBhfXZhciBsPTAsbT0tMSxyPS0xLHc9MCx5PTAsQj1lLFI9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB2Ozspe0IhPT1mfHwwIT09aCYmMyE9PUIubm9kZVR5cGV8fChtPWwraCk7QiE9PWt8fDAhPT1nJiYzIT09Qi5ub2RlVHlwZXx8KHI9bCtnKTszPT09Qi5ub2RlVHlwZSYmKGwrPUIubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh2PUIuZmlyc3RDaGlsZCkpYnJlYWs7Uj1CO0I9dn1mb3IoOzspe2lmKEI9PT1cbmUpYnJlYWsgYjtSPT09ZiYmKyt3PT09aCYmKG09bCk7Uj09PWsmJisreT09PWcmJihyPWwpO2lmKG51bGwhPT0odj1CLm5leHRTaWJsaW5nKSlicmVhaztCPVI7Uj1CLnBhcmVudE5vZGV9Qj12fWY9LTE9PT1tfHwtMT09PXI/bnVsbDp7c3RhcnQ6bSxlbmQ6cn19ZWxzZSBmPW51bGx9Zj1mfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBmPW51bGw7QWU9e2ZvY3VzZWRFbGVtOmUsc2VsZWN0aW9uUmFuZ2U6Zn07SGQ9ITE7Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7Zj12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVY7KXtpZihWLmVmZmVjdFRhZyYyNTYpYTp7dmFyIHE9Vi5hbHRlcm5hdGU7aD1WO3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhayBhO2Nhc2UgMTppZihoLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1xKXt2YXIgdT1xLm1lbW9pemVkUHJvcHMsQT1xLm1lbW9pemVkU3RhdGUsWWY9aC5zdGF0ZU5vZGUsVmg9WWYuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoaC5lbGVtZW50VHlwZT09PVxuaC50eXBlP3U6UChoLnR5cGUsdSksQSk7WWYuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Vmh9YnJlYWsgYTtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhayBhO2RlZmF1bHQ6dChcIjE2M1wiKX19Vj1WLm5leHRFZmZlY3R9fWNhdGNoKGRiKXtlPSEwLGY9ZGJ9ZSYmKG51bGw9PT1WP3QoXCIxNzhcIik6dm9pZCAwLE1nKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfWZvcihWPWQ7bnVsbCE9PVY7KXtxPSExO3U9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1WOyl7dmFyIHg9Vi5lZmZlY3RUYWc7eCYxNiYmcGUoVi5zdGF0ZU5vZGUsXCJcIik7aWYoeCYxMjgpe3ZhciBDPVYuYWx0ZXJuYXRlO2lmKG51bGwhPT1DKXt2YXIgcD1DLnJlZjtudWxsIT09cCYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBwP3AobnVsbCk6cC5jdXJyZW50PW51bGwpfX1zd2l0Y2goeCYxNCl7Y2FzZSAyOlJnKFYpO1YuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6UmcoVik7XG5WLmVmZmVjdFRhZyY9LTM7U2coVi5hbHRlcm5hdGUsVik7YnJlYWs7Y2FzZSA0OlNnKFYuYWx0ZXJuYXRlLFYpO2JyZWFrO2Nhc2UgODpBPVY7UGcoQSk7QS5yZXR1cm49bnVsbDtBLmNoaWxkPW51bGw7QS5tZW1vaXplZFN0YXRlPW51bGw7QS51cGRhdGVRdWV1ZT1udWxsO3ZhciBHPUEuYWx0ZXJuYXRlO251bGwhPT1HJiYoRy5yZXR1cm49bnVsbCxHLmNoaWxkPW51bGwsRy5tZW1vaXplZFN0YXRlPW51bGwsRy51cGRhdGVRdWV1ZT1udWxsKX1WPVYubmV4dEVmZmVjdH19Y2F0Y2goZGIpe3E9ITAsdT1kYn1xJiYobnVsbD09PVY/dChcIjE3OFwiKTp2b2lkIDAsTWcoVix1KSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9cD1BZTtDPVRkKCk7eD1wLmZvY3VzZWRFbGVtO3E9cC5zZWxlY3Rpb25SYW5nZTtpZihDIT09eCYmeCYmeC5vd25lckRvY3VtZW50JiZTZCh4Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHgpKXtudWxsIT09cSYmVWQoeCkmJihDPXEuc3RhcnQscD1xLmVuZCxcbnZvaWQgMD09PXAmJihwPUMpLFwic2VsZWN0aW9uU3RhcnRcImluIHg/KHguc2VsZWN0aW9uU3RhcnQ9Qyx4LnNlbGVjdGlvbkVuZD1NYXRoLm1pbihwLHgudmFsdWUubGVuZ3RoKSk6KHA9KEM9eC5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJkMuZGVmYXVsdFZpZXd8fHdpbmRvdyxwLmdldFNlbGVjdGlvbiYmKHA9cC5nZXRTZWxlY3Rpb24oKSx1PXgudGV4dENvbnRlbnQubGVuZ3RoLEc9TWF0aC5taW4ocS5zdGFydCx1KSxxPXZvaWQgMD09PXEuZW5kP0c6TWF0aC5taW4ocS5lbmQsdSksIXAuZXh0ZW5kJiZHPnEmJih1PXEscT1HLEc9dSksdT1SZCh4LEcpLEE9UmQoeCxxKSx1JiZBJiYoMSE9PXAucmFuZ2VDb3VudHx8cC5hbmNob3JOb2RlIT09dS5ub2RlfHxwLmFuY2hvck9mZnNldCE9PXUub2Zmc2V0fHxwLmZvY3VzTm9kZSE9PUEubm9kZXx8cC5mb2N1c09mZnNldCE9PUEub2Zmc2V0KSYmKEM9Qy5jcmVhdGVSYW5nZSgpLEMuc2V0U3RhcnQodS5ub2RlLHUub2Zmc2V0KSxwLnJlbW92ZUFsbFJhbmdlcygpLFxuRz5xPyhwLmFkZFJhbmdlKEMpLHAuZXh0ZW5kKEEubm9kZSxBLm9mZnNldCkpOihDLnNldEVuZChBLm5vZGUsQS5vZmZzZXQpLHAuYWRkUmFuZ2UoQykpKSkpKTtDPVtdO2ZvcihwPXg7cD1wLnBhcmVudE5vZGU7KTE9PT1wLm5vZGVUeXBlJiZDLnB1c2goe2VsZW1lbnQ6cCxsZWZ0OnAuc2Nyb2xsTGVmdCx0b3A6cC5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5mb2N1cyYmeC5mb2N1cygpO2Zvcih4PTA7eDxDLmxlbmd0aDt4KyspcD1DW3hdLHAuZWxlbWVudC5zY3JvbGxMZWZ0PXAubGVmdCxwLmVsZW1lbnQuc2Nyb2xsVG9wPXAudG9wfUFlPW51bGw7SGQ9ISF6ZTt6ZT1udWxsO2EuY3VycmVudD1iO2ZvcihWPWQ7bnVsbCE9PVY7KXtkPSExO3g9dm9pZCAwO3RyeXtmb3IoQz1jO251bGwhPT1WOyl7dmFyIEZiPVYuZWZmZWN0VGFnO2lmKEZiJjM2KXt2YXIgR2I9Vi5hbHRlcm5hdGU7cD1WO0c9Qztzd2l0Y2gocC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWs7XG5jYXNlIDE6dmFyIEhjPXAuc3RhdGVOb2RlO2lmKHAuZWZmZWN0VGFnJjQpaWYobnVsbD09PUdiKUhjLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgaWk9cC5lbGVtZW50VHlwZT09PXAudHlwZT9HYi5tZW1vaXplZFByb3BzOlAocC50eXBlLEdiLm1lbW9pemVkUHJvcHMpO0hjLmNvbXBvbmVudERpZFVwZGF0ZShpaSxHYi5tZW1vaXplZFN0YXRlLEhjLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgRGc9cC51cGRhdGVRdWV1ZTtudWxsIT09RGcmJnVmKHAsRGcsSGMsRyk7YnJlYWs7Y2FzZSAzOnZhciBFZz1wLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1FZyl7cT1udWxsO2lmKG51bGwhPT1wLmNoaWxkKXN3aXRjaChwLmNoaWxkLnRhZyl7Y2FzZSA1OnE9cC5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOnE9cC5jaGlsZC5zdGF0ZU5vZGV9dWYocCxFZyxxLEcpfWJyZWFrO2Nhc2UgNTp2YXIgamk9cC5zdGF0ZU5vZGU7bnVsbD09PUdiJiZwLmVmZmVjdFRhZyZcbjQmJkJlKHAudHlwZSxwLm1lbW9pemVkUHJvcHMpJiZqaS5mb2N1cygpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0KFwiMTYzXCIpfX1pZihGYiYxMjgpe3ZhciBJYz1WLnJlZjtpZihudWxsIT09SWMpe3ZhciBGZz1WLnN0YXRlTm9kZTtzd2l0Y2goVi50YWcpe2Nhc2UgNTp2YXIgY2U9Rmc7YnJlYWs7ZGVmYXVsdDpjZT1GZ31cImZ1bmN0aW9uXCI9PT10eXBlb2YgSWM/SWMoY2UpOkljLmN1cnJlbnQ9Y2V9fVY9Vi5uZXh0RWZmZWN0fX1jYXRjaChkYil7ZD0hMCx4PWRifWQmJihudWxsPT09Vj90KFwiMTc4XCIpOnZvaWQgMCxNZyhWLHgpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1kaD1naD0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgVGUmJlRlKGIuc3RhdGVOb2RlKTtGYj1iLmV4cGlyYXRpb25UaW1lO2I9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2I9Yj5GYj9iOkZiOzA9PT1iJiYoWWc9XG5udWxsKTthLmV4cGlyYXRpb25UaW1lPWI7YS5maW5pc2hlZFdvcms9bnVsbH1mdW5jdGlvbiBXZyhhKXtudWxsPT09QWg/dChcIjI0NlwiKTp2b2lkIDA7QWguZXhwaXJhdGlvblRpbWU9MDtCaHx8KEJoPSEwLENoPWEpfWZ1bmN0aW9uIFRoKGEsYil7dmFyIGM9WjtaPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhaPWMpfHxYfHxRaCgxMDczNzQxODIzLCExKX19ZnVuY3Rpb24gVWgoYSxiKXtpZihaJiYhRGgpe0RoPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0RoPSExfX1yZXR1cm4gYShiKX1mdW5jdGlvbiBXaChhLGIsYyl7aWYocWgpcmV0dXJuIGEoYixjKTtafHxYfHwwPT09cmh8fChRaChyaCwhMSkscmg9MCk7dmFyIGQ9cWgsZT1aO1o9cWg9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXtxaD1kLChaPWUpfHxYfHxRaCgxMDczNzQxODIzLCExKX19XG5mdW5jdGlvbiBYaChhLGIsYyxkLGUpe3ZhciBmPWIuY3VycmVudDthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6ezI9PT1rZChjKSYmMT09PWMudGFnP3ZvaWQgMDp0KFwiMTcwXCIpO3ZhciBnPWM7ZG97c3dpdGNoKGcudGFnKXtjYXNlIDM6Zz1nLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKE0oZy50eXBlKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1nPWcucmV0dXJufXdoaWxlKG51bGwhPT1nKTt0KFwiMTcxXCIpO2c9dm9pZCAwfWlmKDE9PT1jLnRhZyl7dmFyIGg9Yy50eXBlO2lmKE0oaCkpe2M9UWUoYyxoLGcpO2JyZWFrIGF9fWM9Z31lbHNlIGM9S2U7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1lO2U9bmYoZCk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO1xuVGYoKTtwZihmLGUpO1VmKGYsZCk7cmV0dXJuIGR9ZnVuY3Rpb24gWWgoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9UmYoKTtlPVNmKGYsZSk7cmV0dXJuIFhoKGEsYixjLGUsZCl9ZnVuY3Rpb24gWmgoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiAkaChhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRiLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuQ2I9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpDYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9TGEoZCk7ZT92b2lkIDA6dChcIjkwXCIpO1diKGQpO0NjKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmUoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtcbmZ1bmN0aW9uIGFpKGEpe3ZhciBiPTEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1SZigpKzUwMCkvMjV8MCkrMSk7Yj49YmgmJihiPWJoLTEpO3RoaXMuX2V4cGlyYXRpb25UaW1lPWJoPWI7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1haS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDp0KFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgYmk7WGgoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xuYWkucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuYWkucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOnQoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/dChcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtOaChhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTthaS5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gYmkoKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1iaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuYmkucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dChcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07XG5mdW5jdGlvbiBjaShhLGIsYyl7Yj1OKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLHBpbmdDYWNoZTpudWxsLGVhcmxpZXN0UGVuZGluZ1RpbWU6MCxsYXRlc3RQZW5kaW5nVGltZTowLGVhcmxpZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RQaW5nZWRUaW1lOjAsZGlkRXJyb3I6ITEscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsdGltZW91dEhhbmRsZTotMSxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMsbmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT246MCxleHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTt0aGlzLl9pbnRlcm5hbFJvb3Q9Yi5zdGF0ZU5vZGU9YX1cbmNpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgYmk7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO1loKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07Y2kucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IGJpO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtZaChudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O2NpLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBiaTtjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7WWgoYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcbmNpLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBhaSh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIGRpKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1LYj1UaDtMYj1XaDtNYj1mdW5jdGlvbigpe1h8fDA9PT1yaHx8KFFoKHJoLCExKSxyaD0wKX07XG5mdW5jdGlvbiBlaShhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IGNpKGEsITEsYil9XG5mdW5jdGlvbiBmaShhLGIsYyxkLGUpe2RpKGMpP3ZvaWQgMDp0KFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9WmgoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1laShjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1aaChmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19VWgoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIFpoKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBnaShhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2RpKGIpP3ZvaWQgMDp0KFwiMjAwXCIpO3JldHVybiAkaChhLGIsbnVsbCxjKX1cbnZhciBraT17Y3JlYXRlUG9ydGFsOmdpLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/dChcIjE4OFwiKTp0KFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPW5kKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGZpKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBmaShudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP3QoXCIzOFwiKTp2b2lkIDA7cmV0dXJuIGZpKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe2RpKGEpP1xudm9pZCAwOnQoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhVaChmdW5jdGlvbigpe2ZpKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIGdpLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpUaCx1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXM6V2gsZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7WD90KFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1aO1o9ITA7dHJ5e3JldHVybiB3aChhLGIpfWZpbmFsbHl7Wj1jLFFoKDEwNzM3NDE4MjMsITEpfX0sdW5zdGFibGVfY3JlYXRlUm9vdDpoaSx1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9WjtaPSEwO3RyeXt3aChhKX1maW5hbGx5eyhaPWIpfHxYfHxRaCgxMDczNzQxODIzLCExKX19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudHM6W0phLFxuS2EsTGEsQ2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lLHFhLFJhLGZ1bmN0aW9uKGEpe3phKGEsUWEpfSxJYixKYixKZCxFYV19fTtmdW5jdGlvbiBoaShhLGIpe2RpKGEpP3ZvaWQgMDp0KFwiMjk5XCIsXCJ1bnN0YWJsZV9jcmVhdGVSb290XCIpO3JldHVybiBuZXcgY2koYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9KGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFdlKG4oe30sYSx7b3ZlcnJpZGVQcm9wczpudWxsLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9bmQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6SWEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi43LjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTtcbnZhciBsaT17ZGVmYXVsdDpraX0sbWk9bGkmJmtpfHxsaTttb2R1bGUuZXhwb3J0cz1taS5kZWZhdWx0fHxtaTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTIuMFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBjPW51bGwsZj0hMSxoPTMsaz0tMSxsPS0xLG09ITEsbj0hMTtmdW5jdGlvbiBwKCl7aWYoIW0pe3ZhciBhPWMuZXhwaXJhdGlvblRpbWU7bj9xKCk6bj0hMDtyKHQsYSl9fVxuZnVuY3Rpb24gdSgpe3ZhciBhPWMsYj1jLm5leHQ7aWYoYz09PWIpYz1udWxsO2Vsc2V7dmFyIGQ9Yy5wcmV2aW91cztjPWQubmV4dD1iO2IucHJldmlvdXM9ZH1hLm5leHQ9YS5wcmV2aW91cz1udWxsO2Q9YS5jYWxsYmFjaztiPWEuZXhwaXJhdGlvblRpbWU7YT1hLnByaW9yaXR5TGV2ZWw7dmFyIGU9aCxRPWw7aD1hO2w9Yjt0cnl7dmFyIGc9ZCgpfWZpbmFsbHl7aD1lLGw9UX1pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZylpZihnPXtjYWxsYmFjazpnLHByaW9yaXR5TGV2ZWw6YSxleHBpcmF0aW9uVGltZTpiLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfSxudWxsPT09YyljPWcubmV4dD1nLnByZXZpb3VzPWc7ZWxzZXtkPW51bGw7YT1jO2Rve2lmKGEuZXhwaXJhdGlvblRpbWU+PWIpe2Q9YTticmVha31hPWEubmV4dH13aGlsZShhIT09Yyk7bnVsbD09PWQ/ZD1jOmQ9PT1jJiYoYz1nLHAoKSk7Yj1kLnByZXZpb3VzO2IubmV4dD1kLnByZXZpb3VzPWc7Zy5uZXh0PWQ7Zy5wcmV2aW91cz1cbmJ9fWZ1bmN0aW9uIHYoKXtpZigtMT09PWsmJm51bGwhPT1jJiYxPT09Yy5wcmlvcml0eUxldmVsKXttPSEwO3RyeXtkbyB1KCk7d2hpbGUobnVsbCE9PWMmJjE9PT1jLnByaW9yaXR5TGV2ZWwpfWZpbmFsbHl7bT0hMSxudWxsIT09Yz9wKCk6bj0hMX19fWZ1bmN0aW9uIHQoYSl7bT0hMDt2YXIgYj1mO2Y9YTt0cnl7aWYoYSlmb3IoO251bGwhPT1jOyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihjLmV4cGlyYXRpb25UaW1lPD1kKXtkbyB1KCk7d2hpbGUobnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8PWQpfWVsc2UgYnJlYWt9ZWxzZSBpZihudWxsIT09Yyl7ZG8gdSgpO3doaWxlKG51bGwhPT1jJiYhdygpKX19ZmluYWxseXttPSExLGY9YixudWxsIT09Yz9wKCk6bj0hMSx2KCl9fVxudmFyIHg9RGF0ZSx5PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZT9yZXF1ZXN0QW5pbWF0aW9uRnJhbWU6dm9pZCAwLEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNhbmNlbEFuaW1hdGlvbkZyYW1lP2NhbmNlbEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxDLEQ7ZnVuY3Rpb24gRShhKXtDPUEoZnVuY3Rpb24oYil7eihEKTthKGIpfSk7RD15KGZ1bmN0aW9uKCl7QihDKTthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSwxMDApfVxuaWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIEY9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRi5ub3coKX19ZWxzZSBleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpfTt2YXIgcixxLHcsRz1udWxsO1widW5kZWZpbmVkXCIhPT10eXBlb2Ygd2luZG93P0c9d2luZG93OlwidW5kZWZpbmVkXCIhPT10eXBlb2YgZ2xvYmFsJiYoRz1nbG9iYWwpO1xuaWYoRyYmRy5fc2NoZWRNb2NrKXt2YXIgSD1HLl9zY2hlZE1vY2s7cj1IWzBdO3E9SFsxXTt3PUhbMl07ZXhwb3J0cy51bnN0YWJsZV9ub3c9SFszXX1lbHNlIGlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBJPW51bGwsSj1mdW5jdGlvbihhKXtpZihudWxsIT09SSl0cnl7SShhKX1maW5hbGx5e0k9bnVsbH19O3I9ZnVuY3Rpb24oYSl7bnVsbCE9PUk/c2V0VGltZW91dChyLDAsYSk6KEk9YSxzZXRUaW1lb3V0KEosMCwhMSkpfTtxPWZ1bmN0aW9uKCl7ST1udWxsfTt3PWZ1bmN0aW9uKCl7cmV0dXJuITF9fWVsc2V7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIiksXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgQiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpKTt2YXIgSz1udWxsLEw9ITEsTT0tMSxOPSExLE89ITEsUD0wLFI9MzMsUz0zMzt3PWZ1bmN0aW9uKCl7cmV0dXJuIFA8PWV4cG9ydHMudW5zdGFibGVfbm93KCl9O3ZhciBUPW5ldyBNZXNzYWdlQ2hhbm5lbCxVPVQucG9ydDI7VC5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtMPSExO3ZhciBhPUssYj1NO0s9bnVsbDtNPS0xO3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCksZT0hMTtpZigwPj1QLWQpaWYoLTEhPT1iJiZiPD1kKWU9ITA7ZWxzZXtOfHwoTj0hMCxFKFYpKTtLPWE7TT1iO3JldHVybn1pZihudWxsIT09YSl7Tz0hMDt0cnl7YShlKX1maW5hbGx5e089ITF9fX07XG52YXIgVj1mdW5jdGlvbihhKXtpZihudWxsIT09Syl7RShWKTt2YXIgYj1hLVArUztiPFMmJlI8Uz8oOD5iJiYoYj04KSxTPWI8Uj9SOmIpOlI9YjtQPWErUztMfHwoTD0hMCxVLnBvc3RNZXNzYWdlKHZvaWQgMCkpfWVsc2UgTj0hMX07cj1mdW5jdGlvbihhLGIpe0s9YTtNPWI7T3x8MD5iP1UucG9zdE1lc3NhZ2Uodm9pZCAwKTpOfHwoTj0hMCxFKFYpKX07cT1mdW5jdGlvbigpe0s9bnVsbDtMPSExO009LTF9fWV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O1xuZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgZD1oLGU9aztoPWE7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7aD1kLGs9ZSx2KCl9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3ZhciBkPS0xIT09az9rOmV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQpYj1kK2IudGltZW91dDtlbHNlIHN3aXRjaChoKXtjYXNlIDE6Yj1kKy0xO2JyZWFrO2Nhc2UgMjpiPWQrMjUwO2JyZWFrO2Nhc2UgNTpiPWQrMTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6Yj1kKzFFNDticmVhaztkZWZhdWx0OmI9ZCs1RTN9YT17Y2FsbGJhY2s6YSxwcmlvcml0eUxldmVsOmgsZXhwaXJhdGlvblRpbWU6YixuZXh0Om51bGwscHJldmlvdXM6bnVsbH07aWYobnVsbD09PWMpYz1hLm5leHQ9YS5wcmV2aW91cz1hLHAoKTtlbHNle2Q9bnVsbDt2YXIgZT1jO2Rve2lmKGUuZXhwaXJhdGlvblRpbWU+Yil7ZD1lO2JyZWFrfWU9ZS5uZXh0fXdoaWxlKGUhPT1jKTtudWxsPT09ZD9kPWM6ZD09PWMmJihjPWEscCgpKTtcbmI9ZC5wcmV2aW91cztiLm5leHQ9ZC5wcmV2aW91cz1hO2EubmV4dD1kO2EucHJldmlvdXM9Yn1yZXR1cm4gYX07ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1hLm5leHQ7aWYobnVsbCE9PWIpe2lmKGI9PT1hKWM9bnVsbDtlbHNle2E9PT1jJiYoYz1iKTt2YXIgZD1hLnByZXZpb3VzO2QubmV4dD1iO2IucHJldmlvdXM9ZH1hLm5leHQ9YS5wcmV2aW91cz1udWxsfX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9aDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZD1oLGU9aztoPWI7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtoPWQsaz1lLHYoKX19fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIGh9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiFmJiYobnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8bHx8dygpKX07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe251bGwhPT1jJiZwKCl9O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gY307XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJleHBvcnQgY29uc3QgcGl0TW9udGhseURlZHVjdGVkID0gNTAwMDsgLy8g5q+P5pyI5YeP6Zmk6LS555SoXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwaXRNb250aGx5RGVkdWN0ZWQsXG59O1xuIiwiaW1wb3J0IHtwaXRNb250aGx5RGVkdWN0ZWR9IGZyb20gXCIuL0NvbnN0YW50c1wiO1xuXG5jbGFzcyBQSVRDYWxjdWxhdG9yIHtcblxuICAgIHBpdEZvcm0gPSBudWxsO1xuXG4gICAgbW9uZXlNb250aGx5U2FsYXJ5ID0gMDtcblxuICAgIG1vbmV5TW9udGhseURlZHVjdGVkID0gcGl0TW9udGhseURlZHVjdGVkO1xuXG4gICAgbW9uZXlNb250aGx5U3BlY2lhbERlZHVjdGVkID0gMDtcblxuICAgIG1vbmV5TW9udGhseVNpeFNwZWNpYWxEZWR1Y3RlZCA9IDA7XG5cbiAgICBwaXRJbmZvTWFwID0ge307IC8vIGluaXQgY2FjaGVcblxuICAgIGNvbnN0cnVjdG9yKGZvcm0sIG1vbmV5TW9udGhseVNhbGFyeSwgbW9uZXlNb250aGx5U3BlY2lhbERlZHVjdGVkLCBtb25leU1vbnRobHlTaXhTcGVjaWFsRGVkdWN0ZWQpIHtcbiAgICAgICAgdGhpcy5waXRGb3JtID0gZm9ybTtcbiAgICAgICAgdGhpcy5tb25leU1vbnRobHlTYWxhcnkgPSBtb25leU1vbnRobHlTYWxhcnk7XG4gICAgICAgIHRoaXMubW9uZXlNb250aGx5U3BlY2lhbERlZHVjdGVkID0gbW9uZXlNb250aGx5U3BlY2lhbERlZHVjdGVkO1xuICAgICAgICB0aGlzLm1vbmV5TW9udGhseVNpeFNwZWNpYWxEZWR1Y3RlZCA9IG1vbmV5TW9udGhseVNpeFNwZWNpYWxEZWR1Y3RlZDtcbiAgICB9XG5cbiAgICBuMUJ5TW9udGgobW9udGgpIHtcbiAgICAgICAgY29uc3QgbjEgPSAodGhpcy5tb25leU1vbnRobHlTYWxhcnkqbW9udGgpLSh0aGlzLm1vbmV5TW9udGhseURlZHVjdGVkKm1vbnRoKS0odGhpcy5tb25leU1vbnRobHlTcGVjaWFsRGVkdWN0ZWQqbW9udGgpLSh0aGlzLm1vbmV5TW9udGhseVNpeFNwZWNpYWxEZWR1Y3RlZCptb250aCk7XG4gICAgICAgIHJldHVybiBOdW1iZXIucGFyc2VGbG9hdChuMS50b0ZpeGVkKDMpKTtcbiAgICB9XG5cbiAgICBnZXRQaXRJbmZvQnlNb250aChtb250aCkge1xuICAgICAgICBpZiAodGhpcy5waXRJbmZvTWFwW21vbnRoXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGl0SW5mb01hcFttb250aF07IC8vIGdldCBmcm9tIGNhY2hlXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuMSA9IHRoaXMubjFCeU1vbnRoKG1vbnRoKTtcbiAgICAgICAgY29uc3QgeyByYXRlLCBxdWlja0NhbGN1bGF0ZURlZHVjdGluZywgbGV2ZWwgfSA9IHRoaXMucGl0Rm9ybS5nZXRMZXZlbE1ldGEobjEpO1xuICAgICAgICBjb25zdCBwaXRIaXN0b3J5QW1vdW50ID0gWy4uLkFycmF5KG1vbnRoIC0gMSkua2V5cygpXVxuICAgICAgICAgICAgLm1hcChtID0+IG0gKyAxKVxuICAgICAgICAgICAgLnJlZHVjZSgoYW1vdW50LCBtKSA9PiBhbW91bnQgKyB0aGlzLmdldFBpdEluZm9CeU1vbnRoKG0pLnBpdCwgMCk7XG4gICAgICAgIGNvbnN0IHBpdCA9IG4xICogcmF0ZSAtIHF1aWNrQ2FsY3VsYXRlRGVkdWN0aW5nIC0gcGl0SGlzdG9yeUFtb3VudDtcbiAgICAgICAgY29uc3QgcGl0SW5mbyA9IHsgcGl0LCBsZXZlbCwgcmF0ZSwgcXVpY2tDYWxjdWxhdGVEZWR1Y3RpbmcgfTtcbiAgICAgICAgdGhpcy5waXRJbmZvTWFwW21vbnRoXSA9IHBpdEluZm87IC8vIHNhdmUgdG8gY2FjaGVcblxuICAgICAgICBjb25zb2xlLmxvZyhgWyR7bW9udGh9XSAke3BpdH0gPSAke24xfSAqICR7cmF0ZX0gLSAke3F1aWNrQ2FsY3VsYXRlRGVkdWN0aW5nfSAtICR7cGl0SGlzdG9yeUFtb3VudH1gKTtcbiAgICAgICAgcmV0dXJuIHBpdEluZm87XG4gICAgfVxuXG4gICAgY2FsY3VsYXRlKCkge1xuICAgICAgICB0aGlzLnBpdEluZm9NYXAgPSB7fTsgLy8gaW5pdCBjYWNoZVxuICAgICAgICBjb25zdCBtb250aHMgPSBbLi4uQXJyYXkoMTIpLmtleXMoKV0ubWFwKG0gPT4gbSArIDEpO1xuICAgICAgICByZXR1cm4gbW9udGhzLm1hcChtb250aCA9PiB7XG4gICAgICAgICAgICBjb25zdCBwaXRJbmZvID0gdGhpcy5nZXRQaXRJbmZvQnlNb250aChtb250aCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vbnRoLFxuICAgICAgICAgICAgICAgIC4uLnBpdEluZm8sXG4gICAgICAgICAgICAgICAgcGl0OiBOdW1iZXIucGFyc2VGbG9hdChwaXRJbmZvLnBpdC50b0ZpeGVkKDIpKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUElUQ2FsY3VsYXRvcjtcbiIsImNsYXNzIFBJVERlZHVjdEluQWR2YW5jZVJvdyB7XG5cbiAgICBsZXZlbCA9IDA7XG5cbiAgICByYXRlID0gMDtcblxuICAgIHF1aWNrQ2FsY3VsYXRlRGVkdWN0aW5nID0gMDtcblxuICAgIHZhbGlkYXRlID0gKCkgPT4gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihsZXZlbCwgcmF0ZSwgcXVpY2tDYWxjdWxhdGVEZWR1Y3RpbmcsIHZhbGlkYXRlKSB7XG4gICAgICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgdGhpcy5yYXRlID0gcmF0ZTtcbiAgICAgICAgdGhpcy5xdWlja0NhbGN1bGF0ZURlZHVjdGluZyA9IHF1aWNrQ2FsY3VsYXRlRGVkdWN0aW5nO1xuICAgICAgICB0aGlzLnZhbGlkYXRlID0gdmFsaWRhdGU7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBJVERlZHVjdEluQWR2YW5jZVJvdztcbiIsImltcG9ydCBQSVREZWR1Y3RJbkFkdmFuY2VSb3cgZnJvbSAnLi9QSVREZWR1Y3RJbkFkdmFuY2VSb3cnO1xuaW1wb3J0IFBJVERlZHVjdEluQWR2YW5jZUZvcm0gZnJvbSAnLi9QSVREZWR1Y3RJbkFkdmFuY2VGb3JtJztcblxuY29uc3QgcGl0RGVkdWN0SW5BZHZhbmNlRm9ybTEgPSBuZXcgUElURGVkdWN0SW5BZHZhbmNlRm9ybSgpOyAvLyDkuKrkurrmiYDlvpfnqI7pooTmiaPnjofooajkuIBcblxucGl0RGVkdWN0SW5BZHZhbmNlRm9ybTEuYWRkKG5ldyBQSVREZWR1Y3RJbkFkdmFuY2VSb3coMSwgMC4wMywgMCwgbSA9PiBtIDw9IDM2MDAwKSk7XG5waXREZWR1Y3RJbkFkdmFuY2VGb3JtMS5hZGQobmV3IFBJVERlZHVjdEluQWR2YW5jZVJvdygyLCAwLjEwLCAyNTIwLCBtID0+IG0gPiAzNjAwMCB8fCBtIDw9IDE0NDAwMCkpO1xucGl0RGVkdWN0SW5BZHZhbmNlRm9ybTEuYWRkKG5ldyBQSVREZWR1Y3RJbkFkdmFuY2VSb3coMywgMC4yMCwgMTY4MjksIG0gPT4gbSA+IDE0NDAwMCB8fCBtIDw9IDMwMDAwMCkpO1xucGl0RGVkdWN0SW5BZHZhbmNlRm9ybTEuYWRkKG5ldyBQSVREZWR1Y3RJbkFkdmFuY2VSb3coNCwgMC4yNSwgMzE5MjAsIG0gPT4gbSA+IDMwMDAwMCB8fCBtIDw9IDQyMDAwMCkpO1xucGl0RGVkdWN0SW5BZHZhbmNlRm9ybTEuYWRkKG5ldyBQSVREZWR1Y3RJbkFkdmFuY2VSb3coNSwgMC4zMCwgNTI5MjAsIG0gPT4gbSA+IDQyMDAwMCB8fCBtIDw9IDY2MDAwMCkpO1xucGl0RGVkdWN0SW5BZHZhbmNlRm9ybTEuYWRkKG5ldyBQSVREZWR1Y3RJbkFkdmFuY2VSb3coNiwgMC4zNSwgODU5MjAsIG0gPT4gbSA+IDY2MDAwMCB8fCBtIDw9IDk2MDAwMCkpO1xucGl0RGVkdWN0SW5BZHZhbmNlRm9ybTEuYWRkKG5ldyBQSVREZWR1Y3RJbkFkdmFuY2VSb3coNywgMC40NSwgMTgxOTIwLCBtID0+IG0gPiA5NjAwMDApKTtcblxuZXhwb3J0IGRlZmF1bHQgcGl0RGVkdWN0SW5BZHZhbmNlRm9ybTE7XG4iLCJjbGFzcyBQSVREZWR1Y3RJbkFkdmFuY2VGb3JtIHtcbiAgICBsZXZlbHMgPSBbXTtcblxuICAgIGFkZChsZXZlbCkge1xuICAgICAgICB0aGlzLmxldmVscy5wdXNoKGxldmVsKTtcbiAgICB9XG5cbiAgICBnZXRMZXZlbE1ldGEobW9uZXkpIHtcbiAgICAgICAgY29uc3QgbGV2ZWxNZXRhID0gdGhpcy5sZXZlbHMuZmluZChsdmwgPT4gbHZsLnZhbGlkYXRlKG1vbmV5KSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coYGdvdDogcmF0ZSA9PiAke2xldmVsTWV0YS5yYXRlfSwgbGV2ZWwgPT4gJHtsZXZlbE1ldGEubGV2ZWx9IChhcyBtb25leSBpcyAke21vbmV5fSlgKTtcblxuICAgICAgICByZXR1cm4gbGV2ZWxNZXRhO1xuICAgIH1cblxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMubGV2ZWxzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBJVERlZHVjdEluQWR2YW5jZUZvcm07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7cGl0TW9udGhseURlZHVjdGVkfSBmcm9tIFwiLi4vQ29uc3RhbnRzXCI7XG5cbmNsYXNzIFVzZXJTYWxhcnlGb3JtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICAgIGZvcm0gPSBudWxsO1xuXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICB0aGlzLnNldEZvcm0gPSB0aGlzLnNldEZvcm0uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVTdWJtaXQgPSB0aGlzLmhhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIHNldEZvcm0ocmVmKSB7XG4gICAgICAgIHRoaXMuZm9ybSA9IHJlZjtcbiAgICB9XG5cbiAgICBoYW5kbGVTdWJtaXQoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc3QgeyBvblN1Ym1pdCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgZm9ybVZhbHVlcyA9ICQodGhpcy5mb3JtKVxuICAgICAgICAgICAgLnNlcmlhbGl6ZUFycmF5KClcbiAgICAgICAgICAgIC5yZWR1Y2UoKHJlZHVjZXIsIGZpZWxkKSA9PiAoey4uLnJlZHVjZXIsIFtmaWVsZC5uYW1lXTogTnVtYmVyLnBhcnNlRmxvYXQoZmllbGQudmFsdWUpIH0pLCB7fSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coYGZvcm1WYWx1ZXMgPT4gJHtKU09OLnN0cmluZ2lmeShmb3JtVmFsdWVzKX1gKTtcblxuICAgICAgICBpZiAodHlwZW9mIG9uU3VibWl0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvblN1Ym1pdChmb3JtVmFsdWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Zm9ybSByZWY9e3RoaXMuc2V0Rm9ybX0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fT5cbiAgICAgICAgICAgICAgICA8ZmllbGRzZXQ+XG4gICAgICAgICAgICAgICAgICAgIDxsZWdlbmQ+6Jaq6LWE5oOF5Ya1PC9sZWdlbmQ+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cIk1vbnRobHlTYWxhcnlcIj7mr4/mnIjlupTlj5Hlt6XotYQ8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJudW1iZXJcIiBuYW1lPVwiTW9udGhseVNhbGFyeVwiIHN0ZXA9XCIwLjAxXCIgcGxhY2Vob2xkZXI9XCLmr4/mnIjlupTlj5Hlt6XotYRcIiBkZWZhdWx0VmFsdWU9XCIxMDAwMFwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJNb250aGx5RGVkdWN0ZWRcIj7mr4/mnIjlh4/pmaTotLnnlKg8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJudW1iZXJcIiBuYW1lPVwiTW9udGhseURlZHVjdGVkXCIgc3RlcD1cIjAuMDFcIiBwbGFjZWhvbGRlcj1cIuavj+aciOWHj+mZpOi0ueeUqFwiIHZhbHVlPXtwaXRNb250aGx5RGVkdWN0ZWR9IHJlYWRPbmx5IGRpc2FibGVkIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJNb250aGx5U3BlY2lhbERlZHVjdGVkXCI+5LiJ6Zmp5LiA6YeR562J5LiT6aG55omj6ZmkPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwibnVtYmVyXCIgbmFtZT1cIk1vbnRobHlTcGVjaWFsRGVkdWN0ZWRcIiBzdGVwPVwiMC4wMVwiIHBsYWNlaG9sZGVyPVwi5LiJ6Zmp5LiA6YeR562J5LiT6aG55omj6ZmkXCIgZGVmYXVsdFZhbHVlPVwiMTUwMFwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJNb250aGx5U2l4U3BlY2lhbERlZHVjdGVkXCI+NuWkp+mhueetieS4k+mhueaJo+mZpDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJNb250aGx5U2l4U3BlY2lhbERlZHVjdGVkXCIgc3RlcD1cIjAuMDFcIiBwbGFjZWhvbGRlcj1cIjblpKfpobnnrYnkuJPpobnmiaPpmaRcIiBkZWZhdWx0VmFsdWU9XCIxMDAwXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj7orqHnrpc8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PlxuICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVXNlclNhbGFyeUZvcm07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFBJVENhbGN1bGF0b3IgZnJvbSBcIi4uL1BJVENhbGN1bGF0b3JcIjtcbmltcG9ydCBwaXREZWR1Y3RJbkFkdmFuY2VGb3JtMSBmcm9tIFwiLi4vUGl0RGVkdWN0SW5BZHZhbmNlRm9ybTFcIjtcbmltcG9ydCBVc2VyU2FsYXJ5Rm9ybSBmcm9tICcuL1VzZXJTYWxhcnlGb3JtJztcblxuY2xhc3MgUGl0Q2FsYyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgcmVzdWx0OiBudWxsLFxuICAgICAgICB0YWI6ICd0YWJsZScsXG4gICAgfTtcblxuICAgIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVTdWJtaXQgPSB0aGlzLmhhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnNob3dSZXN1bHQgPSB0aGlzLnNob3dSZXN1bHQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zaG93Q1NWUmVzdWx0ID0gdGhpcy5zaG93Q1NWUmVzdWx0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc2hvd1RhYmxlUmVzdWx0ID0gdGhpcy5zaG93VGFibGVSZXN1bHQuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBoYW5kbGVTdWJtaXQodmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IHsgTW9udGhseVNhbGFyeSwgTW9udGhseVNwZWNpYWxEZWR1Y3RlZCwgTW9udGhseVNpeFNwZWNpYWxEZWR1Y3RlZCB9ID0gdmFsdWVzO1xuXG4gICAgICAgIGNvbnN0IGNhbGMgPSBuZXcgUElUQ2FsY3VsYXRvcihcbiAgICAgICAgICAgIHBpdERlZHVjdEluQWR2YW5jZUZvcm0xLFxuICAgICAgICAgICAgTW9udGhseVNhbGFyeSxcbiAgICAgICAgICAgIE1vbnRobHlTcGVjaWFsRGVkdWN0ZWQsXG4gICAgICAgICAgICBNb250aGx5U2l4U3BlY2lhbERlZHVjdGVkLFxuICAgICAgICApO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxjLmNhbGN1bGF0ZSgpO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyByZXN1bHQgfSk7XG4gICAgfVxuXG4gICAgc2hvd1Jlc3VsdCh0YWIpIHtcbiAgICAgICAgY29uc29sZS5sb2coYHRhZyA9PiAke3RhYn1gKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRhYiB9KTtcbiAgICB9XG5cbiAgICBzaG93Q1NWUmVzdWx0KCkge1xuICAgICAgICB0aGlzLnNob3dSZXN1bHQoJ2NzdicpO1xuICAgIH1cblxuICAgIHNob3dUYWJsZVJlc3VsdCgpIHtcbiAgICAgICAgdGhpcy5zaG93UmVzdWx0KCd0YWJsZScpO1xuICAgIH1cblxuICAgIHJlbmRlclByZVRleHQoKSB7XG4gICAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAn5pyI5Lu9LOW6lOe8tOeojlxcbicsXG4gICAgICAgICAgICAuLi5yZXN1bHQubWFwKCh7IG1vbnRoLCBwaXQgfSkgPT4gYCR7bW9udGh9LCR7cGl0fVxcbmApXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgcmVuZGVyUHJlVGFibGUoKSB7XG4gICAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPVwidGFibGVcIj5cbiAgICAgICAgICAgICAgICA8dGhlYWQgY2xhc3NOYW1lPVwidGhlYWQtZGFya1wiPlxuICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCI+5pyI5Lu9PC90aD5cbiAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCI+5bqU57y056iOPC90aD5cbiAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCI+562J57qnPC90aD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lm1hcCgoeyBtb250aCwgcGl0LCBsZXZlbCB9KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPVwicm93XCI+e21vbnRofTwvdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPntwaXR9PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGtiZD57bGV2ZWx9PC9rYmQ+PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlclJlc3VsdCgpIHtcbiAgICAgICAgY29uc3QgeyByZXN1bHQsIHRhYiB9ID0gdGhpcy5zdGF0ZTtcblxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2Puayoeaciee7k+aenDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZmllbGRzZXQ+XG4gICAgICAgICAgICAgICAgPGxlZ2VuZD7nvLTnqI7nu5Pmnpw8L2xlZ2VuZD5cblxuICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJuYXYgbmF2LXRhYnNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm5hdi1pdGVtXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9e2BuYXYtbGluayAke3RhYiA9PT0gJ3RhYmxlJyA/ICdhY3RpdmUnIDogJyd9YH0gaHJlZj1cImphdmFzY3JpcHQ6dm9pZChudWxsKTtcIiBvbkNsaWNrPXt0aGlzLnNob3dUYWJsZVJlc3VsdH0+6KGo5qC8PC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibmF2LWl0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT17YG5hdi1saW5rICR7dGFiID09PSAnY3N2JyA/ICdhY3RpdmUnIDogJyd9YH0gaHJlZj1cImphdmFzY3JpcHQ6dm9pZChudWxsKTtcIiBvbkNsaWNrPXt0aGlzLnNob3dDU1ZSZXN1bHR9PkNTVjwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8L3VsPlxuXG4gICAgICAgICAgICAgICAgPGJyIC8+XG5cbiAgICAgICAgICAgICAgICB7dGFiID09PSAnY3N2JyA/IDxwcmU+e3RoaXMucmVuZGVyUHJlVGV4dCgpfTwvcHJlPiA6IG51bGx9XG4gICAgICAgICAgICAgICAge3RhYiA9PT0gJ3RhYmxlJyA/IHRoaXMucmVuZGVyUHJlVGFibGUoKSA6IG51bGx9XG4gICAgICAgICAgICA8L2ZpZWxkc2V0PlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPFVzZXJTYWxhcnlGb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdH0gLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJSZXN1bHQoKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBQaXRDYWxjO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFBpdENhbGMgZnJvbSAnLi9jb21wb25lbnRzL1BpdENhbGMnO1xuXG5jb25zdCBBcHAgPSAoKSA9PiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICA8bmF2IGNsYXNzTmFtZT1cIm5hdmJhciBuYXZiYXItZXhwYW5kLW1kIG5hdmJhci1kYXJrIGZpeGVkLXRvcCBiZy1kYXJrXCI+XG4gICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJuYXZiYXItYnJhbmRcIiBocmVmPVwiaHR0cHM6Ly93eHFlZS5naXRodWIuaW8vMjAxOS1DTi1QSVQvXCI+MjAxOSDkuK3lm70g6Jaq6LWE5Liq56iO6K6h566X5Zmo77yI566A54mI77yJPC9hPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJuYXZiYXItdG9nZ2xlclwiIHR5cGU9XCJidXR0b25cIiBkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9XCIjbmF2YmFyc0V4YW1wbGVEZWZhdWx0XCIgYXJpYS1jb250cm9scz1cIm5hdmJhcnNFeGFtcGxlRGVmYXVsdFwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJUb2dnbGUgbmF2aWdhdGlvblwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5hdmJhci10b2dnbGVyLWljb25cIj4mbmJzcDs8L3NwYW4+XG4gICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xsYXBzZSBuYXZiYXItY29sbGFwc2VcIiBpZD1cIm5hdmJhcnNFeGFtcGxlRGVmYXVsdFwiPlxuICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJuYXZiYXItbmF2IG1yLWF1dG9cIj5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm5hdi1pdGVtIGFjdGl2ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwibmF2LWxpbmtcIiBocmVmPVwiaHR0cHM6Ly93eHFlZS5naXRodWIuaW8vMjAxOS1DTi1QSVQvXCI+SG9tZSA8c3BhbiBjbGFzc05hbWU9XCJzci1vbmx5XCI+KGN1cnJlbnQpPC9zcGFuPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm5hdi1pdGVtXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJuYXYtbGlua1wiIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vd3hxZWUvMjAxOS1DTi1QSVRcIj5HaXRodWI8L2E+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L25hdj5cblxuICAgICAgICA8bWFpbiByb2xlPVwibWFpblwiPlxuICAgICAgICAgICAgPGgxPjIwMTnlubTkuKrkurrmiYDlvpfnqI7orqHnrpflmag8L2gxPlxuICAgICAgICAgICAgPFBpdENhbGMgLz5cbiAgICAgICAgPC9tYWluPlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4pO1xuXG5SZWFjdERPTS5yZW5kZXIoXG4gICAgPEFwcCAvPixcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpXG4pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==